
Welcome everyone to a Edureka YouTube channel. My name is Saurabh and today I'll be taking you through this entire session on Devops full course. So we have designed this crash


the modules are structured. We'll start by understanding. What is the meaning of devops? What was the methodology before devops? Right? So all those questions will be answered in
0:35
the first module. Then we are going to talk about what is git how it works. And what is the meaning of Version Control and how we can achieve that with the help of git, that
0:43
session will be taken by Miss Reyshma. Post that I'll be teaching you how you can create really cool digital pipelines with the help of Jenkins Maven and git and GitHub. After
0:52
that. I'll be talking about the most famous software containerization platform, which is docker and post that Vardhan we'll be teaching you how you can Kubernetes for orchestrating
1:01
Docker container clusters. After that, We are going to talk about configuration management
1:06
using ansible and puppet. Now, both of these tools are really famous in the market ansible is pretty trending whereas puppet is very mature it is there in the market since 2005
1:16
finally. I'll be teaching you how you can perform continuous monitoring with the help of Nagios. So let's start the session guys. Will Begin by understanding what is devops?
1:31
So this is what we'll be discussing today. We'll Begin by understanding why we need devops everything exists for a reason. So we'll try to figure out that reason we are going to
1:38
see what are the various limitations that the traditional software delivery methodologies and how it devops overcomes all of those limitations. Then we are going to focus on what exactly
1:46
is the devops methodology and what are the various stages and tools involved in devops. And then finally in the hands on part I will tell you how you can create a docker image
1:54
how you can build it test it and even push it onto Docker Hub in an automated fashion using Jenkins. So I hope you all are clear with the agenda. So let's move forward guys and we'll
2:04
see why we need DevOps. So guys, let's start with the waterfall model. Now before devops
2:09
organizations were using this particular software development methodology. It was first documented in the year 1970 by Royce and was the first public documented life cycle model. The waterfall
2:20
model describes a development method that is linear and sequential waterfall development
2:25
has distinct goals for each phase of development. Now, you must be thinking why the name waterfall
2:30
model because it's pretty similar to a waterfall. Now what happens in a waterfall once the water has flowed over the edge of the cliff. It cannot turn back the same is the case for
2:39
waterfall development strategy as well. An application will go to the next stage only when the previous stage is complete. So let us focus on what are the various stages involved
2:47
in waterfall methodology. So notice the diagram that is there in front of your screen. If you notice it's almost like a waterfall or you can even visualize it as a ladder as well.
2:56
So first what happens the client gives requirement for an application. So you gather that requirement and you try to analyze it then what happens you design the application how the application
3:05
is going to look like. Then you start writing the code for the application and you build it when I say build it involves multiple think compiling your application, you know unit
3:14
testing then even it involves packaging is well after that it is deployed onto the test servers for testing and then deployed onto the broad service for release. And once the
3:22
application is life. It is monitored. Now. I know this small looks perfect and trust me guys. It was at that time, but think about it what will happen if we use it. Now fine.
3:32
Let me give you a few disadvantages of this model. So here are a few disadvantages. So first one is once the application is in the testing stage. It is very difficult to go
3:40
back and change something that was not well thought out in the concept stage now what I mean by that suppose you have written the code for the entire application but in testing
3:49
there's some bug in that particular application now in order to remove that bug you need to go through the entire source code of the application which used to take a lot of time, right? So
3:59
that is Very big limitation of waterfall model apart from that. No working software is produced until late during the life cycle. We saw that when we are discussing about various stages
4:08
of what for more there are high amount of risk and uncertainty which means that once your product is life it is there in the market then if there is any bug or any downtime,
4:17
then you have to go through the entire source code of the application again, you have to go through that entire process of waterfall model that we just saw in order to produce
4:27
a working software again, right? So that's how it used to take. A lot of time. There's a lot of risk and uncertainty and imagine if you have upgraded some software stack in
4:36
your production environment and that led to the failure of your application now to go back to the previous table version used to also take a lot of time now, it is not a good
4:45
model for complex and object oriented projects and it is not suitable for the Project's where
4:50
requirements are at a moderate to high risk of changing. So what I mean by that suppose your client has given you a requirement for a web application today now you have taken
4:59
Own sweet time and you are in a condition the release the application say after one
5:04
year now after one year, the market has changed. The client does not want a web application.
5:09
He's looking for a mobile application now, so this type of model is not suitable where requirements are at a moderate to high risk of changing. So there's a question popped
5:19
in my screen is from Jessica. She's asking so all the iteration in the waterfall model goes through all the stages. Well, there are no I tration as such Jessica. First of all,
5:29
it is not agile methodology or devops. It is waterfall model, right? There are no I trations once the stage is complete then only it will be good. It will be going to the next
5:38
stage. So there are no I trations as such if you're talking about the application and it is life and then there is some bug or there is some downtime then at that time based on
5:47
the kind of box, which is there in the application Suppose. There might be a bug because of some flawed version of a software stack installed in your production environment. Probably some
5:55
upgraded version because if that your application is not working properly. You need to roll back to the previous table version of the software stack in your production environment.
6:03
So that can be one bug apart from that. There might be bugs related to the code in which you have to check the entire source code of the application again. Now if you look at
6:12
it to roll back and incorporate the feedback that you have got is used to take a lot of time. Right? So I hope this answers your question. All right, she's finally the answer any of
6:22
the questions any other doubt you have guys you can just go ahead and ask me find so there
6:27
are no questions right now. So I hope you have understood what was the relation with waterfall model. What are the various limitations of this waterfall model. Now we are going
6:36
to focus on the next methodology that is called the agile methodology. Now agile methodology
6:41
is a practice that promotes continuous iteration of development and testing throughout the software development life cycle of the project. So the development and the testing of an application
6:49
used to happen continuously with the agile methodology. So what I mean by that if you
6:54
focus on a diagram that is there in front of your screen, so here we get the feedback from the testing that we have done in the previous iteration. We design the application
7:01
again, then we develop it there again. We test it then we discover few things that we can incorporate in the application. We again design it develop it and there are multiple
7:10
I trations involved in development and testing of a particular application cinestyle. Methodology.
7:15
Each project is broken up into several I trations and all I tration should be of the same time duration and generally it is between 2 to 8 weeks and at the end of each iteration of
7:25
working for dr. Should be delivered. So this is what agile methodology in a nutshell is now let me go ahead and compare this with the waterfall model. Now if you notice in
7:33
the diagram that is there in front of your screen, so waterfall model is pretty linear and it's pretty straight as you can see from the diagram that we analyze requirements.
7:40
We plan it design. It build it test it. And then finally we deploy it onto the processor was for release, but when I talk about the agile methodology over here the design build
7:50
and testing part is happening continously. We are writing the code. We are building the application. We are testing it continuously and there are several iterations involved
7:58
in this particular stage. And once the final testing is done. It is then deployed onto the broad service for release, right? So agile methodology basically breaks down the entire
8:08
software delivery life cycle into small sprains or iterations that we call it due to which the development and the testing part of the software delivery life cycle used to happen
8:17
continously. Let's move forward and we are going to focus on what are the various limitations of agile methodology the first and the biggest limitation of agile methodology is that the
8:26
deaf part of the team was pretty agile right the development and testing used to happen continuously. But when I talk about deployment then that was not continuous there were still
8:36
a lot of conflicts happening between the Devon the off side of the company the dev team wants agility. Whereas the Ops Team want stability and there's a very common conflict that happens
8:46
and a lot of you can actually relate to it that the code works fine in the developers laptop, but when it reaches to production there is some bug in the application or it
8:54
does not work any production at all. So this is because if you know some inconsistency in the Computing environment And that has caused that and due to which the operations
9:02
team and the dev team used to fight a lot. There are a lot of conflicts guys at that
9:07
time happening. So agile methodology made the deaf part of the company pretty agile, but when I talk about the off side of the company, they needed some solution in order
9:15
to solve the problem that I've just discussed right? So I hope you are able to understand what kind of a problem I'm focusing on. If you go back to the previous diagram as well
9:24
so over here if you notice only the design build and test or you can say Development building and testing part is continuous, right the deployment is still linear. You need to
9:33
deploy it manually on to the various products overs. That's what you was happening in the agile methodology. Right? So the error that I was talking about you too busy. Our application
9:42
is not working fine. I mean once your application is life and do you do some software stack
9:47
in the production environment? It doesn't work properly now to go back and change something in the production environment used to take a lot of time. For example, you know, you
9:55
have upgraded some particular software stack and because of that your application is Doll working it fails to work now to go back to the previous table version of the software
10:04
stack the operations team was taking a lot of time because they have to go through the login scripts that they have written on in order to provision the infrastructure. So
10:12
let me just give you a quick recap of the things that we have discussed till now, we have discussed quite a lot of history. We started with the waterfall model the traditional
10:20
waterfall model be understood what are its various stages and what are the limitations of this waterfall mode? Then we went ahead and understood what exactly the design methodology
10:29
and how is it different from the waterfall model and what are the various limitations of the agile methodology? So this is what we have discussed till now now we are going
10:36
to look at the solution to all the problems that we have just discussed and the solution is none other than divorce divorce is basically a software development strategy which Bridges
10:47
the gap between the deaf side and the offside of the company. So devops is basically a term
10:52
for a group of Concepts that while not all new half catalyze into a movement and a rapidly
10:59
spreading. Well, the technical community like any new and popular term people may have confused
11:04
and sometimes contradictory impressions of what it is. So let me tell you guys devops is not a technology. It is a methodology. So basically devops is a practice that equated
11:14
to the study of building evolving and operating rapidly changing systems at scale. Now. Let
11:20
me put this in simpler terms. So devops is the practice of operations and development Engineers participating together in the entire software life cycle from design through the
11:31
development process to production support and you can also say that devops is also characterized
11:36
by operation staff making use many of the same techniques as Developers for this system
11:41
work. I'll explain you that how is this definition relevant because all we are saying here is
11:47
devops is characterized by operation staff making use many of the same techniques as
11:53
Developers for their systems work seven. I will explain you infrastructure as code you will understand why I am using this particular definition. So as you know, that devops is
12:02
a software development strategy which Bridges the gap between the dev part in the upside of the company and helps us to deliver good quality software in time and how this happens
12:11
this happens because of various stages and tools involved in Des Moines. So here is a diagram which is nothing but an infinite Loop because everything happens continuously in
12:20
Dev Ops guys, everything starting from coding testing deployment monitoring everything is
12:25
happening continuously, and these are the various tools which are involved in the devops
12:31
methodologic, right? So not only the knowledge of these tools are important for a divorce engineer, but also how to use these tools. How can I architect my software delivery lifecycle
12:40
such that I get the maximum output right? So it doesn't mean that you know, if I have a good knowledge of Jenkins or gate or docker then I become a divorce engineer. No that
12:50
is not true. You should know how to use them. You should know where to use them to get the maximum output. So I hope you have got my point what I'm trying to say here in the next
12:59
slide. Be discussing about various stages that are involved in devops fine. So let's move forward guys and we are going to focus on various stages involved in divorce. So
13:07
these are the various stages involved in devops. Let me just take you through all these stages one by one starting from Version Control. So I'll be discussing all of these stages
13:15
one by one as well. But let me just give you an entire picture of these stages in one slide first. So Version Control is basically maintaining different versions of the code what I mean
13:24
by that Suppose there are multiple developers writing a code for a particular application. So how will I know that which developer has made which commits at what time and which
13:33
commits is actually causing the error and how will I revert back to the previous commit so I hope you are getting my point my point here is how will I manage that source code
13:42
suppose developer a has made a commit and that commit is causing some error. Now how will I know the developer a has made that commit and at what time he made that comment
13:51
and very the code was that editing happened, right? So all of these questions can be answered once you use Version Control tools like git subversion. XXXX of we are going to focus
14:01
on getting our course. So then we have continuous integration. So continuous integration is basically building your application continuously what I mean by that suppose any developer
14:09
made a change the source code a continuous integration server should be able to pull that code. I am prepare a built now when I say build people have this misconception of
14:18
you know, only compiling the source code. It is not true guys includes everything starting from compiling your source code validating your source code code review unit, testing
14:26
integration, testing, etc, etc. And even packaging your application as well. Then comes continuous
14:32
delivery. Now the same continuous integration tool that we are using suppose Jenkins. Now what Jenkins will do once the application is built. It will be deployed onto the test
14:41
servers for testing to perform, you know, user acceptance test or end user testing whether you call it there will be using tools like selenium right for performing automation testing.
14:50
And once that is done it will be then deployed onto the process servers for release, right that is called continuous deployment and here we'll be using configuration management and
14:59
Tools so this is basically to provision your infrastructure to provision your Prada environment
15:04
and let me tell you guys continuous deployment is something which is not a good practice because before releasing a product in the market, there might be multiple checks that
15:11
you want to do before that right? There might be multiple other testings that you want to do. So you don't want this to be automated right? That's why continuous deployment is
15:19
something which is not preferred after continuous delivery. We can go ahead and manually use configuration management tools like puppet chef ansible and salts tag, or we can even
15:27
use Docker for a similar purpose and then we can go ahead and deploy it onto the Crossovers for release. And once the application is live. It is continuously monitored by tools like
15:37
Nagi Os or Splunk, which will provide the relevant feedback to the concern teams, right?
15:42
So these are various stages involved in devops, right? So now let me just go back to clear if there are doubts. So this is our various stages are scheduled various jobs schedule.
15:51
So we have Jenkins here. We have a continuous integration server. So what Jenkins will do the moment any developer makes a change in the source code it Take that code and then
16:00
it will trigger a built using tools like Maven or and or Gradle. Once that is done. It will
16:05
deploy it onto the test servers for testing for end user testing using tools like selenium
16:11
j-unit Etc. Then what happens it will automatically take that tested application and deploy it
16:16
onto the process servers for release, right? And then it is continuously monitored by tools. Like Nagi was plunky LK cetera et cetera. So Jenkins is basically heart of devops life
16:26
cycle. It gives you a nice 360 degree view of your entire software delivery life cycle.
16:32
So with that UI you can go ahead and have a look how your application is doing currently right? We're in which stage it is in right now testing is done or not. All those things.
16:40
You can go ahead and see in the Jenkins dashboard right? There might be multiple jobs running in the Jenkins dashboard that you can see and it gives you a very good picture of the
16:50
entire software delivery life cycle. Uh, don't worry. I'm going to discuss all of these stages in detail when we move forward. We are going to discuss each of these stages one by one.
16:59
Eating from source code management or even call us Version Control. Now what happens in source code management? There are two types of source code management approaches one is
17:07
called centralized Version Control. And another one is called the distributed Version Control the source code management. Now imagine there are multiple developers writing a code for
17:15
an application if there is some bug introduced how will we know which commits has caused that error and how will I revert back to the previous version of the code in order to solve
17:24
these issues source code management tools were introduced and there are two types of source code management tools one is called centralized Version Control and another is
17:31
distributed Version Control. So let's discuss the centralized Version Control first. So centralized version control system uses a central server to store all the files and
17:40
enables team collaboration. It works in a single repository to which users can directly access a central server. So this is what happens here guys. So every developer has a working
17:49
copy the working directory. So the moment they want to make any change in the source code. They can go ahead and make a comment in the shared repository right and they can
17:57
even update their working. By you know pulling the code that is there in the repository as well. So the repository then the diagram that your nose noticing indicates a central server
18:07
that could be local or remote which is directly connected to each of the programmers workstation. As you can see now every programmer can extract or update their workstation or the data present
18:16
in the repository or can even make changes to the data or committed in the repository.
18:21
Every operation is performed directly on the central server or the central repository,
18:26
even though it seems pretty convenient to maintain a single repository, but it has a lot of drawbacks. But before I tell you the drawbacks, let me tell you what advantage
18:34
we have here. So first of all, if anyone makes a comment in the repository, then it will be a commit ID Associated to it and there will always be a commit message. So, you know,
18:43
which person has made that commit and at what time and where in the code basically, right so you can always revert back but let me now discuss few disadvantages. First of all, it
18:53
is not locally available. Meaning you always need to be connected to a network to perform any action. It is always not available locally, right? So you need to be connected with the
19:03
some sort of network. Basically since everything is centralized in case of the central server getting crashed or corrupted. It will result in losing the entire data of the project.
19:12
Right? So that's a very serious issue guys. And that is one of the reasons why Industries don't prefer centralized Version Control System, that's talk about the distributed version
19:20
control system. Now now these systems do not necessary rely on a central server to store all the versions of the project file. So in distributed Version Control System, every
19:29
contributor has a local copy or clone of the main repository as you can see, I'm highlighting
19:34
with my cursor right now that is everyone maintains a local repository of their own which contains all the files and metadata present in the main repository. As you can
19:44
see then the diagram is well, every programmer maintains a local repository on its own which is actually the copy or clone of the central repository on their hard drive. They can commit
19:53
and update the local repository without any interference. They can update the local repositories
19:58
with new data coming from the central server by an operation called pull and effect changes
20:04
the main repository by an operation called push write operation called push from the
20:09
local post re now. You must be thinking what advantage we get here. What are the advantages
20:15
of distributed version control over the centralized Version Control now basically the act of cloning and entire repository gives you that Advantage. Let me tell you how now all operations apart
20:25
from push-and-pull are very fast because the tool only needs to access the hard drive not
20:30
a remote server, hence, you do not always need an internet connection committing new change sets can be done locally without manipulating the data on the main proposed three. Once
20:40
you have a group of change sets ready. You can push them all at once. So what you can do is you can ask the commit to your local repository, which is there in your local hard
20:48
drive. You can commit the changes. Are you want in the source code you can you know, once you review it and then once you have quite a lot of It's ready. You can go ahead
20:58
and push it onto the central server as well as the central server gets crashed at any point of time. The lost data can be easily recovered from any one of the contributors
21:06
local repository. This is one very big Advantage apart from that since every contributor has
21:12
a full copy of the project repository. They can share changes with one another if they want to get some feedback before affecting the changes in the main repository as well.
21:20
So these are the various ways in which you know distributed version control system is actually better than a centralized version control system. So we saw the two types of
21:28
phones code Management systems and I hope you have understood it. We are going to discuss a one source code management tool called gate, which is very popular in the market right
21:36
now almost all the companies actually use get for now. I'll move forward and we'll go into focus on a source code management tool a distributed Version Control tool that is
21:45
called as get now before I move forward guys. Let me make this thing clear. So when I say Version Control or source code management, it's one in the same thing. Let's talk about
21:53
get now now git is a distributed Version Control tool. Boards distributed nonlinear workflows
21:59
by providing data Assurance for developing quality software, right? So it's a pretty
22:04
tough definition to follow but it will be easier for you to understand with the diagram that is there in front of your screen. So for example, I am a developer and this is
22:11
my working directory right now. What I want to do is I want to make some changes to my local repository because it is a distributed Version Control System. I have my local repository
22:21
as well. So what I'll do I'll perform a get add operation now because of get add whatever
22:26
was there in my working directory will be present in the staging area. Now, you can visualize the staging area as something which is between the working directory and your
22:34
local repository, right? And once you have done get ad you can go ahead and perform git
22:40
commit to make changes to your local repository. And once that is done you can go ahead and
22:45
push your changes to the remote repository as well. After that you can even perform get pull to add whatever is there in your remote repository to your local repository and perform
22:54
get check out to our everything which was there in your Capacity of working directory as well. All right, so let me just repeat it once more for you guys. So I have a working
23:02
directory here. Now in order to add that to my local repository. I need to First perform get add that will add it to my staging area staging area is nothing but area between the
23:12
working directory and the local repository after guitar. I can go ahead and execute git commit which will add the changes to my local repository. Once that is done. I can perform
23:21
get push to push the changes that I've made in my local repository to the remote repository and in order to pull other changes which are there in the remote repository of the local
23:29
repository. You can perform get pull and finally get check out that will be added to your working directory as well and get more which is also a pretty similar command now before we move
23:39
forward guys. Let me just show you a few basic commands of get so I've already installed get in my Center is virtual machine. So let me just quickly open my Center as virtual
23:47
machine to show you a few basic operations that you can perform with get device virtual machine, and I've told you that have already installed get now in order to check the version
23:55
of get you can just Then he'd get - - version and you can see that I have two point seven
24:00
point two here. Let me go ahead and clear my terminal. So now let me first make a directory and let me call this as a deal breaker - repository and I'll move into this array core repository.
24:12
So first thing that I need to do is initialize this repository as an empty git repository. So for that all I have to type here is get in it and it will go ahead and initialize
24:21
this R empty directory as a local git repository. So it has been initialized now as you can
24:26
see initialise empty git repository in home and Drake I drink - report dot kit or right
24:31
then so over here. I'm just going to create a file of python file. So let me just name that as a deer a card dot p y and I'm going to make some changes in this particular files.
24:42
So I'll use G edit for that. I'm just going to write in here, uh normal print statement.
24:49
Welcome to Ed Eureka close the parenthesis save it. Close it. Let me get my terminal
24:58
now if I hit an LS command so I can see that edeka dot py file is here. Now. If you can recall from the slides, I was telling you in order to add a particular file or a directory
25:08
into the local git repository first. I need to add it to my staging area and how will I do that by using the guitar? Come on. So all I have to type here is get ad at the name
25:17
of my file, which is edureka.py then here we go. So it is done now now if I type in
25:22
here git status it will give me the files which I need to commit. So this particular
25:28
command gives me the status status as a little tell me model files. They need to commit to the local repository. So it says when you file has been created that is in the record
25:36
or py in the state and it is present in the staging area and I need to come at this particular Phi. So all I have to type here is git commit - M and the message that I want so I'll just
25:49
type in here first commit and here we go. So it is successfully done now. So I've added
25:56
a particular file to my local git repository. So now what I'm going to show you is basically
26:01
how to deal with the remote repositories. So I have a remote git repository present on GitHub. So I have created a GitHub account. The first thing that you need to do is create
26:09
a GitHub account and then you can go ahead and create a new repository there and then I'll tell you how to add that particular repository to a local git repository. Let me just go
26:18
to my browser once and me just zoom in a bit. And yeah, so this is my GitHub account guys.
26:26
And what I'm going to do is I'm first going to go to this repository stab and I'm going to add one new repository. So I'll click on new. I'm going to give a name to this repository.
26:37
So whatever name that you want to give you just go ahead and do that. Let me just write it here. Get - tutorial - Dev Ops, whatever name that you feel like just go ahead and
26:49
write that I'm going to keep it public if you want any description you can go ahead and give that and I can also initialize it with a readme create a posse and that's all
26:57
you have to do in order to create a remote GitHub repository now over here. You can see that there's only one read me dot MD file. So what I'm going to do, I'm just going to
27:05
copy this particular SSH link and I'm going to perform git remote add origin and the link
27:13
there are just copy. I'll paste it here and here we go. So this has basically added my
27:19
remote repository to my local repository. Now, what I can do is I can go ahead and pull
27:24
whatever is there in my remote repository to my local git repository for that. All our to type here is git pull origin master and here we go. Set is done. Now as you can see
27:36
that I've pulled all the changes. So let me clear my terminal and hit an endless command. So you'll find read me dot MD present here right now. What I'm going to show you is basically
27:44
how to push this array card or py file onto my remote repository. So for that all I have to type here is git push origin master and here we go. So it is done. Now. Let me just
27:57
go ahead and refresh this particular repository and you'll find Erica py file here. Let me
28:03
just go ahead and reload this so you can see a record or py file where I've written welcome to edit a car. So it's that easy guys. Let me clear my terminal now. So I've covered
28:13
few basics of get so let's move forward with this devops tutorial and we are going to focus on the next stage which is called continuous integration. So we have seen few basic commands
28:21
of get we saw how to initialize an empty directory into a git repository how we can you know, add a file to the staging area and how we can go ahead and commit in the local repository.
28:30
After that. We saw how we can push the changes in the local repository to the remote repository.
28:35
My repository was on GitHub. I told you how to connect to the remote repository and then how even you can pull the changes from the remote repository rights all of these things
28:43
we have discussed in detail. Now, let's move forward guys in we are going to focus on the next stage which is called continuous integration. So continuous integration is basically a development
28:52
practice in which the developers are required to commit changes. Just the source code in a shared repository several times a day, or you can say more frequently and every commit
29:01
made in the repository is then built this allows the teams to detect the problems early. So let us understand this with the help of the diagram that is there in front of your
29:09
screen. So here we have multiple developers which are writing code for a particular application and all of them are committing code to a shared repository which can be a git repository or
29:18
subversion repository from there the Jenkins server, which is nothing but a continuous integration tool will pull that code the moment any developer commits a change in the source
29:27
code the moment any developer coming to change in the source code Jenkins server will pull that it will prepare a built now as I have told you earlier as well build does not only
29:35
mean compiling the source code. It includes compiling but apart from that there are other things as well. For example code review unit testing integration testing, you know packaging
29:44
your application into an executable file. It can be a war file. It can be a jar file. So it happens in a continuous manner the moment any developer coming to change in the source
29:53
code Jenkins server will pull that prepare a bill. Right. This is called as continuous integration. So Jenkins has various Tools in order to perform this so it has various
30:02
tools for development testing and deployment Technologies. It has well over 2,500 plugins.
30:07
So you need to install that plug-in and you can just go ahead and Trigger whatever job you wanted with the help of Jenkins. It is originally written in Java. Right and let's
30:16
move forward and we are going to focus on continuous delivery now, so continuous delivery is nothing but taking continuous integration to The Next Step. So what are we doing in
30:24
a continuous manner or in an automated fashion? We are taking this build application onto
30:29
the test server for end user testing or unit or user acceptance test, right? So that is
30:35
basically what is continuous delivery. So let us just summarize containers delivery again moment. Any developers makes a change in the source code. Jenkins will pull that
30:42
code prepare a built once build a successful. It will take the build application and Jenkins
30:48
will deploy it onto the test server for end user testing or user acceptance test. So this is basically what continuous delivery is is happens in a continuous fashion. So what advantage
30:56
we get here? Basically if they the build failure then we know which commits has caused that
31:02
error and we don't need to go through the entire source code of the application similarly for testing even if any bug appears in testing is well, we know which comment has caused
31:11
that are Ernie can just go ahead and you know have a look at that particular comment instead of checking out the entire source code of the application. So they basically this system
31:19
allows the team to detect problems early, right as you can see from the diagram as web. You know, if you want to learn more about Jenkins, I'll leave a link in the chat box.
31:27
You can go ahead and refer that and people are watching it on YouTube can find that link in the description box below now, we're going to talk about continuous deployment. So continuous
31:35
deployment is basically taking the application the build application that you have tested
31:40
and deploying that onto the process servers for release in an automated fashion. So once the application is tested it will automatically be deployed on to the broad service for release.
31:48
Now, this is something not a good practice as I've told you earlier as well because there might be certain checks that you need to do now to release your software in the market.
31:55
Are you might want to Market your product before that? So there are a lot of things that you want to do before deploying your application. So it is not advisable or a good
32:03
practice to you know, actually automatically deploying your application onto the processor which for release so this is basically continuous integration delivery and deployment any questions.
32:12
You have guys you can ask me. All right, so Dorothy wants me to repeat it. Once more sure jovial do that. Let's start with continuous integration. So continuous integration is
32:21
basically committing the changes in the source code more frequently and every commit will then be built using a Jenkins server, right or any continuous integration server. So this
32:30
Jenkins what it will do it will trigger a build the moment any developer commits a change in the source code and build includes of compiling code review unit, testing integration testing
32:39
packaging and everything. So I hope you are clear with what is continuous integration. It is basically continuously building your application, you know, the moment any developer
32:46
come in to change in the source code. Jenkins will pull that code and repairable. Let's move forward and now I'm going to explain you continuous delivery now incontinence delivery
32:54
the package that we Created here the war of the jar file of the executable file. Jenkins
32:59
will take that package and it will deploy it onto the test server for end user testing. So this kind of testing is called the end user testing or user acceptance test where
33:07
you need to deploy your application onto a server which can be a replica of your production server and you perform end user testing or you call it user acceptance test. For example
33:16
in my application if I want to check all the functions right functional testing if I want to perform functional testing of my application, I will first go ahead and check whether my
33:23
search engine is working then I'll check whether people are able to log in or not. So all those functions of a website when I check or an application and I check is basically after
33:31
deploying it on to apps over right? So that's sort of testing is basically what is your functional testing or what? I'm trying to refer here next up. We are going to continuously
33:39
deploy our application onto the process servers for release. So once the application is tested it will be then deployed onto the broad service for release and I've told you earlier is well,
33:48
it is not a good practice to deploy your application continuously or in an automated fashion. So guys you have discussed a lot about Jenkins. How about I show you How Jenkins UI looks
33:57
like and how you can download plugins on all those things. So I've already installed Jenkins in my Center is virtual machine. So let me just quickly open. My Center is virtual machine.
34:05
So guys, this is my Center is virtual machine again and over here. I have configured my Jenkins on localhost port 8080 / Jenkins and here we go. Just need to provide the username
34:19
and password that you have given when you are installing Jenkins. So this is how Jenkins
34:25
looks like guys over here. There are multiple options. You can just go and play around with it. Let me just take you through a few basic options that are there. So when you click
34:33
on new item, you'll be directed to a page which will ask you to give a name to your project. So give whatever name that you want to give then choose a kind of project that
34:40
you want. Right and then you can go ahead and provide the required specifications required configurations for your project. Now when I was talking about plugins, let me tell you
34:49
how you can actually install plug-ins. So you need to go to manage and kins and here's a tab that you'll find manage plugins. In this tab, you can find all the updates that
34:58
are there for the plugins that you have already installed in the available section. You'll find all the available plugins that Jenkins support so you can just go ahead and search
35:06
for the plug-in that you want to install just check it and then you can go ahead and install it similarly. The plug-ins that are installed will be found in the install Tab and then
35:14
you can go ahead and check out the advanced tab as well. So this is something different. Let's not just focus on this for now. Let me go back to the dashboard and this is basically
35:22
one project that I've executed which is called Ada Rekha Pipeline and this blue color symbolizes and it was successful the blue Colour ball means it was successful. That's how it works
35:31
guys. So I was just giving you a tour to the Jenkins dashboard will actually execute the Practical as well. So we'll come back to it later. But for now, let me open my slides
35:39
in will proceed with the next stage in the devops life cycle. So now let's talk about configuration management. So what exactly is configuration management, so now let me
35:48
talk about few issues with the deployment of a particular application or provisioning of the server's so basically what happens, you know, I've been My application but when
35:56
I deployed onto the test servers or onto the process servers, there are some dependency issues because of his my application is not working fine. For example in my developers
36:04
laptop. There might be some software stack which was upgraded but in my prod and in the test environment, they're still using the outdated version of that software side because
36:13
of which the application is not working fine. This is just one example apart from that what happens when your application is life and it goes down because of some reason and that
36:21
reason can be you have upgraded the software stack. Now, how will you go back to the previous table version of that software stack. So there are a lot of issues with you know, the admin
36:29
side of the company the upside of the company which were removed the help of configuration management tools. So, you know before Edmonds used to write these long scripts in order
36:37
to provision the infrastructure whether it's the test environment of the prod environment of the dev environment, so they utilize those long scripts, right which is prone to error
36:45
plus. It used to take a lot of time and apart from that the Edmund who has written that script. No one else can actually recognize what's the problem with it once if you have
36:53
to debug it, so there are a lot of problems at work. Are with the admin side or the Absurd the company which were removed by the help of configuration management tools and when
37:01
very important concept that you guys should understand is called infrastructure as code which means that writing code for your infrastructure. That's what it means suppose if I want to
37:09
install lamp stack on all of these three environments whether it's devtest abroad I will write the code for installing lamp stack in one central location and I can go ahead and deploy it
37:18
onto devtest and prom so I have the record of the system State president my one central
37:24
location, even if I upgrade to the next version, I still have the recorded the previous stable version of the software stack, right? So I don't have to manually go ahead and you know
37:33
write scripts and deployed onto the nodes this is that easy guys. So let me just focus
37:38
on few challenges at configuration management helps us to overcome. First of all, it can help us to figure out which components to change when requirements change. It also helps
37:47
us in redoing an implementation because the requirements have changed since the last implementation
37:52
and very important Point guys that it helps us to revert to a Previous version of the component if you have replaced with a new but the flawed version now, let me tell you
38:00
the importance of configuration management through a use case now the best example I know is of New York Stock Exchange a software glitch prevented the NYC from Trading stocks
38:10
for almost 90 minutes this led to millions of dollars of loss a new software installation
38:16
caused the problem that software was installed on 8 of its twenty trading Terminals and the
38:21
system was tested out the night before however in the morning it failed to operate on the a term ends. So there was a need to switch back to the old software. Now you might think
38:30
that this was a failure of nyc's configuration management process, but in reality, it was
38:35
a success as a result of proper configuration management NYC recovered from that situation
38:40
in 90 minutes, which was pretty fast have the problem continued longer the consequences would have been more severe guys. So I hope you have understood its importance. Now, let's
38:50
focus on various tools available for configuration management. So we have multiple tools like Papa Jeff and silence. Stack I'm going to focus on pop it for now. So pop it is a configuration
38:58
management tool that is used for deploying configuring and managing servers. So, let's see, what are the various functions of puppet. So first of all, you can Define distinct configurations
39:08
for each and every host and continuously check and confirm whether required configuration
39:13
is in place and is not altered on the host. So what I mean by that you can actually Define
39:18
distinct configuration for example in my one particular node. I need this office. I can another node. I need this office stack so I can you know, defined distinct configurations
39:27
for different nodes and continuously check and confirm whether the required configuration
39:32
is in place and is not alter and if it is altered pop, it will revert back to the required
39:37
configurations. This is one function of puppet. It can also help in Dynamic scaling up and scaling down of machines. So what will happen if in your company there's a big billion day
39:45
sale, right and you're expecting a lot of traffic. So at that time in order to provision more servers probably today our task is to provision 10 servers and tomorrow you might
39:54
have two revisions. Jim's right. So how will you do that? You cannot go ahead and do that manually by writing scripts. You need tools like puppet that can help you in Dynamic scaling
40:03
up and scaling down of machines. It provides control over all of your configured machines. So a centralized change gets propagated to all automatically so it follows a master-slave
40:12
architecture in which the slaves will pull the central server for changes made in the
40:17
configuration. So we have multiple nodes there which are connected to the master. So they will poll they will check continuously. Is there any change in the configuration happened
40:24
the master the moment any change happen it will pull that configuration and deploy it onto that particular node. I hope you're getting my point. So this is called pull configuration
40:32
and push configuration. The master will actually push the configurations on to the nose which happens in ansible and salts that but does not happen in pop it in Chef. So these two
40:41
tools follow full configuration and an smellin salts that follows push configuration in which these configurations are pushed onto the nodes and here in chef and puppet. The nodes will
40:49
pull that configurations. They keep on checking the master at regular intervals and if there's any change in the configuration It'll pull it now. Let me explain you the architecture
40:58
that is there in front of your screen. So that is basically a typical puppet architecture in which what happens you can see that there's a master/slave architecture here is our puppet
41:05
master and here is our puppet slave now the functions which are performed in this architecture first, the puppet agent sends the fact to the puppet master. So this puppet slave will
41:13
first send the fact to the Puppet Master facts what our Fox basically they are key value
41:19
data appears. It represents some aspects of slave states such as its IP address up time
41:24
operating system or whether it's a virtual machine, right? So that's what basically facts are and the puppet master uses a fact to compile a catalog that defines how the slaves should
41:34
be configured. Now. What is the catalog it is a document that describes a desired state
41:40
for each resource that Puppet Master manages. Honestly, then what happens the puppet slave
41:46
reports back to the master indicating that configuration is complete and which is also visible in the puppet dashboard. So that's how it works guys. So let's move Forward and
41:55
talk about containerization. So what exactly is containerization so I believe all of you
42:01
have heard about virtual machines? So what are containers containers are nothing but the lightweight alternatives to Virtual machines. So let me just explain that to you. So we
42:11
have Docker containers that will contain the binaries and libraries required for a particular application. And that's when we call it. You know, we have containerized a particular application.
42:19
Right? So let us focus on the diagram that is there in front of your screen. So here we have host operating system on top of which we have Docker engine. We have a No guest
42:27
operating system here guys. It uses the host operating system and we're learning to Containers container one will have application one and it's binaries in libraries the container to
42:37
will have application to and it's binaries and libraries. So all I need in order to run
42:42
my application is this particular container or this particular container? Because all the dependencies are already present in that particular container. So what is basically
42:51
a container it contains my application the dependencies of my application. The binary
42:56
is Ivory is required for that application. Is that in my container nowadays? If you must have noticed that even you want to install some software you will actually get ready
43:04
to use Docker container, right? That is the reason because it's pretty lightweight when you compare it with virtual machines, right? So let me discuss a use case how you can actually
43:12
use Docker in the industry. So suppose you have some complex requirements for your application.
43:18
It can be a microservice. It can be a monolithic application anything. So let's just take microservice. So suppose you have complex requirements for your microservice your you have written the
43:27
dockerfile for that with the help of this Docker 5. I can create a Docker image. So
43:32
Docker image is nothing but you know a template you can think of it as a template for your Docker container, right? And with the help of Docker image, you can create as many Docker
43:40
containers as you want. Let me repeat it once more so we have written the complex requirements for a micro service application in an easy to write Docker file from there. We have created
43:49
a Docker image and with the help of Docker image we can build as many containers as we want. Now that Docker image I can upload that onto Docker Hub, which is nothing. Butter
43:59
git repository of Docker images we can have public repositories can have private repositories e and from Docker Hub any team beat staging a production can pull that particular image
44:08
and prepare as many containers as they want. So what advantage we get here, whatever was
44:14
there in my developers laptop, right? The Microsoft is application. The guy who has written that and the requirement for that microbes obvious application. So that guy's
44:21
basically a developer and because he's only developing the application. So whatever is there in my developers laptop I have replicated in my staging as well as in a production.
44:30
So there's a consistent Computing environment throughout my software delivery life cycle. I hope you are getting my point. So guys, let me just quickly brief you again about
44:39
what exactly a Docker containers so just visualize container as actually a box in which our application
44:45
is present with all its dependencies except the box is infinitely replicable. Whatever
44:50
happens in the Box stays in the Box unless you explicitly take something out or put something in and when it breaks you will just throw it away and get a new What so containers usually
45:00
make your application easy to run on different computer. Ideally the same image should be used to run containers in every environment stage from development to production. So that's
45:10
what basically Docker containers are. So guys. This is my sent to us virtual machine here
45:15
again, and I've already installed docker. So the first thing is I need to start Docker for that. I'll type system CTL start docker. Give the password. And it has started successfully.
45:30
So now what I'm going to do, there are few images which are already there in Docker up which are public images. You can pull it at anytime you want. Right? So you can go ahead
45:38
and run that image as many times as you want. You can create as many containers as you want. So basically when I execute the command of pulling an image from dog a rabbit will try
45:47
to First find it locally whether its present or not and if it is present then it's well and good. Otherwise, we'll go ahead and pull it from the docker Hub. So right so before
45:55
I move forward, let me just show you how dr. Of looks like If you have not created an account
46:01
and Dock and have you need to go and do that because for executing a use case you have to do is it's free of cost. So this is our doctor of looks like guys and this is my repository
46:10
that you can notice here. Right? I can go ahead and search for images here as well. So for example, if I want to search for Hadoop images, which I believe one of you asked so
46:19
you can find that we have Hadoop images present here as well. Right? So these are nothing but few images that are there on Docker Hub. So I believe now I can go back to my terminal
46:28
and execute your basic Docker commands. So the first thing that I'm going to execute is called Docker images which will give the list of all the images that I have in my local
46:36
system. So I have quite a lot of images you can see right this is the size and and all
46:42
those things when it was created the image. This is called the image ID, right? So I have all of these things displayed on my console. Let me just clear my terminal now what I'm
46:51
going to do, I'm going to pull an image rights. All I have to type here is the awkward pull
46:56
for example if I want to pull an Ubuntu image. Just type in here Docker pull open to and
47:02
here we go. So it is using default tag latest. So tag is something that I'll tell you later party at will provide the default tag latest all the time. So it is pulling from the docker
47:12
Hub right now because it couldn't find it locally. So download is completed is currently extracting it. Now if I want to run a container, all I have to type here is to occur and - IIT
47:23
Ubuntu or you can type the image ideas. Well, so I am in the Ubuntu container. So I've told
47:30
you how you can see the various Docker images of told you how you can pull an image from Docker Hub and how you can actually go ahead and run a container and you're going to focus
47:37
on continuous monitoring now, so continuous monitoring tools resolve any system errors,
47:43
you know, what kind of system errors low memory unreachable server, etc, etc. Before they
47:48
have any negative impact on your business productivity. Now, what are the reasons to use continuous monitoring tools? Let me tell you that it detects any network or server
47:57
problems. It can determine the root cause of any issue. It maintains the security and availability of the services and also monitors in troubleshoot server performance issues.
48:06
It also allows us to plan for infrastructure upgrades before outdated system cause failures and it can respond to issues of the first sign of problem and let me tell you guys these
48:14
tools can be used to automatically fix problems when they are detected as well. It also ensures it infrastructure outages have a minimal effect on your organization's bottom line and can
48:24
monitor your entire infrastructure and business processes. So what is continuous monitoring it is all about the ability of an organization to detect report respond contain and mitigate
48:35
that acts that occur on its infrastructure or on the software. So basically we have to monitor the events on the ongoing basis and determine what level of risk. We are experiencing.
48:45
So if I have to summarize continuous monitoring in one definition, I will say it is the integration of an organization security tools. So we have different security tools in an organization
48:55
the integration of those tools the aggregation normalization and correlation of the data
49:01
that is produced by the security tools right now. It happens the data that has been produced
49:08
the analysis of that data based on the organization's risk goals and threat knowledge and near real-time
49:15
response to the risks identified is basically what is continuous monitoring and this is a very good saying guys if you can't measure it, you can't manage it. I hope you know what
49:24
I'm talking about. Now, there are multiple continuous monitoring tools available in the market. We're going to focus on nagas now give us is used for continuous monitoring
49:31
of systems application services and business processes in a devops culture, right and in
49:36
the event of failure nagas can alert technical staff of the problem allowing them to begin the mediation process before outages affect business processes and users or Customers
49:46
so with nagas you don't have to explain why 19 infrastructure outage affect your organization's bottom line. So let me tell you how it works. So I'll focus on the diagram that is there
49:55
in front of your screen. So now I give is runs on a server usually as a Daemon or a service it periodically runs plugins residing on the same server, they contact holes or
50:04
servers on your network so you can see it in the diagram as well. It periodically runs plugins residing on the same server. They contact horse or servers on your network or
50:14
on the Internet or Source overs, which can be locally present or can be remotely present as well. One can view the status information using the web interface. You can also receive
50:23
email or SMS notification if something happens, so now gives them and behaves like a scheduler
50:29
that runs out in scripts at certain moments. It stores the results of those scripts and we'll run other scripts if these results change now what our plugins plugins are compiled
50:37
executables or scripts that can be run from a command line to check the status of a host or service. So now uses the results from the plugins. Mine the current status of the host
50:46
and services on your network. So what happened actually in this diagram now your server is
50:51
running on a host and plugins interact with local or remote host right. Now. These plugins
50:57
will send the information to the scheduler which displays that in the gy that's what is happening guys. All right, so we have discussed all the stages. So let me just give you a
51:05
quick recap of what all things we have discussed first. We saw what was the methodology before devops? We saw the waterfall model. What were its limitations then we understood the agile
51:14
model and the difference between the waterfall and agile methodology. And what are the limitations of agile methodology then we understood how devops overcomes all of those limitations
51:23
in what exactly is the worms. We saw the various stages and tools involved in devops starting
51:28
from Version Control. Then we saw continuous integration. Then we saw countenance delivery. Then we saw countenance deployment. Basically, we understood the difference between integration
51:37
delivery and deployment then we saw what is configuration management and containerization
51:42
and finally explained continuous monitoring, right? So in between I was even switching back to my virtual machine where a few tools already installed and I was telling you a
51:49
few Basics about those tools now comes the most awaited topic of today's session which is our use case. So let's see what we are going to implement in today's use case. So
51:59
this is what we'll be doing. We have git repository, right? So developers will be committing code to this git repository. And from there. Jenkins will pull that code and it will first clone
52:09
that repository after cloning that repository it will build a Docker image using a Docker
52:14
file. So we have the dockerfile will use that to build an image. Once that image is built. We are going to test it and then push it onto Docker Hub as I've told you what is the organ
52:22
of is nothing but like a git repository of Docker images. So this is what we'll be doing. Let me just repeat it once more so developers will be committing changes in the source code.
52:31
So the moment any developers commit to change in the source code Jenkins will clone the entire git repository. It will build a Docker image based on a Docker file that will create
52:39
and from there. It will push the docker image onto the docker Hub. This will happen automatically.
52:45
The click of a button. So what I'll do is we'll be using will be using gate Jenkins and Docker. So let me just quickly open my Virtual Machine and I'll show you that so
52:55
what our application is all about. So we are basically what creating a Docker image of a particular application and then pushing it onto Docker Hub in an automated fashion.
53:02
And our code is written in the GitHub repository. So what is it application? So it's basically a Hello World server written with node. So we have a main dot JS. Let me just go ahead
53:11
and show you on my GitHub repository. Let me just go back. So this is how our application
53:21
looks like guys we have main dot J's right apart from that. We have packaged or Json for a dependencies. Then we have Jenkins file and dockerfile Jenkins file. I'll explain
53:30
it to you what we are going to do with it. But before that let me just explain you few basics of Docker file and how we can build a Docker image of this particular. Very basic
53:39
node.js application. First thing is writing a Docker file now to be able to build a Docker image with our application. We will need a Docker file. Yeah, right you can think of
53:47
it as a blueprint for Docker. It tells Docker what the contents in parameters of our image should be so Docker images are often based on other images, but before that, let me just
53:56
go ahead and create a Docker file for you. So let me just first clone this particular Repository. So let me go to that particular directory first. It's Darren downloads. Let
54:15
me unzip this first unzip divorce - tutorial and let me hit an LS command. So here is my
54:21
application present. So I'll just go to this particular devops - tutorial - master and
54:26
let me just say my terminal let us focus on what all files we have. We have dockerfile. Let's not focus on Jenkins file at all for now, right we have dockerfile. We have main
54:36
dot J's package dot Json read me dot MD and we have test dot J's. So I have a Docker file
54:42
with the help of which I will be creating a Docker image, right? So let me just show you what I have written in this Docker file before this. Let me tell you that Docker images
54:51
are often based on other images right for this example. We are basing our image on the
54:57
official node Docker image. So this line that you are seeing is basically to base our application
55:02
on the official node Docker image. This makes our job easy and our dockerfile very very
55:07
short guys. So the in a hectic task of installing node, and it's dependencies in the image is
55:12
already done in our basement. So we'll just need to include our application. Then we have
55:17
set a label maintainer. I mean, this is optional if you want to do it. Go ahead. If you don't want to do it, it's still fine. There's a health check which is basically for Docker
55:26
to be able to tell if the server is actually up or not. And then finally we are telling Docker which Port ask server will run on right? So this is how we have written the dockerfile.
55:36
Let me just go ahead and close this and now I'm going to create an image using this Docker file. So for that all I have to type here is sudo docker Bell slash home slash Edureka
55:53
downloads devops - tutorial basically the path to my dockerfile and here we go need
56:00
to provide the sudo password. So had I started now and is creating an image for me the docker
56:07
image and it is done it successfully built and this is my image ID, right so I can just
56:12
go ahead and run this as well. So all I have to type here is Docker Run - it and my image
56:19
ID and here we go. So it is listening at Port 8000. Let me just stop it for now. So I've
56:26
told you how you can create an image using Docker file right now. What I'm going to do, I'm going to use Jenkins in order to clone a git repository then build an image and then
56:36
perform testing and finally pushing it onto Docker Hub my own tokra profile. All right,
56:42
but before that what we need to do is we need to tell Jenkins what our stages are and what to do in each one of them for this purpose. We will write Jenkins pipeline specification
56:51
in on Jenkins file. So let me show you how the Jenkins file looks like just click on
56:56
it. So this is what I have written in my Jenkins file, right? That's pretty self-explanatory
57:02
first. I've defined my application. I mean just clone the repository that I have then build that image. This is the target I'm using a draca one, which is username. And Erica
57:10
is the repository name rights built that image then test it. So we are just going to print test passed and then finally push it onto Docker Hub, right? So this is the URL of Docker
57:20
Hub and my credentials are actually saved in Jenkins in Docker Hub credentials. So,
57:25
let me just show you how you can save those credentials. So go to the credentials tab,
57:31
so here you need to click on system and click on global credentials. Now over here, you can go ahead and click on update and you need to provide your username your password and
57:40
your doctor have credential ID that whatever you gonna pass there, right? So, let me just
57:46
type the password again. All right. Now we need to tell Jenkins two things where to find
57:54
our code and what credentials to use to publish the docker image, right? So I've already configured
57:59
my project. Let me just go ahead and show you what I have written there. So the first thing is the name of my project right which I was showing you when you create a new item
58:07
over there. There's an option called where you need to give the name of your project and I've chosen pipeline project. So if I have to show you the pipeline project you
58:15
can go to new item. And this is what I've chosen that the kind of project and then I have clicked on Bill triggers. So basically this will pull my CM the source code management
58:24
repository after every minute Whenever there is a change in the source code will pull that and it will repeat the entire process after every minute then Advanced project options
58:34
are selected the pipeline script from SCM here either you can write pipeline script directly or you can click on Pipeline script from source code management that kind of source
58:42
code management is get then I've provided the link to my repository and that's all I have done now when I scroll down there's nothing else I can just click on apply and Save So
58:52
I've already build this project one. So let me just go ahead and do it again. All right side. I started first. It will clone the repository that I have. You can find all the logs. Once
59:01
you click on this blue color ball and you can find the logs here as well. So once you click here, you'll find it over here as well. And similarly the logs are present here also,
59:12
so now I we have successfully build our image. We have tested it now. We are pushing it onto Docker hub. So we are successfully pushed our image onto Docker Hub as well. Now if
59:24
I go back to my profile and I go to my repository here. So you can find the image is already
59:33
present here have actually pushed it multiple times. So this is how you will execute the Practical. It was very easy guys. So let me just give you a quick recap of all the things
59:42
we have done first. I told you how you can write a Docker file in order to create a Docker image of a particular application. So we were basing our image on the official node image
59:51
of present of the docker Hub, right which already contains all the dependencies and it makes a Docker file looks very small after that. I build an image using the dockerfile
59:59
then I explain to you how you can use Jenkins in order to automate the task of cloning a repository then building a Docker image testing the docker image and then finally uploading
1:00:08
the add-on to the docker Hub. We did that automatically with the help of Jenkins a told you where you need to provide the credentials what our tags how you can write Jenkins file
1:00:16
the next part of the use cases different teams beat staging and production can actually pull the image that we have uploaded onto Docker Hub and can run as many containers as you
1:00:24
want. Hey everyone, this is Reyshma from Edureka and today's tutorial. We're going to learn
1:00:35
about git and GitHub. So without any further Ado, let us begin this tutorial by looking
1:00:42
at the topics that we'll be learning today. So at first we will see what is Version Control
1:00:48
and why do we actually need Version Control after that? We'll take a look at the different
1:00:54
version control tools and then we'll see all about GitHub and get lots of taking account
1:01:00
a case study of the Dominion Enterprises about how they're using GitHub after that. We'll
1:01:06
take a look at the features of git and finally we're going to use all the git commands to
1:01:11
perform all the get operations. So this is exactly what we'll be learning today. So we're
1:01:17
good to go. So let us begin with the first topic. What is Version Control? Well, you
1:01:24
can think of Version Control as the management. System that manages the changes that you make
1:01:30
in your project till the end the changes that you make might be some kind of adding some
1:01:36
new files or you're modifying the older files by changing the source code or something.
1:01:41
So what the version control system does is that every time you make a change in your project? It creates a snapshot of your entire project and saves it and these snapshots are
1:01:52
actually known as different versions. Now if you're having trouble with the word snapshot
1:01:58
just consider that snapshot is actually the entire state of your project at a particular
1:02:03
time. It means that it will contain what kind of files your project is storing at that time and what kind of changes you have made. So this is what a particular version contains
1:02:13
now, if you see the example here, let's say that I have been developing my own website.
1:02:19
So let's say that in the beginning. I just had only one web page which is called the index dot HTML and Few days. I have added another webpage to it, which is called about
1:02:31
dot HTML and I have made some modifications in the about our HTML by adding some kind
1:02:36
of pictures and some kind of text. So, let's see what actually the Version Control System
1:02:41
stores. So you'll see that it has detected that something has been modified and something
1:02:47
has been created. For example, it is storing that about dot HTML is created and some kind
1:02:53
of photo is created or added into it and let's say that after a few days. I have changed
1:02:59
the entire page layout of the about dot HTML page. So again, my version control system
1:03:05
will detect some kind of change and will say that some about duration T. Ml has been modified
1:03:10
and you can consider all of these three snapshots as different versions. So when I only have
1:03:16
my index dot HTML webpage and I do not have anything else. This is my version 1 and after
1:03:22
that when I added another web page, this is going to be a version 2 and after have The
1:03:28
page layout of my web page. This is my version 3. So this is how a Version Control System
1:03:33
stores different versions. So I hope that you've all understood what is a version control system and what are versions so let us move on to the next topic and now we'll see why
1:03:44
do we actually need Version Control? Because you might be thinking that why should I need
1:03:49
a Version Control? I know what the changes that I have made and maybe I'm making this changes just because I'm correcting my project or something, but there are a number of things
1:03:59
because of why we need Version Control n so let us take a look at them one by one. So
1:04:05
the first thing that version control system avails us is collaboration. Now imagine that
1:04:11
there are three developers working on a particular project and everyone is working in isolation
1:04:18
or even if they're working in the same shared folder. So there might be conflicts sometimes
1:04:24
when each one of them are trying to modify the same file. Now, let's say they are working in isolation. Everyone is minding their own business. Now the developer one has made some
1:04:34
changes XYZ in a particular application and in the same application the developer to has
1:04:40
made some kind of other changes ABC and they are continuing doing that same thing. They're
1:04:46
making the same modifications to the same file, but they're doing it differently. So at the end when you try to collaborate or when you try to merge all of their work together,
1:04:55
you'll come up with a lot of conflicts and you might not know who have done what kind
1:05:00
of changes and this will at the end end up in chaos. But with Version Control System,
1:05:06
it provides you with a shared workspace and it continuously tells you who has made what
1:05:12
kind of change are what has been changed. So you'll always get notified if someone has made changed in your project. So with Version Control System a collaboration is available
1:05:22
tween all the developers and you can visualize everyone's work properly and as a result your
1:05:28
project will always evolve as a whole from the start and it will save a lot of time for you because there won't be much conflicts because obviously if the developer a will
1:05:38
see that he has already made some changes he won't go for that right because he can
1:05:43
carry out his other work. You can make some other changes without interfering his work. Okay, so we'll move on to the next reason for what I we need Version Control System.
1:05:56
And this is one of the most important things because of why we need Version Control System.
1:06:01
I'll tell you why now. The next reason is because of storing versions because saving
1:06:06
a version of your project after you have made changes is very essential and without a Version
1:06:13
Control System. It can actually get confusing because there might be some kind of questions
1:06:18
that will arise in your mind when you are trying to save a version the first question might be how much would you save would you just save the entire project or would you
1:06:28
just save the changes that you made now? If you only save the changes it'll be very hard
1:06:34
for you to view the whole project at a time. And if you try to save the entire project
1:06:39
at every time there will be a huge amount of unnecessary and redundant data lying around
1:06:44
because you'll be saving the same thing that has been remaining unchanged again. And again, I will cover up a lot of your space and after that they're not the problem comes that. How
1:06:55
do I actually named this versions now? Even if you are a very organized person and you
1:07:01
might actually come up with a very comprehensive naming scheme, but as soon as your project
1:07:06
starts varying and it comes to variance there is a pretty good chance that you'll actually
1:07:12
lose track of naming them. And finally the most important question. Is that how do you
1:07:19
know what exactly is different between these versions now you ask me that? Okay. What's the difference between version 1 and version 2 what exactly was changed you need to remember
1:07:28
or document them as well. Now when you have a version control system, you don't have to
1:07:34
worry about any of that. You don't have to worry about how much you need to save. How do you name them? Are you have to you don't have to remember that what exactly is different
1:07:43
different between the versions because the Version Control System always acknowledges that there is only one project. So when you're working on your project, there is only one
1:07:53
version on your disk. And everything else all the changes that they've made in the past
1:07:58
are all neatly packed inside the Version Control System. Let us go ahead and see the next reason
1:08:06
now version control system provides me with a backup. Now the diagram that you see here
1:08:11
is actually the layout of a particul distributed Version Control System here. You've got your
1:08:18
central server where all the project files are located and apart from that every one
1:08:25
of the developers has a local copy of all the files that is present in the central server
1:08:31
inside their local machine and this is known as the local copies. So what the developers
1:08:37
do is that every time they start coding at the start of the day, they actually fetch
1:08:42
all the project files from the central server and store it in the local machine and after they are done working the actually transfer all the files back into the central server.
1:08:53
So at every time you'll always Is have a local copy in your local machine at times of Crisis.
1:08:59
Like maybe let's say that your central server gets crashed and you have lost all your project files. You don't have to worry about that because all the developers are maintaining
1:09:09
a local copy the same exact copy of all the files that is related to your project that
1:09:15
is present in the central server. Is there in your local machine and even if let's say
1:09:20
that maybe this developer has not updated his local copy with all the files if he loses
1:09:27
and the central servers gets crashed and the developer has not maintained its local copy
1:09:32
is always going to be someone who has already updated it because obviously there is going to be huge number of collaborators working on the project. So even a particular developer
1:09:41
can communicate with other developers and get fetch all the project files from other
1:09:47
developers local copy as well. So it is very reliable when you have a version control system
1:09:52
because you're always going to have a backup of all. You're fired. So the next thing and
1:09:57
which Version Control helps us is to analyze my project because when you have finished
1:10:03
your project you want to know that how your project has actually evolved so that you can
1:10:09
make an analysis of it and you can know that what could you have done better or what could
1:10:14
have been improved in your project? So you need some kind of data to make an analysis and you want to know that what is exactly changed and when was it change and how much
1:10:24
time did it take and Version Control System actually provides you with all the information
1:10:30
because every time you change something version control system provides you with the proper description of what was changed. And when was it changed you can also see the entire
1:10:41
timeline and you can make your analysis report in a very easy way because you have got all
1:10:46
the data present here. So this is how a version control system helps you to analyze your project
1:10:51
as well. So let us move ahead and let us take a look. Add the Version Control tools because
1:10:57
in order to incorporate version control system in your project, you have to use a Version
1:11:03
Control tool. So let us take a look at what is available. What kind of tools can I use
1:11:09
to incorporate version control system. So here we've got the four most popular version
1:11:15
control system tools and they are get and this is what we'll be learning in today's
1:11:21
tutorial will be learning how to use git and apart from get you have got other options as well. You've got the Apache subversion and this is also popularly known as SBN SVN
1:11:31
and CVS, which is the concurrent version systems. They both are a centralized Version Control
1:11:39
tool. It means that they do not provide all the developers with a local copy. It means
1:11:45
that all the contributors are all the collaborators are actually working directly with the central
1:11:51
repository only they don't maintain local copy and Kind of actually becoming obsolete
1:11:57
because everyone prefers a distributed Version Control System where everyone has an okay copy and Mercurial on the other hand is very similar to get it is also a distributed Version
1:12:07
Control tool but we'll be learning all about get here. That's what I get is highlighted in yellow. So let's move ahead. So this is the interest over time graph and this graph
1:12:18
has been collected from Google Trends and this actually shows you that how many people
1:12:24
have been using what at what time so the blue line here actually represents get the green
1:12:32
is SVN. The yellow is Mercurial and the red is CVS. So you can see that from the start
1:12:38
get has always been the most popular version control tool as compared to as bian Mercurial
1:12:44
and CVS and it has always kind of been a bad day for CVS, but get has always been popular.
1:12:50
So why not use get right? So there's nothing to say much about That a yes and a lot of
1:12:57
my fellow attendees agree with me. We should all use get and we're going to learn how to use get in this tutorial. So let us move ahead and let us all learn about git and GitHub
1:13:07
right now. So the diagram that you see on my left is actually the diagram which represents
1:13:14
that what exactly is GitHub and what exactly is get now I've been talking about a distributed
1:13:21
version control system and the right hand side diagram actually shows you the typical layout of a distributed Version Control System here. We've got a central server or a central
1:13:32
repository now, I'll be using the word repository a lot from now on just so that you don't get
1:13:37
confused. I'll just give you a brief overview. I'll also tell you in detail. What is the
1:13:42
repository and I'll explain you everything later in this tutorial, but for now just consider
1:13:48
repository as a data space where you store all the project files any kind of files that
1:13:54
is related. Your project in there, so don't get confused when I say rip off the tree instead
1:13:59
of server or anything else. So in a Distributive Version Control System, you've got a central
1:14:06
repository and you've got local repositories as well and every of the developers at first
1:14:12
make the changes in their local repository and after that they push those changes or
1:14:18
transfer those changes from into the central repository and also the update their local
1:14:25
repositories with all the new files that are pushed into the central repository by an operation
1:14:30
called pull. So this is how the fetch data from Central repository. And now if you see
1:14:36
the diagram again on the left, you'll know that GitHub is going to be my central repository
1:14:43
and get is the tool that is going to allow me to create my local repositories. Now, let
1:14:48
me exactly tell you what is GitHub. Now people actually get confused between git and GitHub
1:14:54
they I think that it's kind of the same thing maybe because of the name they sound very
1:14:59
alike. But it is actually very different. Well git is a Version Control tool that will
1:15:05
allow you to perform all these kind of operations to fetch data from the central server and
1:15:10
to just push all your local files into the central server. So this is what get will allow
1:15:16
you to do it is just a Version Control Management tool. Whereas in GitHub. It is a code hosting
1:15:24
platform for Version Control collaboration. So GitHub is just a company that allows you
1:15:31
to host your central repository in a remote server. If you want me to explain in easy
1:15:37
words, you can consider GitHub as a social network, which is very much similar to Facebook.
1:15:44
Like only the differences that this is a social network for the developers. We're in Facebook,
1:15:50
you're sharing all your photos and videos or any kind of statuses. What the developers
1:15:56
doing get have is that they share their code for everyone to see their projects either code about how they have worked on. So that is GitHub. There are certain advantages of
1:16:07
a distributed Version Control System. Well, the first thing that I've already discussed was that it provides you with the backup. So if at any time your central server crashes,
1:16:16
everyone will have a backup of all their files and the next reason is that it provides you
1:16:22
with speed because Central servers typically located on a remote server and you have to
1:16:28
always travel over a network to get access to all the files. So if at sometimes you don't have internet and you want to work on your project, so that will be kind of impossible
1:16:37
because you don't have access to all your files, but with a distributed Version Control System, you don't need internet access always you just need internet when you want to push
1:16:47
or pull from the central server apart from that you can work on your own your files are
1:16:52
all inside your local machine so fetching it. In your workspace is not a problem. So
1:16:58
that are all the advantages that you get with a distributed version control system and a
1:17:03
centralized version control system cannot actually provide you that so now let us take a look at a GitHub case study of the Dominion Enterprises. So Dominion Enterprises is a
1:17:15
leading marketing services and Publishing company that works across several Industries
1:17:20
and they have got more than 100 offices worldwide. So they have distributed a technical team
1:17:27
support to develop a range of a website and they include the most popular websites like
1:17:33
for and.com volts.com homes.com. All the Dominion Enterprises websites actually get more than
1:17:42
tens of million unique visitors every month and each of the website that they work on
1:17:49
has a separate development team and all of them has got a unique needs and You were close
1:17:55
of their own and all of them were working independently and each team has their own
1:18:01
goals their own projects and budgets, but they actually wanted to share the resources
1:18:07
and they wanted everyone to see what each of the teams are actually working on. So basically
1:18:13
they want to transparency. Well the needed a platform that was flexible enough to support
1:18:18
a variety of workflows. And that would provide all the Dominion Enterprises development around
1:18:24
the world with a secure place to share code and work together and for that they adopted
1:18:30
GitHub as the platform. And the reason for choosing GitHub is that all the developers
1:18:36
across the Dominion Enterprises, we're already using github.com. So when the time came to
1:18:42
adopt a new version control platform, so obviously GitHub Enterprise definitely seemed like a
1:18:48
very intuitive choice and because everyone all the developers were also familiar with
1:18:53
GitHub. So the learning curve Was also very small and so they could start contributing
1:18:59
code right away into GitHub and with GitHub all the developer teams. All the development
1:19:04
teams were provided access to when they can always share their code on what they're working on. So at the end everyone has got a very secure place to share code and work together.
1:19:16
And as Joe Fuller, the CIO of dominion Enterprises says that GitHub Enterprise has allowed us
1:19:23
to store our company source code in a central corporately control system and Dominion Enterprises
1:19:30
actually manages more than 45 websites, and it was very important for dominion and the
1:19:36
price to choose a platform that made working together possible. And this wasn't just a
1:19:41
matter of sharing Dominion Enterprises open source project on GitHub. They also had to combat the implications of storing private code publicly to make their work more transparent
1:19:51
across the company as well and they were also using Jenkins to facilitate continuous integration
1:19:58
environment and in order to continuously deliver their software. They have adopted GitHub as
1:20:05
a Version Control platform. So GitHub actually facilitated a lot of things for Dominion Enterprises
1:20:12
and for that there were able to incorporate a continuous integration environment with Jenkins and they were actually sharing their code and making software delivery even more
1:20:22
faster. So this is how GitHub helped not only just a minute Enterprises, but I'm sure there's
1:20:27
might be common to a lot of other companies as well. So let us move forward. So now this
1:20:34
is the topic that we were waiting for and now we'll learn what is get so git is a distributed
1:20:42
Version Control tool and it supports distributed non linear workflow. So get is the tool that
1:20:48
actually facilitates all the distributed Version Control System benefits because it will provide
1:20:53
you to create a local Repository. In your local machine and it will help you to access
1:20:58
your remote repository to fetch files from there or push files and do that. So get is
1:21:04
the tool that you required to perform all these operations and I'll be telling you all
1:21:10
about how to perform these operations using get later in this tutorial for now. Just think
1:21:15
of get as a to that you actually need to do all kind of Version Control System task. So
1:21:21
we'll move on and we'll see the different features of git now. So these are the different
1:21:27
features of get is distributed get is compatible get a provides you with the non linear workflow
1:21:34
at avails you branching. It's very lightweight it provides you with speed. It's open source.
1:21:41
It's reliable secure and economical. So let us take a look at all these features one by
1:21:46
one. So the first feature that we're going to look into is its distributed now, I've
1:21:52
been like telling you it's a it's a distributor. Version Control tool that means that the feature
1:21:57
that get provides you is that it gives you the power of having a local repository and
1:22:03
lets you have a local copy of the entire development history, which is located in the central repository
1:22:09
and it will fetch all the files from the central repository to get your local repository always
1:22:15
updated and this time calling it distributed because every was let's say that there might
1:22:21
be a number of collaborators or developers so they might be living in different parts
1:22:28
of the world. Someone might be working from the United States and one might be in India. So the word the project is actually distributed. Everyone has a local copy. So it is distributed
1:22:39
worldwide you can say so this is what distributed actually means. So the next feature is that
1:22:46
it is compatible. Now, let's say that you might not be using get on the first place.
1:22:52
But you have a different version control system already installed like SVN, like Apache subversion
1:22:59
or CVS and you want to switch to get because obviously you're not happy with the centralized
1:23:05
version control system and you want a more distributed version control system. So you want to migrate from SVN to get but you are worried that you might have to transfer all
1:23:15
the files all the huge amount of files that you have in your SVN repository into a git
1:23:20
repository. Well, if you are afraid of doing that, let me tell you you don't have to be anymore because get is compatible with as VM repositories as well. So you just have
1:23:31
to download and install get in your system and and you can directly access the SVN repository
1:23:38
over a network which is the central repository. So the local repository that you'll have is
1:23:43
going to be a good trip. The tree and if you don't want to change your central repository, then you can do that as well. We can use get SVN and you can directly access all the files
1:23:54
all the files in your project that is residing in an SVN repository. So do you don't have
1:23:59
to change that and it is compatible with existing systems and protocols but there are protocols
1:24:05
like SSH and winner in protocol. So obviously get users SSH to connect to the central repository
1:24:11
as well. So it is very compatible with all the existing things so you don't have to so
1:24:16
when you are migrating into get when you are starting to use get you don't have to actually change a lot of things so is as I have everyone understood these two features by so far Okay,
1:24:28
the next feature of get is that it supports nonlinear development of software. Now when
1:24:34
you're working with get get actually records the current state of your project by creating
1:24:41
a tree graph from the index a tree that you know is nonlinear now when you're working
1:24:47
with get get actual records the current state of the project by creating a tree graph from
1:24:52
the index. And as you know that a tree is a non linear data structure and it is usually
1:24:59
actually in the form of a directed acyclic graph which is popularly known as the DH e. So, this is how I actually get facilitates a nonlinear development of software and it
1:25:11
also includes techniques where you can navigate and visualize all of your work that you are currently doing and how does it actually facilitate and when I'm talking about non-linearity,
1:25:22
how does get actually facilitates a nonlinear development is actually by Crunching now branching
1:25:29
actually allows you to make a nonlinear software development. And this is the gift feature
1:25:36
that actually makes get stand apart from nearly every other Version Control Management do
1:25:42
because get is the only one which has a branching model. So get allows and get actually encourages
1:25:50
you to have a multiple local branches and all of the branches are actually independent
1:25:55
of each other the and the creation and merging and deletion of all these branches actually
1:26:01
takes only a few seconds and there is a thing called the master Branch. It means the main
1:26:07
branch which starts from the start of your project to the end of your project and it
1:26:12
will always contain the production quality code. It will always contain the entire project
1:26:18
and after that it is very lightweight now you might be thinking that since we're using
1:26:24
local repositories on our local machine and we're fetching all the files that are in the
1:26:29
central repository. And if you think that way you can know that there are like hon, maybe there are It's of people's pushing their code into the central repository and and updating
1:26:39
my local repository with all those files. So the data might be very huge but actually
1:26:44
get uses lossless compression technique and it compresses the data on the client side.
1:26:51
So even though it might look like that you've got a lot of files when it actually comes to storage or storing the data in your local repository. It is all compressed and it doesn't
1:27:01
take up a lot of space only when you're fetching your data from the local repository into your workspace. It converts it and then you can work on it. And whenever you push it again,
1:27:11
you can press it again and store it in a very minimal space in your disk and after that
1:27:17
it provides you with a lot of speed now, since you have a local repository and you don't
1:27:23
have to always travel over a network to fetch files, so it does not take any time to get
1:27:28
files in your into your workspace from your local repository because and if you see that
1:27:34
it is actually Three times faster than fetching data from a remote repository because he's
1:27:39
obviously have to travel over a network to get that data or the files that you want and
1:27:45
Mozilla has actually performed some kind of performance tests and it is found out that
1:27:52
get is actually one order of magnitude faster than other version control tools, which is
1:27:58
actually equal to 10 times faster than other version control tools. And the reason for
1:28:03
that is because get is actually written in C and C is not like other high-level languages.
1:28:10
It is very close to machine language. So it produces all the runtime overheads and it
1:28:15
makes all the processing very fast. So get is very small and it get is very fast. And
1:28:22
the next feature is that it is open source. Well, you know that get was actually created
1:28:27
by Linus Torvalds and he's the famous man who created the Linux kernel and he actually used get in the development of the Next Colonel now, they were using a Version Control System
1:28:39
called bitkeeper first, but it was not open source day. So the owner of bitkeeper has actually made it a paid version and this actually got Linus Torvalds mad. So what he did is
1:28:51
that he created his own version control system tool and he came up with get and he made it
1:28:57
open source for everyone so that you can so the source code is available and you can modify it on your own and you can get it for free. So there is one more good thing about get
1:29:07
and after that it is very reliable. Like I've been telling you since the star that egg have
1:29:14
a backup of all the files in your local repository. So if your central server crashes, you don't
1:29:19
have to worry your files are all saving your local repository and even if it's not in your local repository, it might be in some other developers local repository and you can tell
1:29:29
him when and whenever you need some that data and you lose the data and after your central server is all If it was crashed, he can directly push all the data into the central repository
1:29:39
and from there everyone and Skinner always have a backup. So the next thing is that get
1:29:44
is actually very secure now git uses the sha-1 do name and identify objects. So whenever
1:29:52
you actually make change it actually creates a commit object and after you have made changes
1:29:58
and you have committed to those changes, it is actually very hard to go back and change
1:30:04
it without other people knowing it because whenever you make a commit the sha-1 actually
1:30:10
converts it what is sha-1. Well it is a kind of cryptographic algorithm. It is a message
1:30:18
digest algorithm that actually converts your commit object into a four digit hexadecimal
1:30:23
code Now message AI uses techniques and algorithms like md4 md5 and it is actually very secure.
1:30:32
It is considered to be very secure because even National Security Agency of the United
1:30:37
States of America uses ssj. I so if they're using it so you might know that it is very
1:30:43
secure as well. And if you want to know what's md5 and message digest I'm not going to take
1:30:48
you through the whole algorithm whole cryptographic algorithm about how they make that Cipher
1:30:54
and all you can Google it and you can learn what is sji, but the main concept of it is
1:31:00
that after you have made changes. You cannot deny that you have not met changes because
1:31:06
it will store it and everyone can see it it will create commit hash for you. So everyone
1:31:13
will see it and this commit hash can is also useful when you want to revert back to previous versions you want to know that which commits exactly caused what problem and if you want
1:31:24
to remove that commit or if you want to remove that version you can do that because sha I will give you the hash log of every government so we move on and see the Feature, which is
1:31:36
economical now get is actually released under the general public license and it means that
1:31:43
it is for free. You don't have to pay any money to download get in your system. You
1:31:48
can have kids without burning a hole in your pocket. And since all the heavy lifting is
1:31:54
done on the kind side because everything you do you do it on your own entire workspace
1:31:59
and you push it into the local repository first, and after that it's pushing the central server. So it means that people are only pushing into the central server after when they're
1:32:10
sure about their work and and they're not experimenting on the central repository. So
1:32:15
your central repository can be very simple enough. You don't have to worry about having a very complex and very powerful hardware and a lot of money can be saved on that as
1:32:25
well. So get us free get a small so good provides you with all the cool features that you would
1:32:32
actually want. So this All the get features. So we'll go ahead to the next topic our next
1:32:40
the first we'll see what is a repository now as GitHub says that it is a directory or storage
1:32:48
space where all your projects get live. It can be local to a folder on your computer
1:32:53
like your local repository or it can be a storage space and GitHub or another online
1:32:59
host. It means your central repository and you can keep your gold files text files image
1:33:04
files. You name it? You can keep it inside a repository everything that is related to
1:33:09
your project and like I have been chanting since the start of this tutorial that we have
1:33:15
got two kinds of repositories. We've got the central repository and we've got the local repository and now let us take a look at what this repositories actually are. It's on my
1:33:26
left hand side. You can see all about the central repository and in the right hand side. This is all about my local repository and the diagram in the middle actually shows you
1:33:35
the entire layout so the local repository will be inside my local machine and my central
1:33:42
repository for now is going to be on GitHub. So my central repository is typically located
1:33:48
on a remote server and like I just told you it is typically located on GitHub and my local
1:33:54
repository is going to be my local machine at we reside in as in a DOT git folder and
1:34:00
it will be inside your Project's root. The dot git folder is going to be inside your Project's root and it will contain all the templates and all the objects and every other
1:34:09
configuration files when you create your local repository and since you're pushing all the
1:34:15
code, your central repository will also have the same dot git repository folder inside
1:34:20
it and the sole purpose of having a central repository is so that you're all the Actors
1:34:26
are all the developers can actually share and exchange the data because someone might
1:34:31
be working on a different problem and someone might be needing help in that so what you can do is that he can push all the code all the problems that he has sauce or something
1:34:40
that he has worked on it to the central repository and everyone else can see it and everyone else can pull his code and use it for themselves as well. So this is just meant for sharing
1:34:51
data. Whereas in local repository. It is only you can access it and it is only meant for
1:34:58
your own so you can work in your local repository. You can work in isolation and no one will
1:35:04
interfere even after you have done after years sure that your code is working and you want
1:35:10
to show it to everyone just transfer it or push it into the central Repository. Okay,
1:35:15
so now we'll be seeing the get operations and come on. So this is how we'll be using
1:35:21
it. There are various operations and commands that will help us to do all the things that
1:35:28
we were just talking about right now. We're talking about pushing changes. So these are
1:35:33
all get operations. So we'll be performing all these operations will be creating repositories
1:35:39
with this command will be making changes in the files that are in a repositories with
1:35:44
the commands will be also doing parallel nonlinear development that I was just talking about
1:35:49
and we also be sinking a repositories so that our Central repository and local repository
1:35:55
are connected. So I'll show you how to do that one by one. So the first thing that we
1:36:01
need to do is create repositories, so we need a central repository and we need a local repository
1:36:08
now will host our Central repository on GitHub. So for that you need an account in GitHub.
1:36:14
And create a repository there and for your local repository you have to install get in
1:36:20
your system. And if you are working on a completely new project and if you want to start something
1:36:26
fresh and very new you can just use git init to create your repository or if you want to
1:36:33
join an ongoing project, and if you're new to the project and you just join so what you
1:36:38
can do is that you can clone the central repository using this command get blown. So let us do
1:36:44
that. So let's first create a GitHub account and create repositories on GitHub. I said
1:37:01
first you need to go to github.com. And if you don't have an account, you can sign up for GitHub and here you just have to pick a username that has not been already taken
1:37:11
you have just provide your email address get a password and then just click this green
1:37:17
button here and your account will be created. It's very easy don't have to do much and after
1:37:23
that you just have to verify your email and everything and after you're done with all sort of thing. You can just go a sign in our already have an account. So I'm just going
1:37:33
to sign in here. Softer you're signed in you'll find this page here. So you'll get two buttons
1:37:40
where you can read the guide of how to use GitHub or you can just start a project right away. Now, I'll be telling you all about GitHub so you don't have to click this button right
1:37:49
now. So you can just go ahead and start a project. So now get tells that for every project
1:37:59
you need to have you need to maintain a unique repository it is because it's very healthy
1:38:04
and keeps things very clean because if you are storing just the files related to one
1:38:11
project in a repository, you won't get confused later. So when you're creating a new repository,
1:38:16
you have to provide with a repository name now, I'm just going to name it get - GitHub.
1:38:28
And you can provide it with the description of this repository. And this is optional. If you don't want to you can leave it blank and you can choose whether you want it public
1:38:38
or private. Now if you want to it to be private, you have to pay some kind of amount. So like
1:38:44
this will cost you $7 a month. And so what what is the benefit of having a private account?
1:38:50
Is that only you can say it if you don't want to share your code with anyone and you don't want anyone to see it. You can do that in GitHub as well. But for now, I'll just leave
1:38:59
it public. I just want it for free and let everyone see my work what you have done. So
1:39:05
we'll just leave it up lik for now and after that you can initialize this repository with
1:39:10
the read me. So the readme file will contain the description of your files. This is the
1:39:15
first file that is going to be inside a repository when you create the repository, so and it's
1:39:22
a good habit to actually initialize your repository of the readme, so I'll just click this option.
1:39:28
This is the option to add git ignore. Now. There might be some kind of files that you
1:39:34
don't want when you're making operations, like push or pull you don't want those files to get pushed or pulled like it might be some kind of log files or anything so you can add
1:39:44
those files and get ignore here. So right now I don't have gone any files that this
1:39:50
is just the starting of our project. So I will just ignore this get ignore for now.
1:39:57
And then you can actually add some license as well. So you can just go through what this license actually are. But if you want to just leave it as none. And after that just click
1:40:10
on this green button here, so just create a repository. And so there it is so you can
1:40:17
see this is the initial comment you have initialized your repository with the readme and this is
1:40:23
your readme file. Now if you want to make changes and do the read me file, just click
1:40:29
on it and click on the edit pencil image or icon kind of that is in here and you can make
1:40:37
changes on the readme files if you want to write something. Let's say just write it as
1:40:43
scription. So this is our tutorial purpose and that's it. Just keeping it simple. And
1:40:56
after that you've made changes. The next thing that you have to do is you have to commit
1:41:02
a changes so you can just go down and click on this commit changes green button here. And it's done. So you have updated read me dot MD and this is your commit hash so you
1:41:15
can see that in here. So if you go back to your repository, you can say that something has been updated and will show you when was your last commit little even show you the
1:41:24
time? So and for now you're on the branch master your and this will actually show you
1:41:31
all the logs. So since only I'm contributing here. So this is only one contributor and I've just made two commits. The first one was when I initialized it and right now when
1:41:40
I modified it and right now I have not created any branches. So there is only one branch.
1:41:45
So now my central repository has been created. So the next thing that I need to do is create
1:41:50
a local repository in my local machine. Now I have already installed get in my system.
1:41:57
I have using a Windows system. So I have installed get for Windows. So if you want some help
1:42:03
with the installation, I have already written a Blog on that. I'll leave the link of the blog in the description below. You can refer to that blog and install get in your system.
1:42:12
Now, I've already done that. So let's say that I want my project to be in the C drive.
1:42:19
So let's say I'm just waiting in folder here from my project. So just name it. Ed Eureka
1:42:29
project and let's say that this is where I want my local repository to been. So the first
1:42:37
thing that I'll do is right click and I'll click this option here git bash here. And
1:42:44
this will actually open up a very colorful terminal for you to use and this is called
1:42:50
the git bash emulator. So this is where you'll be typing all your commands and you'll be doing all your work in the get back here. So in order to create your local repository,
1:43:01
the first thing that you'll do is type in this command get in it and press enter. So
1:43:07
now you can see that it is initialized empty git repository on this path. So, let's see
1:43:14
and you can see that a DOT get of a folder has been created here and if you see here
1:43:20
and see you can see that it contains all the configurations and the object details and
1:43:25
everything. So your repository is initializing. This is going to be your local repository.
1:43:31
So after we have created a repositories, it is very important to link them because how
1:43:37
would you know which repository to push into and how will you just pull all the changes
1:43:42
or all the files from a remote repository? If you don't know if they're not connected properly. So in order to connect them with the first thing that we need to do is that
1:43:52
we need to add a region and we're going to call our remote repository as origin and we'll
1:43:58
be using the command git remote add origin to add so that we can pull files from our
1:44:04
GitHub or Central repository. And in order to fetch files. We can use git pull and if
1:44:10
you want to transfer all your files or push files into GitHub will be using git push.
1:44:15
So let me just show you how to do that. So we are back in the local repository. And as
1:44:20
you can see now that I have not got any kind of files. And if you go to my central repository,
1:44:26
you can see that I've got a readme file. So the first thing that I need to do is to add
1:44:32
this remote repository as my origin. So for that I'll clear my screen first. So for that
1:44:39
you need to use this command. Git remote add origin. And the link of yours and the repository
1:44:50
and let me just show you where you can find this link. So when you go back into your repository,
1:44:56
you'll find this green button here, which is the Clone or download just click here.
1:45:02
And this is the HTTP URL that you want. So just copy it on your clipboard. Go back to
1:45:10
your git bash and paste it and enter so your original has been added successfully because
1:45:18
it's not showing any kind of Errors. So now what will do is that will perform a git pull. It means will fetch all the files from the central repository into my local Repository.
1:45:29
So just type in the command get full. origin master And you can see that they have done
1:45:40
some kind of fetching from the master Branch into the master branch and let us see that
1:45:47
whether all the files have been fished or not. Let us go back to our local repository and there is the readme file that was in my central repository and now it is in my local
1:45:58
repository. So this is how you actually update your local repository from the central repository
1:46:05
you perform a git pull and it will fetch all the files from this entire repository in your
1:46:11
local machine. So let us move forward and move ahead to the next operation. Now, I've told you in order to sync repositories, you also need to use a git push, but since we
1:46:21
have not done anything in our local repository now, so I'll perform the good get push later on after a show you all the operations and we'll be doing a lot of things. So at the
1:46:32
end I'll be performing the git push and push all the changes into my central Repository.
1:46:37
And actually that is how you should do that the it's a good habit and it's a good practice
1:46:44
if you're working with GitHub and get is that when you start working. The first thing that you need to do is make a get bull to fetch all the files from your central repository
1:46:53
so that you could get updated with all the changes that has been recently made by everyone
1:46:59
else and after you're done working after you're sure that your code is running then only make
1:47:05
the get Bush so that everyone can see it you should not make very frequent changes into
1:47:10
the central repository because that might interrupt the work of your other collaborators
1:47:15
or other contributors as well. So let us move ahead and see how we can make changes. So
1:47:22
now get actually has a concept it has an intermediate layer that resides between your workspace
1:47:30
and your local repository. Now when you want to commit changes or make changes in your
1:47:35
local repository, you have to add those files in the index first. So this is the layer that
1:47:42
is between your workspace and local repository. Now, if your files are not in the index, you
1:47:47
cannot make commit organ app cannot make changes into your local repository. So for that you
1:47:53
have to use the command git add and you might get confused that which all files are in the
1:47:58
index and which all are not. So if you want to see that you can use the command git status and after you have added the changes in the index you can use the command git commit to
1:48:10
make the changes in the local repository. Now, let me tell you what is exactly a git
1:48:15
commit everyone will be talking about get coming. Committing changes when you're making
1:48:21
changes. So let us just know what is a git commit. So let's say that you have not made
1:48:27
any kind of changes or this is your initial project. So what a comet is is that it is
1:48:33
kind of object which is actually a version of your project. So let's say that you have
1:48:40
made some changes and you have committed those changes what your version control system will do is that it will create another commit object and this is going to be your different version
1:48:50
with the changes. So your commit snapshots actually going to contain snapshots of the
1:48:58
project which is actually changed. So this is what come it is. So I'll just show you
1:49:03
I'll just go ahead and show you how to commit changes in your local repository. So we're
1:49:09
back into our local repository. And so let's just create some files here. So now if you're
1:49:15
developing a project you might be just only contributing your source code files into the central repository. So now I'm not just going to tell you all about coding. So we're just
1:49:24
going to create some text files write something in that which is actually pretty much the same if you're working on a gold and you're storing your source code in your repositories.
1:49:33
So I just go ahead and create a simple text file. Just name it Eddie one. Just write something
1:49:43
so I'll just try first file. Save this file close it. So now remember that even if I have
1:49:55
created inside this repository, this is actually showing my work space and it is not in my
1:50:02
local repository now because I have not committed it. So what I'm going to do is that I'm going
1:50:09
to see what all files are in my index. But before that I'll clear my screen because I
1:50:15
don't like junk on my screen. Okay. So the first thing that we're going to see is that
1:50:21
what all files are added in my index and for that I just told you we're going to use the command git status. So you can see that it is calling anyone dot txt which we just have
1:50:34
written. It is calling it an untracked file now untracked files are those which are not
1:50:40
added in the index yet. So this is newly created. I have not added it explicitly into the index.
1:50:46
So if I want to commit changes in Eddie one dot txt, I will have to add it in the index.
1:50:53
So for that I'll just use the command git add and the name of your file which is a D1
1:51:00
Dot txt. And it has been added. So now let us check the status again. So for that will
1:51:12
choose get status. And you can see that changes ready to be committed is the Eddie Wonder
1:51:21
txt? Because it's in the index and now you can commit changes on your local repository.
1:51:26
So in order to commit the command that you should be using is git commit. - em because
1:51:37
whenever you are committing you always have to give a commit message so that everyone can see who made all this comments and what exactly is just so this commit message is
1:51:48
just for your purpose that you can see what exactly was changed. But even if you don't
1:51:53
dry it it the version control system is also going to do that. And if you have configured your get it is always going to show that who's the user who has committed this change. So
1:52:04
I was just talking about writing a commit message. So I'm just going to write something like adding first commit and press enter so you can see one file change something has
1:52:25
been inserted. So this is the changes are finally committed in my local repository.
1:52:33
And if you want to see how actually get stores all this commit with actually I'll show you
1:52:38
after I show you how to commit multiple files together. So let's just go back into our local
1:52:46
Rebel folder and we'll just create some more files more text files. I'm just going to name
1:52:51
it. I do do with create another one. Just name it I do three. Let's just write something
1:53:03
over here. We just say second file. Sorry. so let's go back to our get bash terminal
1:53:26
and Now let us see the get status. So now you can see that it is showing that I do too
1:53:37
and I do three are not in my index and if you remember anyone was already in the index,
1:53:43
actually, let me just go back and make some modifications in Eddie one as well. So I'm
1:53:51
going to ride. modified one So, let's see get status again. And you can see that it
1:54:02
is showing that anyone is modified and there are untracked files and you do and edit three.
1:54:13
Because I haven't added them in my index yet. So now Sebastian and Jamie you have been asking
1:54:18
me how to like a doll multiple files together. So now I'm going to add all these files at
1:54:23
once so for that I'm just going to use get at - capital a Just press enter and now see
1:54:32
the get status. And you see that all the files have been added to the index and ones. And
1:54:42
it's similarly with commit as well. So now that you have added all the files in the index.
1:54:47
I can also commit them all at once and how to do that. Let me just show you you just have to write git commit and - small a so if you want to commit all you have to use
1:55:00
- small are in case of git commit whereas in case of get add if you want to add all
1:55:06
the files you have to use - capital A. So just remember that difference and add message.
1:55:14
hiding so you can see three files has been changed and now let me show you how this actually
1:55:27
gets stores all this comets. So you can perform an operation called the git log. And you can
1:55:38
see so This Is 40 digit hexadecimal code that I was taking a talking about and this is the
1:55:43
sha-1 hash and you can see the date and you have got the commit message that we have just
1:55:51
provided where I just wrote adding three files together. It shows it it shows the date and
1:55:57
the exact time and the author and this is me because I've already configured it with
1:56:02
my name. So this is how you can see come in and this is actually how Version Control System
1:56:08
like get actually stores all your commit. So let us go back and see the next operation
1:56:16
which is how to do parallel development or non-linear development. And the first operation
1:56:23
is branching now, we've been talking about branching a lot and let me just tell you what
1:56:29
exactly is branching and what exactly you can do with branching. Well, you can think
1:56:35
of branches like a pointer to a To become it. Let's say that you've made changes in
1:56:41
your main branch. Now remember that your main branch that I told you about. It's called
1:56:46
The Master branch and the master Branch will contain all the code. So let's say that you're
1:56:52
working on the master branch and you've just made a change and you've decided to add some new feature on to it. So you want to work on the new feature individually or you don't
1:57:01
want to interfere with the master Branch. So if you want to separate that you can actually create a branch from this commit and let me show you how to actually create branches.
1:57:12
Now Alice tell you that there are two kinds of branches their local branches and remote tracking branches. Your remote branches are the branches that is going to connect your
1:57:21
branches from your local repository to your central repository and local branches are
1:57:27
something that you only create in your workspace. That is only going to work with your with
1:57:32
the files in your local repository. So I'll show you how to create branches and then everything
1:57:37
will Clear to you. So let us go back to our git Bash. Clear the screen. And right now
1:57:48
we are in the master branch and this indicates which brands you were onto right now. So we're
1:57:54
in the master Branch right now and we're going to create a different branch. So for that
1:57:59
you just have to type the command git branch and write a branch name. So let us just call
1:58:05
it first branch. and enter so now you have created a branch and and this first Branch
1:58:15
will now contain all the files that were in the master because it originated from the
1:58:21
master Branch. So now the shows that you are still in the master branch and if you want
1:58:26
to switch to the new branch that you just created you have to use this command git checkout,
1:58:32
but it's called checking out it going to move from one branch to another it's called checking
1:58:37
out and get so we're going to use git checkout and the name of the branch. Switch to first
1:58:45
brush and now you can see that we are in the first branch and now we can start doing all the work in our first Branch. So let us create some more files in the first Branch. So let's
1:58:55
go back and this will actually show me my workspace off my first Branch right now. So
1:59:02
we'll just create another text document and we're going to name it edu for and you can
1:59:12
just write something first. garage to save it just will go back and now we've made some
1:59:25
changes. So let us just commit this changes all at once. So let me just use git add. After
1:59:38
that, what do you have to do if you remember is that you have to perform a git commit?
1:59:44
And I guess one pile changed. So now remember that I have only made this edu for change
2:00:05
in my first branch and this is not in my master Branch it because now we are in the first
2:00:13
Branch if it lists out all the files in the first Branch, you can see that you've got
2:00:18
the Eddie one. I did 283 and the readme which was in the master Branch because it will be
2:00:24
there because it originated from the master branch and apart from that. It has a new file called edu for DOT txt. And now if you just move back into the master Branch, let's say
2:00:33
We're going back into the Master Garage. And if you just see the five Master Branch, you'll
2:00:44
find that there is no edu for because I've only made the changes in my first Branch.
2:00:49
So what we have done now is that we have created branches and we have also understood the purpose of creating branches because you're moving on to the next topic. The next thing we'll
2:01:00
see is merging so now if you're creating branches and you are developing a new feature and you
2:01:06
want to add that new feature, so you have to do an operation called emerging emerging
2:01:12
means combining the work of different branches all together and it's very important that after you have branched off from a master Branch always combine it back in at the end
2:01:22
after you're done working with the branch always remember to merge it back in so now
2:01:27
we have created branches. Let us see and we have made changes in our Branch like we have
2:01:32
added edu for and if you want to combine that back in our Master Branch because like I told you your master Branch will always contain your production quality. Code so let us know
2:01:42
actually merge start merging those files because I've already created branches. It's time that
2:01:48
we merge them. So we are back in my terminal. And what do we need to do is merge those changes
2:01:56
and if you remember that we've got a different file in my first branch, which is the ending for and it's not there in the master Branch yet. So what I want to do is merge that Branch
2:02:06
into my master Branch so for that I'll use a command called git merge and the name of
2:02:13
my branch and there is a very important thing to remember when you're merging is that you
2:02:19
want to merge the work of your first Branch into master. So you want Master to be the
2:02:25
destination. So whenever you're merging you have to remember that you were always checked
2:02:30
out in the destination Branch some already checked out in the master Branch, so I don't
2:02:35
have to change it back. So I'll just use the command git merge and the name of the branch
2:02:40
which word you want to merge it into and you have to provide the name of the branch whose work you want merged into the current branch that you were checked out. So for now, I've
2:02:49
just got one branch, which is called the first branch. and and so you can see that one file
2:02:57
chain. Something has been added. We are in the master bounce right now. So now let us list out all the files in the master branch and there you see now you have edu for DOT
2:03:07
txt, which was not there before. I'm merged it. So this is what merging does now you have
2:03:15
to remember that your first branch is still separate. Now, if you want to go back into
2:03:21
your first branch and modify some changes again in the first branch and keep it there you can do that. It will not actually affect the master Branch until you merge it. So let
2:03:31
me just show you an example. So just go back to my first branch. So now let us make changes
2:03:44
and add you for. I'll just ride modified in first branch. We'll go back and we'll just
2:04:01
commit all these changes and I'll just use git. So now remember that the git commit all
2:04:23
is also performed for another purpose now. It doesn't only actually commit all the uncommitted
2:04:29
file at once if your files are in the index and you have just modified it also does the
2:04:34
job of adding it to the index Again by modifying it and then committing it but it won't work.
2:04:41
If you have never added that file in the index now Eddie for was already in the index now
2:04:46
after modifying it I have not explicitly added in the index. And if I'm using git commit
2:04:52
all it will explicitly add it in the index bit will because it was already a track file
2:04:58
and then it will commit the changes also in my local Repository. So you see I didn't use
2:05:04
the command git add. I just did it with Git commit because it was already attract file.
2:05:10
So one file has been changed. So now if you just just cat it and you can see that it's
2:05:22
different. It shows the modification that we have done, which is modified it first Branch now, let's just go back to my master branch. Now remember that I have not emerged it yet
2:05:38
and my master Branch also contains a copy of edu for and let's see what this copy actually
2:05:44
contains. See you see that the modification has not affected in the master Branch because
2:05:58
I have only done the modification in the first Branch. So the copy that is in the master
2:06:04
branch has not it's not the modified copy because I have not emerged it yet. So it's
2:06:09
very important to remember that if you actually want all the changes that you have made in the first Branch all the things that you have developed in the Anu branch that you have
2:06:17
created make sure that you merge it in don't forget to merge or else it will not show any
2:06:24
kind of modifications. So I hope that if understood why emerging is important how to actually
2:06:32
merge different branches together. So we'll just move on to the next topic and which is
2:06:39
rebasing now when you say rebasing rebasing is also another kind of merging. So the first
2:06:48
thing that you need to understand about vbase is that it actually solves the same problem
2:06:54
as of git merge and both of these commands are designed to integrate changes from one
2:07:00
branch into another. It's just that they just do the same task in a different way. Now what
2:07:07
rebasing means if you see the workflow diagram here is that you've got your master branch and you've got a new Branch now when you're rebasing it what it does if you see in this
2:07:17
workflow diagram here is that if God a new branch and your master branch and when your
2:07:22
rebasing it instead of creating a Comet which will have two parent commits. What rebasing
2:07:28
does is that it actually places the entire commit history of your branch onto the tip
2:07:34
of the master. Now you would ask me. Why should we do that? Like what is the use of that?
2:07:40
Well, the major benefit of using a re basis that you get a much cleaner project history.
2:07:47
So I hope you've understood the concept of rebase. So let me just show you how to actually
2:07:54
do rebasing. Okay. So what we're going to do is that we're going to do some more work
2:08:00
in our branch and after that will be base our branch on to muster. So we'll just go
2:08:06
back to our branch. You skip check out. first branch and now we're going to create some
2:08:21
more files here. same it at your five and let's say I do six. So we're going to write
2:08:37
some random stuff. I'd say we're saying welcome to Ed, Eureka. one all right the same thing
2:08:50
again that Sarah come two so we have created this and now we're going back to our get bash
2:09:03
and we're going to add all these new files because now we need to add because it we cannot
2:09:09
do it with just get commit all because these are untracked files. This is the files that I've just created right now. So I'm using And now we're going to commit. And it has
2:09:40
been committed. So now if you just see all the files, you can see any one two, three,
2:09:48
four five six and read me and if you go back to the master. And if you just list out all
2:10:05
the files and master it only has up to four the five and six are still in my first brush
2:10:11
and I have not emerged it yet. And I'm not going to use git merge right now. I'm going
2:10:16
to use rebase this time instead of using git merge and this you'll see that this will actually
2:10:22
do the same thing. So for that you just have to use the command. So let us go back to our
2:10:29
first branch. Okay did a typing error? Irst BR a MCH. Okay switch the first branch and
2:10:57
now we're going to use the command git rebase master. Now it is showing that my current
2:11:07
Branch first branch is up to date just because because whatever is in the master branch is
2:11:12
already there in my first branch and they were no new files to be added. So that is
2:11:19
the thing. So, but if you want to do it in the reverse way, I'll show you what will happen.
2:11:25
So let's just go and check out let's do rebasing kit rebase first branch. So now what happened
2:11:43
is that all the work of first branch has been attached to the master branch and it has been
2:11:50
done linearly. There was no new set of comments. So now if you see all the files are the master
2:11:55
Branch, you'll find that you've got a new five and Ed U6 as well, which was in the first
2:12:02
Branch. So basically rebasing has merged all the work of my first Branch into the master,
2:12:08
but the only thing that happened is that it happened in a linear way all the commits that we did in first Branch actually got rid dashed to the head in the master. So this was all
2:12:18
about nonlinear development. I have told you about branching merging rebasing we've made
2:12:24
changes with pull changes committed changes, but I remember that I haven't shown you how
2:12:30
to push changes. So since we're done working in our local repository now, we have made
2:12:36
are all final changes and now we want it to contribute in our Central Repository. Tree.
2:12:41
So for that we're going to use git push and I'm going to show you how to do a get Bush right now. Before I go ahead to explain you a get Bush. You have to know that when you
2:12:57
are actually setting up your repository. If you remember your GitHub repository as a public repository, it means that you're giving a read access to everyone else in the GitHub
2:13:06
community. So everyone else can clone or download your repository files. So when you're pushing
2:13:12
changes in a repository, you have to know that you need to have certain access rights because it is the central repository. This is where you're storing your actual code.
2:13:21
So you don't want other people to interfere in it by pushing wrong codes or something.
2:13:27
So we're going to connect a mice and repository via ssh in order to push changes into my central
2:13:33
repository now at the beginning when I was trying to make this connection with SSS rows
2:13:40
facing some certain kind of problems. Let me go back to the repository of me show you
2:13:45
when you click this button. You see that this is your HTTP URL in order that we use in order
2:13:52
to connect with yours and repository now if you want to use SSH, so this is your SSH connection
2:13:58
URL. So so in order to connect with ssh, what do you need to do is that you have to generate
2:14:04
a public SSH key and then just add that key simply into your GitHub account. And after
2:14:10
that you can start pushing changes. So first we'll do that will generate SSH public key.
2:14:18
So for that, we'll use this command SSH - heejun. So under file, there is already an SSH key,
2:14:29
so they want to override it. Yes. So my SSH key has been generated and it has been saved
2:14:38
in here. So if I want to see it and just use cat and copy it. So this is my public SSH
2:14:54
key if I want to add this SSH key, I'll go back into my GitHub account. And here I will
2:15:02
go back and settings and we'll go and click on this option SSH and gpg keys and I've already
2:15:09
had two SSH Keys added and I want to add my new one. So I'm going to click this button
2:15:16
new SSH key and just make sure that you provide a name to it. I'm just going to keep it in
2:15:23
order because I've named the other ones sssh won an SSS to just say I'm going to say it's
2:15:30
sh3. So just paste your search key in here. Just copy this key. Paste it and click on
2:15:49
this button, which is ADD SSH key. Okay, so now well the first thing you need to do is
2:15:59
clear the screen. And now what you need to do is you need to use this command as the search - d And your SSI at URL that we use which is get at the rate github.com. And enter
2:16:15
so my SSH authentication has been successfully done. So I'll go back to my GitHub account.
2:16:22
And if I refresh this you can see that the key is green. It means that it has been properly
2:16:28
authenticated and now I'm ready to push changes on to the central repository. So we'll just
2:16:35
start doing it. So let me just tell you one more thing that if you are developing something
2:16:44
in your local repository and you have done it in a particular branch in your repository
2:16:49
and let's say that you don't want to push this changes into the master branch of your
2:16:55
central report or your GitHub repository. So let's say that whatever work that you have
2:17:02
done. It will stay in a separate branch in your GitHub repository so that it does not
2:17:07
interfere with the master branch and everyone can identify that it is actually your branch and you have created it and this Branch only contains your work. So for that let me just
2:17:20
go to the GitHub repository and show you something. Let's go to the repositories. And this is
2:17:28
the repository that I have just created today. So when you go in the repository, you can
2:17:34
see that I have only got one branch here, which is the master branch. And if I want
2:17:39
to create branches I can create it here, but I would advise you to create all branches from your command line or from you get bash only in your central repository as well. So
2:17:49
let us go back in our branch. So now what I want is that I want all the work of the
2:18:10
first branch in my local repository to make a new branch in the central repository and
2:18:16
that branch in my central repository will contain all the files that is in the first branch of my local repository through so for that I'll just perform. get Push the name
2:18:30
of my remote which is origin and first branch. And you can see that it has pushed all the
2:18:42
changes. So let us verify. Let us go back to our repository and let's refresh it. So
2:18:52
this is the master branch and you can see that it has created another branch, which is called the first Branch because I have pushed all the files from my first Branch
2:19:04
into an and I have created a new Branch or first Branch as similar to my first branch
2:19:10
in my local repository here in GitHub. So now if we go to Branch you can see that there
2:19:16
is not only a single Master we have also got another branch, which is called the first Branch now if you want to check out this brand just click on it. And you can see it has all
2:19:26
the files with all the combat logs here in this Branch. So this is how you push changes
2:19:33
and if you want to push all the change in to master you can do the same thing. Let us
2:19:43
go back to our Branch master. And we're going to perform a git push here. But only what
2:19:55
we're going to do this time is we're going to push all the files into the master branch and my central repository. So for that I'll just use this get bush. Okay, so the push
2:20:11
operation is done. And if you go back here and if you go back to master, you can see
2:20:17
that all the files that were in the master branch in. My local repo has been added into the master branch of my central Ripple also. So this is how you make changes and from your
2:20:28
central repository to look repository. So this is exactly what you do with get so if
2:20:35
I have to summarize what I just showed you entirely in this when I'm when I was telling
2:20:41
about get ad and committing and pushing and pulling so this is exactly what is happening. So this is your local repository. This is your working directory. So the staging area
2:20:51
is our index the intermediate layer between your workspace and your local repository. So you have to add your files into the staging area or the index with Git add and a commit
2:21:02
those changes with Git commit and your local repository and if you want to push all this
2:21:07
Listen to the remote repository or the central repository where everyone can see it you use a get Bush and similarly. If you want to pull all those files of fetch all those files from
2:21:18
your GitHub repository, you can use git pull and you want to use branches. If you want
2:21:24
to move from one branch to another you can use git checkout. And if you want to combine
2:21:29
the work of different branches together, you can use git merge. So this is entirely what you do when you're performing all these kind of operations. So I hope it is clear to everyone
2:21:38
so I'll just show you how can you check out what has been changed and modifications so
2:21:47
So just clear the screen and okay. So let us go back to our terminal and just for experimentation
2:21:54
proper just to show you that how we can actually get revert back to our previous changes. So
2:22:00
now you might not want to change everything that you made an Eddie wanted to do a duet for or some other files that we just created. So let's just go and create a new file modify
2:22:10
it two times and revert back to the previous version just for demonstration purpose. So
2:22:15
I'm just going to create a new text file. Let's call it revert. And now let us just
2:22:27
type something. Hello. Let's just keep it that simple. Just save it and go back. We'll
2:22:40
add this file. then commit this let's say just call it revert once just remember that
2:22:57
this is the first comment that I made with revert one enter. So it has been changed.
2:23:07
So now let's go back and modify this. So after I've committed this file, it means that it
2:23:12
has stored a version with the text Hello exclamation in my revert text file. So I'm just going
2:23:19
to go back and change something in here. So I'm just let us just add there. Hello there.
2:23:30
Save it. Let's go back to our bash. Now. Let us commit this file again because I've made
2:23:40
some changes and I want a different version of the revert file. So we'll just go ahead
2:23:45
and commit again. So I'll use git commit all. Saints River do and enter and it's done. So
2:24:09
now if I want to revert back to okay, so now you just see the file. You can see I've modified
2:24:21
it. So now it has got hello there. Let's say that I want to go back to my previous version.
2:24:27
I would just want to go back to when I had just hello. So for that, I'll just check my
2:24:34
git log. I can check the hair that this is the commit log or the commit hash. When I
2:24:41
first committed revert it means that this is the version one of my revert. Now, what
2:24:48
you need to do is that you need to copy this commit hash. Now, you can just copy the first
2:24:54
eight hexadecimal digits and that will be it. So just copy it whole I just clear the
2:25:06
screen first. So you just need to go use this command get check out and hexadecimal code
2:25:18
or the hexadecimal digits that you just copied and the name of your file, which is revert
2:25:25
Dot txt. So you just have to use this command kit. Check out and the commit hash that you
2:25:35
just copied the first 8 digits and you have to name the file, which is revert Dot txt.
2:25:54
So now when you just see this file, you have gone back to the previous commit. And now
2:25:59
when you just display this file, you can see that now I've only got just hello. It means
2:26:05
that I have rolled back to the previous version because I have used the commit hash when I
2:26:11
initially committed with the first change. So this is how you revert back to a previous
2:26:16
version. So this is what we have learned today in today's tutorial. We have understood. What
2:26:21
is Version Control and why do we need version controls? And we've also learned about the
2:26:26
different version control tools. And in that we have primarily focused on get and we have
2:26:32
learned all about git and GitHub about how to create repositories and perform some kind
2:26:37
of operations and commands in order to push pull and move files from one repository to
2:26:44
another we've also studied about the features of git and we've also seen a case study about
2:26:49
how Dominion Enterprises which is one of the biggest public In company who makes very popular
2:26:55
websites that we have got right now. We have seen how they have used GitHub as well. Hello
2:27:04
everyone. This is order from 80 Rekha in today's session will focus on what is Jenkins. So
2:27:11
without any further Ado let us move forward and have a look at the agenda for today first. We'll see why we need continuous integration. What are the problems that industries were
2:27:19
facing before continuous integration was introduced after that will understand what exactly is continuous integration and will see various types of continuous integration tools among
2:27:28
those countries integration tools will focus on Jenkins and we'll also look at Jenkins distributed architecture finally in our hands on part will prepare a build pipeline using
2:27:36
Jenkins and I'll also tell you how to add Jenkins slaves now, I'll move forward and we'll see why we need continuous integration. So this is the process before continuous integration
2:27:46
over here, as you can see that there's a group of developers who are making changes to the source code that is present in the source code repository. This repository can be a
2:27:54
git repository subversion repository Etc. And then the entire source code of the application is written it will be built by tools like and Maven Etc. And after that that built application
2:28:04
will be deployed onto the test server for testing if there's any bug in the code developers are notified with the help of the feedback loop as you can see it on the screen and if
2:28:12
there are no bugs then the application is deployed onto the production server release. I know you must be thinking that what is the problem with this process is process looks
2:28:20
fine. As you first write the code then you build it. Then you test it and finally you deploy but let us look at the flaws that were there in this process one by one. So this
2:28:29
is the first problem guys as you can see that there is a developer who's waiting for a long time in order to get the test results as first the entire source code of the application
2:28:37
will be built and then only it will be deployed onto the test server for testing. It takes a lot of time so developers have to For a long time in order to get the test results.
2:28:46
The second problem is since the entire source code of the application is first build and then it is tested. So if there's any bug in the code developers have to go through the
2:28:56
entire source code of the application as you can see that there is a frustrated developer
2:29:01
because he has written a code for an application which was built successfully but in testing there were certain bugs in that so he has to check the entire source code of the application
2:29:09
in order to remove that bug which takes a lot of time so basically locating and fixing of bugs was very time-consuming. So I hope you are clear with the two problems that we
2:29:18
have just discussed now, we'll move forward and we'll see two more problems that were there before continuous integration. So the third problem was software delivery process
2:29:25
was slow developers were actually wasting a lot of time in locating and fixing of birds instead of building new applications as we just saw that locating and fixing of bugs
2:29:34
was a very time-consuming task due to which developers are not able to focus on building new applications. You can relate that to the diagram which is present in front of your
2:29:43
screen as Always a lot of time in watching TV doing social media similarly developers
2:29:48
were also basic a lot of time in fixing bugs. All right. So let us have a look at the fourth problem that is continuous feedback continues feedback related to things like build failures
2:29:58
test status Etc was not present due to which the developers were unaware of how their application
2:30:03
is doing the process that you showed before continuous integration. There was a feedback loop present. So what I will do I will go back to that particular diagram and I'll try
2:30:11
to explain you from there. So the feedback loop is here when the entire source code of the application is built and tested then only the developers are notified about the bugs
2:30:20
in the code. All right, when we talk about Cantonese feedback suppose this developer that I'm highlighting makes any commit to the source code that is present in the source
2:30:27
code repository. And at that time the code should be pulled and it should be built and the moment it is built the developer should be notified about the build status and then
2:30:36
once it is built successfully it is then deployed onto the test server for testing at that time.
2:30:41
Whatever the test data says the developer should be notified about it. Similarly, if this developer makes any commit to the source code at that time. The coach should be pulled.
2:30:48
It should be built and the build status should be notified the developers after that. It should be deployed onto the test server for testing and the test results should also be
2:30:56
given to the developers. So I hope you all are clear. What is the difference between continents feedback and feedback? So incontinence feedback you're getting the feedback on the
2:31:04
run. So we'll move forward and we'll see how exactly continuous integration addresses these problems. Let us see how exactly continuous integration is resolving the issues that we
2:31:13
have discussed. So what happens here, there are multiple developers. So if any one of them makes any commit to the source code that is present in the source code repository,
2:31:21
the code will be pulled it will be built tested and deployed. So what advantage we get here.
2:31:27
So first of all, any comment that is made to the source code is built and tested due to which if there is any bug in the code developers actually know where the bug is present or
2:31:37
bitch come it has caused that error so they don't need to go through the entire source code of the application. They just need to check that particular. Because introduce the
2:31:45
button. All right. So in that way locating and fixing of bugs becomes very easy apart from that the first problem that we saw the developers have to wait for a long time in
2:31:53
order to get the test result here every commit made to the source code is tested. So they don't need to wait for a long time in order to get the test results. So when we talk about
2:32:02
the third problem that was software delivery process was slow is completely removed with this process developers are not actually focusing on locating and fixing of bugs because that
2:32:11
won't take a lot of time as we just discussed instead of that. They're focusing on building new applications. Now a fourth problem was that there is feedback was not present. But
2:32:19
over here as you can see on the Run developers are getting the feedback about the build status test results Etc developers are continuously notified about how their application is doing.
2:32:28
So I will move forward now, I'll compare the two scenarios that is before continuous integration
2:32:33
and after continuous integration now over here what you can see is before continuous integration as we just saw first the source code of the application will be built the
2:32:41
entire source code then only it will be tested. But when we talk about after continuous integration every commit whatever change you made in the source code whatever change the my new changes.
2:32:51
Well you committed to the source code that time only the code will be pulled. It will be built and then lll be tested developers have to wait for a long time in order to get
2:33:00
the test results as we just saw because the - source code will be first build and then it will be deployed onto the test server. But when we talk about continuous integration
2:33:06
the test result of every come it will be given to the developers and when we talk about feedback,
2:33:12
there was no feedback that was present earlier, but in continuous integration feedback is present for every committee met to the source code. You will be provided with the relevant
2:33:20
result. All right, so now let us move forward and we'll see what exactly is continuous integration
2:33:25
now in continuous integration process developers are required to make frequent commits to the
2:33:30
source code. They have to frequently make changes in the source code and because of that any change made in the source code, it will report by The Continuous integration
2:33:39
server, and then that code will be built or you can say it will be compiled. All right now. Pentagon The Continuous integration tool that you are using or depending on the needs
2:33:49
of your organization. It will also be deployed onto the test server for testing and once testing is done. It will also be deployed onto the production server for release and
2:33:56
developers are continuously getting the feedback about their application on the run. So I hope
2:34:02
I'm clear with this particular process. So we'll see the importance of continuous integration
2:34:09
with the help of a case study of Nokia. So Nokia adopted a process called nightly build nightly build can be considered as a predecessor to continuous integration. Let me tell you
2:34:16
why. All right. So over here as you can see that there are there are developers who are committing changes to the source code that is present in a shared repository. All right,
2:34:25
and then what happens in the night? There is a build server. This build server will pull the shared repository for changes and then it'll pull that code and prepare a bill.
2:34:34
All right. So in that way whatever commits are made throughout the day are compiled in the night. So obviously this process is better than writing the entire source code of the
2:34:43
application and then Bai Ling it but again since if there is any bug in the code developers
2:34:48
have to check all the comments that have been made throughout the day so it is not the ideal way of doing things because you are again wasting a lot of time in locating and fixing
2:34:56
of bucks. All right, so I want answers from you all guys. What can be the solution to this problem. How can Nokia address is particular problem since we have seen what exactly continuous
2:35:05
integration is and why we need now without wasting any time. I'll move forward and I'll show you how Nokia solved this problem. So Nokia adopted continuous integration as a
2:35:14
solution in which what happens developers commit changes to the source code in a shared repository. All right, and then what happens is a continuous integration server this continuous
2:35:24
integration server pose the repository for changes if it finds that there is any change made in the source code and it will pull the code and compile it. So what is happening
2:35:32
the moment you commit a change in the source code continuous integration server will pull that and prepare a build. So if there is any bug in the code developers know which government
2:35:41
is causing that error. All right, so they can do Go through that particular commit in order to fix the bug. So in this way locating and fixing of box was very easy, but we saw
2:35:51
that in nightly builds if there is any bug they have to check all the comments that have been made throughout the day. So with the help of continuous integration, they know
2:35:58
which commits is causing that error. So locating in fixing of bugs didn't take a lot of time. Okay before I move forward, let me give you a quick recap of what we have discussed till
2:36:07
now first. We saw why we need continuous integration. What were the problems that industries were facing before continuous integration was introduced after that. We saw how continuous integration
2:36:16
addresses those problems and we understood what exactly continuous integration is. And then in order to understand the importance of continuous integration, we saw case study
2:36:25
of Nokia in which they shifted from nightly build to continuous integration. So we'll move forward and we'll see various continuous integration tools available in the market.
2:36:34
These are the four most widely used continuous integration tools. First is Jenkins on which
2:36:39
we will focus in today's session then buildbot Travis and bamboo. Right and let us move forward
2:36:45
and see what exactly jenkins's so Jenkins is a continuous integration tool. It is an open source tool and it is written in Java how it achieves continuous integration. It
2:36:55
does that with the help of plugins. Jenkins have well over a thousand plugins. And that is the major reason why we are focusing on Jenkins. Let me tell you guys it is the most
2:37:03
widely accepted tool for continuous integration because of its flexibility and the amount of plugins that it supports. So as you can see from the diagram itself that it is supporting
2:37:13
various development deployment testing Technologies, for example gate Maven selenium puppet ansible
2:37:19
lawgivers. All right. So if you want to integrate a particular tool you need to make sure that plug-in for that tool is installed in your Jenkins the for better understanding of Jenkins.
2:37:29
Let me show you the Jenkins dashboard. I've installed Jenkins in my Ubuntu box. So if you want to learn how to install Jenkins, you can refer the Jenkins installation video.
2:37:37
So this is a Jenkins dashboard guys, as you can see that there are currently no jobs because of that this section is empty otherwise We'll give you the status of all your build jobs
2:37:45
over here. Now when you click on new item, you can actually start a new project all over from scratch. All right. Now, let us go back to our slides. Let us move forward and see
2:37:55
what are the various categories of plugins as I told you earlier is when the Jenkins achieves continuous integration with the help of plugins. All right, and Jenkins opposed
2:38:03
well over a thousand plugins and that is the major reason why Jenkins is so popular nowadays. So the plug-in categorization is there on your screen but there are certain plugins
2:38:12
for testing like j-unit selenium Etc when we talk about reports, we have multiple plugins,
2:38:17
for example HTML publisher for notification. Also, we have many plugins and I've written one of them that is Jenkins build notification plug-in and we talked about deployment we
2:38:26
have plugins like deploy plug-in when we talk about compiled we have plugins like Maven and Etc. Alright, so let us move forward and see how to actually install a plug-in on the
2:38:37
same about to box where my Jenkins is installed. So over here in order to install Jenkins, what you need to do is you need to click on manage. Ken's option and overhead, as you
2:38:46
can see that there's an option called manage plugins. Just click over there. As you can see that it has certain updates for the existing plugins, which I have already installed. Right
2:38:55
then there's an option called installed where you'll get the list of plugins that are there in your system. All right, and at the same time, there's an option called available.
2:39:03
It will give you all the plugins that are available with Jenkins. Alright, so now what I will do I will go ahead and install a plug-in that is called HTML publisher. So it's very
2:39:12
easy. What you need to do is just type the name of the plug-in. Headed HTML publisher
2:39:18
plugin, just click over there and install without restart. So it is now installing that
2:39:24
plug-in we need to wait for some time. So it has now successfully installed now, let
2:39:30
us go back to our Jenkins dashboard. So we have understood what exactly Jenkins is and we have seen various 10 kids plugins as well. So now is the time to understand Jenkins with
2:39:40
an example will see a general workflow how Jenkins can be used. All right. So let us go back to our slides. So now as I have told you earlier as well, we'll see Jenkins example,
2:39:48
so let us move forward. So what are what is happening developers are committing changes to the source code and that source code is present in a shared repository. It can be
2:39:57
a git repository subversion repository or any other repository. All right. Now, let us move forward and see what happens now now we're here what is happening. There's a Jenkins
2:40:08
server. It is actually polling the source code repository at regular intervals to see if any developer has made any commit to the source code. If there is a change in the source
2:40:15
code it will pull the code and we'll prepare a build and at the same time developers will
2:40:20
be notified about the build results now, let us execute this practically. All right, so I will again go back to my Jenkins dashboard, which is there in my Ubuntu bar. What had
2:40:29
what I'm going to do is I'm going to create a new item read basically a new project now
2:40:34
over here. I'll give a suitable named my project you can use any name that you want. I'll just
2:40:39
write compile. And now I click on freestyle project. The reason for doing that is free-style
2:40:44
project is the most configurable and the flexible option. It is easier to set up as well. And at the same time many of the options that we configure here are present in other build
2:40:53
jobs as well move forward with freestyle project and I'll click on ok now over here what I'll do, I'll go to the source code management Tab and it will ask you for what type of source
2:41:02
code management you want. I'll click on get and over here. You need to type your repository
2:41:08
URL in my case. It is http. github.com your username slash the name of your Repository.
2:41:24
And finally dot get all right now in the bill auction, you have multiple options. All right.
2:41:30
So what I will do I click on invoke top-level Maven targets. So now over here, let me tell you guys it may even has a built life cycle and that build life cycle is made up of multiple
2:41:40
build phases. Typically the sequence for build phase will be festive validate the code then you compile it. Then you test it. Then you perform unit test by using suitable unit testing
2:41:50
framework. Then you package your code in a distributable format like a jars, then you
2:41:55
verify it and you can actually install any package that you want with the help of install
2:42:01
build phase and then you can deploy it in the production environment for release. So I hope you have understood the maven build life cycle. So in the goals tab, so what I
2:42:10
need to do is I need to compile the code that is present in the GitHub account. So for that in the gold stabbed I need to write compile. So this will trigger the compile build phase
2:42:19
of Maven now, that's it guys. That's it. Just click on apply. And save now on the left hand
2:42:25
side. There's an option called bill now to trigger the built just click over there and you will be able to see the the Builder starting in order to see the console output. You can
2:42:34
click on that build and you see the console output. So it has validated the GitHub account
2:42:39
and it is now starting to compile that code which is there in the GitHub account. So we
2:42:45
are successfully compiled the code that was present in the GitHub account. Now, let us go back to the Jenkins dashboard. Now in this Jenkins dashboard, you can see that my project
2:42:54
is displayed over here. And as you can see the blue color of the ball indicates that as that it has been successfully executed. All right. Now, let us go back to the slides
2:43:04
now, let us move forward and see what happens. Once you have compile your code. Now the code
2:43:09
that you have compiled you need to test it. All right. So what Jenkins will do it will deploy the code onto the test server for testing and at the same time developers will be notified
2:43:18
about the test results as well. So let us again execute this practically, I'll go back to my Ubuntu box again. So in the GitHub repository, the test cases are already defined. Alright,
2:43:27
so we are going to analyze those test cases with the help of Maven. So let me tell you how to do it will again go and click on new item on over here will give any suitable name
2:43:36
to a project. I'll just type test. I'll again use freestyle project for the reason that
2:43:42
I've told you earlier click on OK and in the source code management tab. Now before applying
2:43:49
unit testing on the code that I've compiled. I need to First review it with the help of PMD plug-in. I'll do that. So for that I will again click on new item and a over here. I
2:43:59
need to type the name of the project. So I'll just type it as code underscore review. Freestyle
2:44:05
project click. Ok. Now the source code management tab. I will again choose gate and give my
2:44:13
repository URL https. github.com username / name of the Repository . Kit All right now
2:44:27
scroll doubt now in the build tab. I'm going to click over there. And again, I will click on invoke top-level Maven targets now in order to review the code. I am going to use the
2:44:36
Matrix profile of Maven. So how to do that. Let me tell you you need to type here - p
2:44:49
Matrix PMD: PMD, all right, and this will actually produce a PMD report that contains all the warnings and errors now in the post Bill action tab, I click on publish PMD analysis
2:44:59
result. That's all click on apply and Save the finally click on Bill now. And let us
2:45:08
see the console output. So it has now pulled the code from the GitHub account and Performing
2:45:14
the code review. So they successfully review the code now. Let us go back to the project
2:45:19
over here. You can see an option called PMD warnings just click over there and it will
2:45:24
display all the warnings that are there present in your code. So this is the PMD Alice's report over here. As you can see that there are total 11 warnings and you can find the details here
2:45:33
as well like package you have then you have then you have categories then the types of
2:45:39
warnings which are there like for example, empty cache blocks empty finally block. Now, you have one more tab called warnings over there. You can find where the warning is present
2:45:47
the filename package. All right, then you can find all the details in the details tab. It will actually tell you where the warning is present in your code. All right. Now, let
2:45:56
us go back to the Jenkins dashboard and now we'll perform unit tests on the code that we have compiled for that again. I'll click on new item and I'll give a name to this project.
2:46:06
I will just type test. And I click on freestyle project. Okay. Now in the source code management
2:46:13
tab, I'll click on get now over here. I'll type the repository URL http. github.com / username
2:46:29
/ name of the Repository . Kit and in the build option I click on again invoke top-level
2:46:39
Maven targets now over here as I've told you earlier as well that Maven build life cycle has multiple build phases like first it would validate the code compile then tested package
2:46:50
that will verify then it will install if certain packages are required. And then finally it will deploy it. Alright. So one of the phase is actually testing that performs unit testing
2:46:59
using the suitable unit testing framework. The test cases are already defined in my GitHub account. So to analyze the test case in the Gold section, I need to write tests. All right,
2:47:08
and it will invoke the test phase of the maven build life cycle. All right, so just click
2:47:14
on apply and Save finally click on Builder To see the console output click here now in
2:47:22
the source code management tab. I'll select get all right over here again. I need to type my repository URL. That is HTTP github.com / username. / repository name dot get and
2:47:44
now in the build tab. I'll select invoke top-level Maven targets and over here as I have told
2:47:50
you earlier as well that the maven build life cycle has multiple phases. All right, and one of that phase is unit tests, so in order to invoke that unit test what I need to do
2:47:59
is in the goals tab, I need to write tests and it will invoke the test build phase of
2:48:04
the maven build life cycle. All right. So the moment I write tests here and I'll build it. It will actually analyze the test cases that are present in the GitHub account. So
2:48:13
let us write test and apply and Save Finally click on Bill now. And in order to see the
2:48:23
console output click here. So does pull the code from the GitHub account and now it's
2:48:29
performing unit test. So we have successfully perform testing on that code now, I will go
2:48:35
back to my Jenkins dashboard or as you can see that all the three build jobs that have executed a successful which is indicated with the help of view colored ball. All right.
2:48:44
Now, let us go back to our slides. So we have successfully performed in unit tests on the test cases that were there on the GitHub account now, we'll move forward and see what happens
2:48:53
after that. Now finally, you can deploy that build application or to the production environment for release, but when you have one single Jenkins over there are multiple disadvantages.
2:49:03
So let us discuss that one by one so we'll move forward and we'll see what are the disadvantages of using one single Jenkins over now. What I'll do I'll go back to my Jenkins dashboard
2:49:12
and I'll show you how to create a build pipeline. All right. So for that I'll move to my Ubuntu
2:49:17
box. Once again now over here you can see that there is an option of plus. Ok, just click over there now over here click on build pipeline view, whatever name you want. You
2:49:26
can give I'll just give it as a do Rekha. pipeline And click on ok. Now over here what
2:49:37
you can do you can give some certain description about your bill pipeline. All right, and there are multiple options that you can just have a look and over here. There's an option called
2:49:47
select initial job. So I want compiled to be my first job and there are display options
2:49:53
over here number of display builds that you want. I'll just keep it as 5 now the row headers
2:49:58
that you want column headers, so you can just have a look at all these options and you can play around with them just for the introductory example, let us keep it this way now finally
2:50:07
click on apply and ok. Currently you can see that there is only one job that is compiled.
2:50:14
So what I'll do, I'll add more jobs this pipeline for that. I'll go back to my Jenkins dashboard
2:50:21
and over here. I'll add code review as well. So for that I will go to configure. And in
2:50:26
this bill triggers tab, what I'll do I click on build after other projects are built. So
2:50:32
whatever project that you want to execute before code review just type that so I want compile. Yeah, click on compile and over here. You can see that there are multiple options
2:50:42
like trigger only if build stable trigger, even if the build is unstable trigger, even if the build page so I'll just click on a trigger even if the bill fails. All right,
2:50:51
finally click on apply and safe. Similarly if I want to add my test job as well to the
2:50:57
pipeline. I can click on configure and again the bill triggers tab. I'll click on build
2:51:03
after other projects are built. So overhead type the project that you want to execute before this particular project in our case. It is code review. So let us click over there
2:51:14
trigger, even if the build fails apply and Save Now let us go back to the dashboard and
2:51:22
see how our pipeline looks like. So this is our pipeline. Okay, so when we click on run
2:51:28
Let us see what happens first. It will compile the code from the GitHub account. That is it will pull the code and it will compile it. So now this compile is done. All right,
2:51:36
now it will review the code. So the code review has started in order to see the log. You can
2:51:41
click on Console. It will give you the console output. Now once code review is done. It will
2:51:47
start testing. It will perform unit tests or it's a code has been successfully reviewed with the as you can see the color has become green. Now, the testing has started it will
2:51:57
perform unit tests on the test case is that there in the GitHub account? So we have successfully executed three build jobs that is compile the code then review it and then perform testing.
2:52:07
All right, and this is the build pipeline guys. So let us go back to the Jenkins dashboard. And we'll go back to our slides now. So now we have successfully performed unit tests
2:52:18
on the test cases that are present in the GitHub account. All right. Now, let us move forward and see what else you can do with Jenkins. Now the application that we have
2:52:25
tested that can also be deployed onto the production server for release as well. Alright,
2:52:30
so now let us move forward and see what are the disadvantages of this one single Jenkins over. So there are two major disadvantages of using one single Jenkins over first is
2:52:40
you might require different environments for your builds and test jobs. All right. So at that time one single Jenkins over cannot serve a purpose and the second major disadvantages
2:52:49
suppose. You have a heavier projects to build on regular basis. So at that time one single
2:52:55
Jenkins server cannot simply handle the load. Let us understand this with an example suppose.
2:53:01
If you need to run web test using Internet Explorer. So at that time you need a Windows machine, but your other build jobs might require a Linux box. So you can't use one single Jenkins
2:53:09
over. All right, so let us move forward. See what is actually the solution to this problem
2:53:15
the solution to this problem is Jenkins distributed architecture. So the Jenkins distributed architecture
2:53:20
consists of a Jenkins master and multiple Jenkins slave. So this Jenkins Master is actually
2:53:27
used for scheduling build jobs. It also dispatches builds to the slaves for actual execution.
2:53:33
All right, it also monitors a slave that is possibly taking them online and offline as required and it also records and presents the build results and you can directly executable
2:53:44
job or Master instance as well. Now when we talk about Jenkins slaves, these slaves are nothing but the Java executable that are present on remote machines. All right, so these slaves
2:53:54
basically here's the request of the Jenkins master or you can say they perform the jobs As Told by the Jenkins Master they operate on variety of operating system. So you can
2:54:02
configure Jenkins in order to execute a particular type of builds up on a particular Jenkins slave or on a particular type of Jenkins slave or you can actually let Jenkins pick the next
2:54:12
available. Budget get slave. All right. Now I go back again to my Ubuntu box and I'll show you practically how to add Jenkins slaves now over here as you can see that there is
2:54:21
an option called Mana Jenkins just click over there and when you scroll down you'll see
2:54:27
man option called managed nodes under the left hand side. There is an option called new node. Just click over there click on permanent agent give a name to your slave. I'll just
2:54:36
give it as slave underscore one. Click on OK over here. You need to write the remote
2:54:43
root directory. So I'll keep it as slash home slash Edureka. And labels are not mandatory
2:54:51
still if you want you can use that and launch method. I want it to be launched slave agents
2:54:57
via SSH. All right over here. You need to give the IP address of your horse. So let
2:55:02
me show you the IP address of my Host this my Jenkins slave, which I'll be using like
2:55:09
Jenkins slave. So, this is the machine that I'll be using as Jenkins slave in order to
2:55:17
check the IP address. I'll type ifconfig. This is the IP address of that machine just
2:55:24
copy it. Now I'll go back to my Jenkins master. And in the host tab, I'll just paste that
2:55:34
IP address and over here. You can add the credentials to do that. Just click on ADD and over here. You can give the user name. I'll give it as root password. That's all
2:55:48
just click on ADD. And over here select it. Finally save it. Now it is currently adding
2:55:56
the slave in order to see the logs. You can click on that slave again. Now, it has successfully
2:56:02
added that particular slave. Now what I'll do, I'll show you the logs for that and click on slave. And on the left hand side, you will notice an option called log just click over
2:56:12
there and we'll give you the output. So as you can see agent has successfully connected and it is online right now. Now what I'll do, I'll go to my Jenkins slave and I'll show
2:56:21
you in slash home slash enter a car that it is added. Let me first clear my terminal now
2:56:30
what I'll do, I'll show you the contents of Slash home slash at Eureka. As you can see
2:56:42
that we have successfully added slave dot jar. That means we have successfully added Jenkins slave to our Jenkins Master. Hello everyone. This is ordered from 80 Rekha and
2:56:56
today's session will focus on what is docker. So without any further Ado let us move forward
2:57:02
and have a look at the agenda for today first. We'll see why we need Docker will focus on various problems that industries were facing before Docker was introduced after that will
2:57:12
understand what exactly Docker is and for better understanding of Docker will also look at a Docker example after that will understand how Industries are using Docker with the case
2:57:22
study of Indiana University. Our fifth topic will focus on various Docker components, like
2:57:28
images containers Etc and our Hands-On part will focus on installing WordPress and phpmyadmin
2:57:34
using Docker compose. So we'll move forward and we'll see why we need Docker. So this
2:57:40
is the most common problem that industries were facing as you can see that there is a developer who has built an application that works fine in his own environment. But when
2:57:49
it reach production there were certain issues with that application. Why does that happen that happens because of difference in the Computing environment between deaf and product
2:57:58
I'll move forward and we'll see the second problem before we proceed with the second problem. It is very important for us to understand. What a microservices consider a very large
2:58:09
application that application is broken down into smaller Services. Each of those Services can be termed as micro services or we can put it in another way as well microservices
2:58:18
can be considered a small processes that communicates with each other over a network to fulfill
2:58:24
one particular goal. Let us understand this with an example as you can see that there
2:58:29
is an online shopping service application. It can be broken down into smaller micro services like account service product catalog card server and Order server Microsoft was architecture
2:58:40
is gaining a lot of popularity nowadays even giants like Facebook and Amazon are adopting
2:58:45
micro service architecture. There are three major reasons for adopting microservice architecture, or you can say there are three major advantages of using Microsoft's architecture first. There
2:58:55
are certain applications which are easier to build and maintain when they are broken down into smaller pieces or smaller Services. Second reason is suppose if I want to update
2:59:05
a particular software or I want a new technology stack in one of my module on one of my service
2:59:11
so I can easily do that because the dependency concerns will be very less when compared to the application as a whole. Apart from that the third reason is if any of my module of
2:59:21
or any of my service goes down, then my whole application remains largely unaffected. So
2:59:27
I hope we are clear with what our micro services and what are their advantages so we'll move forward and see what are the problems in adopting this micro service architecture. So this is
2:59:37
one way of implementing microservice architecture over here, as you can see that there's a host machine and on top of that host machine there are multiple virtual machines each of these
2:59:46
virtual machines contains the dependencies for one micro service. So you must be thinking what is the disadvantage here? The major disadvantage here is in Virtual machines. There is a lot
2:59:55
of wastage of resources resources such as RAM processor disk space are not utilized
3:00:01
completely by the micro service which is running in these virtual machines. So it is not an ideal way to implement microservice architecture and I have just given you an example of five
3:00:11
microservices. What if there are more than 5 micro Services what if your application is so huge that it requires? Microsoft versus so at that time using virtual machines doesn't
3:00:21
make sense because of the wastage of resources. So let us first discuss the implementation of microservice problem that we just saw. So what is happening here. There's a host
3:00:30
machine and on top of that host machine. There's a virtual machine and on top of that virtual machine, there are multiple Docker containers and each of these Docker containers contains
3:00:38
the dependencies 41 Microsoft Office. So you must be thinking what is the difference here earlier? We were using virtual machines. Now, we are using our Docker containers on top
3:00:47
of virtual machines. Let me tell you guys Docker containers are actually lightweight Alternatives of virtual machines. What does that mean in Docker containers? You don't
3:00:56
need to pre-allocate any Ram or any disk space. So it will take the RAM and disk space according
3:01:01
to the requirements of applications. All right. Now, let us see how Dockers all the problem of not having a consistent Computing environment throughout the software delivery life cycle.
3:01:10
Let me tell you first of all Docker containers are actually developed by the developers. So now let us see how Dockers all the first That we saw where an application works fine
3:01:19
and development environment but not in production. So Docker containers can be used throughout the SCLC life cycle in order to provide consistent Computing environment. So the same environment
3:01:30
will be present in Dev test and product. So there won't be any difference in the Computing environment. So let us move forward and understand what exactly Docker is. So the docker containers
3:01:41
does not use the guest operating system. It uses the host operating system. Let us refer to the diagram that is shown. There is the host operating system and on top of that host
3:01:50
operating system. There's a Docker engine and with the help of this Docker engine Docker containers are formed and these containers have applications running in them and the
3:01:59
requirements for those applications such as all the binaries and libraries are also packaged in the same container. All right, and there can be multiple containers running as you
3:02:08
can see that there are two containers here 1 & 2. So on top of the host machine is a docker engine and on top of the docker engine there are multiple containers and Each of
3:02:17
those containers will have an application running on them and whatever the binaries and library is required for that application is also packaged in the same container. So
3:02:26
I hope you are clear. So now let us move forward and understand Docker in more detail. So this is a general workflow of Docker or you can say one way of using Docker over here. What
3:02:35
is happening a developer writes a code that defines an application requirements or the
3:02:41
dependencies in an easy to write Docker file and this Docker file produces Docker images.
3:02:47
So whatever dependencies are required for a particular application is present inside this image and what our Docker containers Docker containers are nothing but the runtime
3:02:55
instance of Docker image. This particular image is uploaded onto the docker Hub. Now, what is Docker Hub? Docker Hub is nothing but a git repository for Docker images it
3:03:04
contains public as well as private repositories. So from public repositories, you can pull your image as well and you can upload your own images as well on to the docker Hub. All
3:03:13
right from Docker Hub various teams such as QA or production. We'll pull the image and
3:03:18
prepare their own containers as you can see from the diagram. So what is the major advantage we get through this workflow? So whatever the dependencies that are required for your
3:03:28
application is actually present throughout the software delivery life cycle. If you can recall the first problem that we saw that an application works fine in development environment,
3:03:37
but when it reaches production, it is not working properly. So that particular problem is easily resolved with the help of this particular workflow because you have a same environment
3:03:47
throughout the software delivery lifecycle be Dev test or product will see if a better understanding of Docker a Docker example. So this is another way of using Docker in
3:03:56
the previous example, we saw that Docker images were used and those images were uploaded onto the docker Hub. I'm from Doc and have various teams were pulling those images and building
3:04:06
their own containers. But Docker images are huge in size and requires a lot of network bandwidth. So in order to say that Network bandwidth, we use this kind of a work flow
3:04:15
over here. We use Jenkins server. Or any continuous integration server to build an environment that contains all the dependencies for a particular application or a Microsoft Office and that
3:04:25
build environment is deployed onto various teams, like testing staging and production.
3:04:31
So let us move forward and see what exactly is happening in this particular image over here developer has written complex requirements for a micro service in an easy to write dockerfile.
3:04:41
And the code is then pushed onto the get repository from GitHub repository continuous integration
3:04:46
servers. Like Jenkins will pull that code and build an environment that contains all they have dependencies for that particular micro service and that environment is deployed
3:04:56
on to testing staging and production. So in this way, whatever requirements are there
3:05:01
for your micro service is present throughout the software delivery life cycle. So if you can recall the first problem we're application works fine in Dev, but does not work in prod.
3:05:11
So with this workflow we can completely remove that problem because the requirements for the Microsoft Office is present throughout The software delivery life cycle and this
3:05:20
image also explains how easy it is to implement a Microsoft's architecture using Docker now,
3:05:26
let us move forward and see how Industries are adopting Docker. So this is the case study of Indiana University before Docker. They were facing many problems. So let us have
3:05:35
a look at those problems one by one. The first problem was they were using custom script in order to deploy that application onto various vm's. So this requires a lot of manual steps
3:05:45
and the second problem was their environment was optimized for legacy Java based applications,
3:05:52
but they're growing environment involves new products that aren't solely java-based. So in order to provide these students the best possible experience, they needed to began
3:06:00
modernizing their applications. Let us move forward and see what all other problems Indiana University was facing. So in the previous problem of dog, Indiana University, they wanted
3:06:10
to start modernizing their applications. So for that they wanted to move from a monolithic architecture to a Microsoft Office architecture and the previous slides. We also saw that
3:06:20
if you want to update a particular technology in one of your micro service it is easy to do that because will be very less dependency constrains when compared to the whole application.
3:06:29
So because of that reason they wanted to start modernizing their application. They wanted to move to a micro service architecture. Let us move forward and see what are the other
3:06:38
problems that they were facing Indiana University also needed security for their sensitive student
3:06:43
data such as SSN and student health care data. So there are four major problems that they
3:06:49
were facing before Docker now, let us see how they have implemented Docker to solve all these problems the solution to all these problems was docker Data Center and Docker
3:06:58
data center has various components, which are there in front of your screen first is universal control plane, then comes ldap swarm. CS engine and finally Docker trusted registry
3:07:10
now, let us move forward and see how they have implemented Docker data center in their infrastructure. This is a workflow of how Indiana University has adopted Docker data
3:07:19
center. This is dr. Trusted registry. It is nothing but the storage of all your Docker
3:07:24
images and each of those images contain the dependencies 41 Microsoft Office as we saw
3:07:30
that the Indiana University wanted to move from a monolithic architecture to a Microsoft is architecture. So because of that reason these Docker images contain the dependencies
3:07:38
for one particular micro service, but not the whole application. All right, after that
3:07:44
comes universal control plane. It is used to deploy Services onto various hosts with the help of Docker images that are stored in the docker trusted registry. So it obscene
3:07:53
can manage their entire infrastructure from one single place with the help of universal
3:07:58
control plane web user interface. They can actually use it to provision Docker installed software on various hosts, and then deploy applications without doing a lot Of manual
3:08:07
steps as we saw in the previous slides that Indiana University was earlier using custom scripts to deploy our application onto VMS that requires a lot of manual steps that problem
3:08:17
is completely removed here when we talk about security the role based access controls within
3:08:22
the docker data center allowed Indiana University to Define level of access to various themes.
3:08:28
For example, they can provide read-only access to Docker containers for production team.
3:08:33
And at the same time they can actually provide read and write access to the dev team. So
3:08:39
I hope we all are clear with how Indiana University has adopted Docker data center will move forward
3:08:45
and see what are the various Docker components. First is Docker registry Docker registry is
3:08:53
nothing but the storage of all your Docker images your images can be stored either in public repositories or in private repositories. These repositories can be present locally
3:09:02
or it can be present on the cloud dog. A provides a cloud hosted service called Docker Hub Docker
3:09:07
Hub as public as well as private repositories from public repositories. You can actually pull an image and prepare your own containers at the same time. You can write an image and
3:09:16
upload that onto the docker Hub. You can upload that into your private repository or you can upload that on a public repository as well. That is totally up to you. So for better understanding
3:09:26
of Docker Hub, let me just show you how it looks like. So this is how a Docker Hub looks like. So first you need to actually sign in with your own login credentials. After that.
3:09:35
You will see a page like this, which says welcome to Docker Hub over here, as you can see that there is an option of create repository where you can create your own public or private
3:09:43
repositories and upload images and at the same time. There's an option called explore repositories this contains all the repositories. These which are available publicly. So let
3:09:52
us go ahead and explore some of the publicly available repositories. So we have a repositories
3:09:58
for nginx reddish Ubuntu then we have Docker registry Alpine Mongo my SQL swarm. So what
3:10:06
I'll do I'll show you a centralized repository. So this is the centralized repository which contains the center West image. Now, what I will do later in the session, I'll actually
3:10:15
pull a centralized image from Docker Hub. Now, let us move forward and see what our Docker images and containers. So Docker images are nothing but the read-only templates that
3:10:25
are used to create containers these Docker images contains all the dependencies for a particular application or a Microsoft Office. You can create your own image and upload that
3:10:35
onto the docker Hub. And at the same time you can also pull the images which are available in the public repositories and the in Docker Hub. Let us move forward and see what our
3:10:44
Docker containers Docker containers are nothing but the runtime instances of Docker images
3:10:50
it contains everything that is required to run an application or a Microsoft Office and at the same time. It is also possible that more than one image is required to create
3:10:59
a one container. Alright, so for better understanding of Docker images and Docker containers, what
3:11:04
I'll do on my Ubuntu box, I will pull a sin 2x image and I'll run a sin to waste container
3:11:10
in that. So let us move forward and first install Docker in my Ubuntu box. So guys,
3:11:15
this is my Ubuntu box over here first. I'll update the packages. So for that I will type sudo apt-get update. asking for password it is done now. Before installing Docker. I need
3:11:43
to install the recommended packages for that. I'll type sudo. Apt get install. Line-X - image
3:11:55
- extra - you name space - are and now a line irks - image - extra - virtual and here we
3:12:30
go. Press why? So we are done with the prerequisite. So let us go ahead and install Docker for
3:12:44
that. I'll type sudo. apt-get install Docker - engine so we have successfully installed
3:13:01
Docker if you want to install Docker and send two ways. You can refer the center is Docker installation video. Now we need to start this docker servicer for that. I'll type sudo service
3:13:15
docker start. So it says the job is already running. Now. What I will do I will pull us
3:13:24
into his image from Docker Hub and I will run the center waste container. So for that I will type sudo. Docker pull and the name of the image. That is st. OS the first it
3:13:36
will check the local registry for Centos image. If it doesn't find there then it will go to the docker hub for st. OS image and it will pull the image from there. So we have successfully
3:13:52
pulled us into his image from Docker Hub. Now, I'll run the center as container. So
3:13:57
for that I'll type sudo Docker Run - it sent OS that is the name of the image. And here
3:14:06
we go. So we are now in the Centre ice container. Let me exit from this. Clear my terminal.
3:14:16
So let us now recall what we did first. We installed awkard on open to after that. We pulled sent to his image from Docker Hub. And then we build a center as container using
3:14:26
that Center West image now. I'll move forward and I'll tell you what exactly Docker compose
3:14:32
is. So let us understand what exactly Docker compose is suppose you have multiple applications
3:14:38
on various containers and all those containers are actually linked together. So you don't want to actually execute each of those containers one by one but you want to run those containers
3:14:49
at once with a single command. So that's where Docker compose comes into the picture with
3:14:54
Docker compose. You can actually run multiple applications present on various containers with one single command that is docker - compose up as you can see that there is an example
3:15:04
in front of you imagine you're able to Define three containers one running a web app another running a post Kris. And another running a red is in a uml file that is called Docker
3:15:15
compose file. And from there. You can actually execute all these three containers with one single command. That is Takin - compose up let us understand this with an example suppose.
3:15:25
You want to publish a Blog for that you'll use CMS and WordPress is one of the most widely
3:15:31
used CMS so you need one. Default WordPress and you need one more container for my SQL
3:15:36
as bakit and that my SQL container should be linked to the WordPress container apart
3:15:42
from that. You need one more container for phpmyadmin that should be linked to my SQL
3:15:47
database as it is used to access mySQL database. So what if you are able to Define all these
3:15:53
three containers in one yamen file and with one command that is docker - composer, all three containers are up and running. So let me show you practically how it is done on
3:16:03
the same open to box where I've installed Docker and I've pulled a center s image. This
3:16:08
is my Ubuntu box first. I need to install Docker compose here, but before that I need python pip so for that I will type sudo. Opt get installed. Titan - VIP and here we go.
3:16:38
So it is done now. I will clear my terminal and now I'll install Docker compose for that.
3:16:43
I'll type sudo VIP install Docker - compose and here we go. So Docker compose is successfully
3:16:59
installed. Now I'll make a directory and I'll name it as WordPress mkdir WordPress. Now
3:17:09
I'll enter this WordPress directory. Now over here, I'll edit Docker - compose dot HTML
3:17:18
file using G edit. You can use any other editor that you want. I'll use G edit. So I'll type
3:17:24
sudo G edit Docker - compose dot HTML and here we go. So what here what I'll do, I'll
3:17:38
first open a document. And I'll copy this yeah Mel code. And I will paste it here. So
3:17:49
let me tell you what I've done first. I have defined a container as and I'm named it as WordPress. It is built from an image WordPress that is present on the docker Hub. But this
3:17:58
WordPress image does not have a database. So for that I have defined one more container and I've named it as WordPress underscore DB. It is actually built from the image that
3:18:08
is called Maria DB which is present in the word press and I need to link this WordPress underscore DB with the WordPress container. So for that I have written links WordPress
3:18:18
underscore DB: my SQL. All right, and in the post section this port 80 of the docker container
3:18:25
will actually be linked to Port eight zero eight zero of by host machine. So are we clear
3:18:31
till here now? What I've done I've defined a password here as a deer a cow. You can give whatever password that you want and have defined one more container called phpmyadmin. This
3:18:42
container is built from the image corbino's / talker - phpmyadmin that is present on the
3:18:47
docker Hub again. I need to link this particular container with WordPress underscore DB container
3:18:53
for that. I have written links WordPress underscore DB: my SQL and the port section the port 80
3:18:59
of my Docker container will actually be linked to Port 80 181 of the host machine and finally
3:19:05
I've given a username that is root and I've given a password as Ed Eureka. So let us now
3:19:10
save it and we'll quit Let me first clear my terminal. And now I run a command sudo
3:19:21
Docker - compose. Up - D and here we go. So this command will actually pull all the three
3:19:32
images and we'll build the three containers. So it is done now. Let me clear my terminal.
3:19:48
Now what I'll do, I'll open my browser and over here. I'll type the IP address of my
3:19:54
machine or I can type the hostname as well. First name of my machine is localhost. So I'll type localhost and put a zero eight zero that I've given for WordPress. So it will
3:20:05
direct you to a WordPress installation page over here. You need to fill this particular form, which is asking you for site title. I'll give it as editor acre username. Also,
3:20:14
I will give as edureka password. I'll type area Rekha confirm the use of weak password
3:20:23
then type your email address and it is asking search engine or visibility which I want.
3:20:29
So I want click here and finally, I'll click on install WordPress. So this is my WordPress
3:20:37
dashboard and WordPress is now successfully installed. Now what I'll do, I'll open one
3:20:42
more top on over here. I'll type localhost or the IP address of a machine and I'll go
3:20:48
to Port 80 1814 phpmyadmin. And over here, I need to give the user name. If you can recall.
3:20:55
I've given route and password has given as a do Rekha and here we go. So PHP, my admin
3:21:03
is successfully installed. This phpmyadmin is actually used to access a my SQL database
3:21:09
and this my SQL database is used as back-end for WordPress. If you've landed on this video,
3:21:20
then it's definitely because you want to install a Kubernetescluster at your machine. Now, we all know how tough the installation process is hence this video on our YouTube channel.
3:21:29
My name is Walden and I'll be your host for today. So without wasting any time let me show you what are the various steps that we have to follow. Now. There are various steps
3:21:36
that we have to run both at the Masters and and the slave end and then a few commands only at the master sent to bring up the cluster and then one command which has to be run at
3:21:45
all the slave ends so that they can join the cluster. Okay. So let me get started by showing
3:21:51
you those commands on those installation steps, which have to be run commonly on both the Masters and and the slave and first of all, we have to update your repository. Okay, since
3:22:01
I am using Ubuntu To update my app to get repository. Okay, and after that we would
3:22:06
have to turn up this vapp space be the Masters end or the slaves and communities will not work if the swap space is on. Okay, we have to disable that so there are a couple of commands
3:22:14
for that and then the next part is you have to update the hostname the hosts file and
3:22:19
we have to set a static IP address for all the nodes in your cluster. Okay, we have to do that because at any point of time if your master or if your node in the cluster of fails,
3:22:28
then when they restart they should have the same IP address if you have a dynamic IP address and then if they restart because of a failure condition, then it will be a problem because
3:22:37
they are not be able to join the cluster because you'll have a different IP address. So that's all you have to do these things. All right, there are a couple of commands for that and
3:22:44
after that we have to install the openssh server and docker that is because Humanity's
3:22:49
requires the openssh functionality and it of course needs Docker because everything in kubernetes is containers, right? So we are going to make use of Docker containers.
3:22:57
So that's why we have to install these two components and finally we have to install Q barium. You're black and you have cereal now. These are the core components of your
3:23:06
Kubernetes. All right. So these are the various components that have to be installed on both your master and your slave and so let me first of all open up my VMS and then show you how
3:23:15
to get started now before I get started. Let me tell you one thing. You have a cluster you have a master and then you have slaves in that cluster, right? Your master should
3:23:24
always have better configurations than your slave. So for that reason, if you're using virtual machines on your host, then you have to ensure that your master has at least 2
3:23:32
GB of RAM and to core CPUs. Okay, and your slave has 2GB of RAM and at least one core
3:23:38
CPU. So these are the basic necessities for your master and slave machines on that note.
3:23:43
I think I can get started. So first of all, I'll bring up my virtual machine and go through these installation processes. So I hope everyone can see my screen here. This is my first VM
3:23:54
and what I'm going to do is I'm going to make this my master. Okay, so all the commands to install the various components are present with me in my notepad Okay, so I'm going to
3:24:04
use this for reference and then quickly execute these commands and show you how communities is installed. So first of all, we have to update our Advocate repository. Okay, but
3:24:13
before that, let's log in as s you okay, so I'm going to do a sudo OSU so that I can execute
3:24:18
all the following commands as pseudo user. Okay. So so to OSU there goes my root password
3:24:25
and now you can see the difference here right here. I was executing it as a normal user, but from here am a root user. So I'm going to execute all these commands as s you so
3:24:34
first of all Let's do an update. I'm going to copy this and paste it here apt-get update
3:24:41
update my Ubuntu repositories. All right, so it's going to take quite some time. So
3:24:48
just hold on till it's completed. Okay. So this is done. The next thing I have to do
3:24:56
is turn off my swap space. Okay. Now the command to disable my strap space is swap off space
3:25:03
flag a let me go back here and do the same. Okay swap off but flag. And now we have to
3:25:11
go to this FS tab. So this is a file called FS tap OK and we will have a line with the
3:25:17
entry of swap space because at any point of time if you have enabled swap space, then you will have a line over there. Now we have to disable that line. Okay, we can disable
3:25:25
that line by commenting out that line. So let me show you how that's done. I'm just using the Nano Editor to open this fstab file. Okay, so you can see this land right where
3:25:35
it says swap file. This is the one which after comment out. So just let me come down here and comment it out like this. Okay with the hash now, let me save this and exit. Now the
3:25:49
next thing after do is update my host name and my hosts file and then set a static IP
3:25:54
address. So let me get started by first updating the hostname. So for that I have to go to this file host name, which is in this /hc path. So I'm again using Nano for that. You
3:26:06
can see here. It's a director - virtualbox, right? So let me replace this and say okay Master as in Cuba not he's master. So let me save this and exit now if you want your
3:26:18
host name to reflect over here because right now it says root at the rate at Oracle virtualbox
3:26:23
the host name is does not look updated as yet and if you want it to be updated to k Master, then you have to first of all restart this VM or your system. If you're doing it
3:26:32
on a system, then you have to restart your system. And if you do it on a VM, you have to restart your VM. Okay, so let me restart my VM in some time. But before that there
3:26:40
are a few more commands, which I want to run and that is set a static IP address. Okay, so I'm going to copy this if conflict I'm going to run this config command Okay. So
3:26:49
right now my IP address is one ninety two dot one sixty eight dot 56.1 not one and the
3:26:55
next time when I turn on this machine, I do not want a different IP address. So to set this as a static IP address. I have a couple of commands. Let me execute that command first.
3:27:03
So you can see this interface is file. Right? So under SC / Network, we have a file called
3:27:09
interfaces. So this is where you define all your network interfaces. Now, let me enter this file and add the rules to make it static IP address as you can see here. The last three
3:27:20
lines are the ones which ensure that this machine will have a static IP address. These three lines are already there on my machine. Now if you want to set a static IP address
3:27:27
of your and then make sure that you have these things defined correctly. Okay. My IP address is not one not one. So I would just read in it like this. So let me just exit. So the
3:27:38
next thing that I have to do is go to the hosts file and update my IP address over there. Okay, so I'm going to copy this and go to my Etsy / hosts files now over here. You can
3:27:50
see that there is no entry. So after mention that this is Mike a master. So let me specify
3:27:55
my IP address first. This is my IP address and now we have to update the name of the host. So this host of - Kay Master so I'm just going to enter that and save this. Okay.
3:28:09
Now the thing that we have to do now is restart this machine. So let me just reset this machine
3:28:14
and get back to you in the meanwhile. Okay. So now that we are back on let me check if
3:28:19
my host name and hosts have all been updated. Yes. There you go. You can see here, right
3:28:25
it recorded k Master. So this means that my host name has been successfully updated we can also verify my IP address is the same let me do an if config and as you can see
3:28:35
my appearance has not changed. All right, so this is good. Now. This is what we wanted.
3:28:40
Now. Let's continue with our installation process. Let me clear the screen and go back to the notepad and execute those commands which first of all install my openssh server.
3:28:51
So this is going to be the command to do that and we have to execute this as pseudo user.
3:28:56
Right so sudo apt-get install openssh server. That's the command. Okay, let me say yes and
3:29:05
enter. Okay. So my SSH server would have been installed by now that makes clear the screen
3:29:16
and install Docker. But before I run this command which installs Dhaka and it will update
3:29:23
my repository. Okay, so let me log in as pseudo first fault. Okay, so do is use the command
3:29:29
and okay I have logged in as root user. Now. The next thing is update my repository so
3:29:34
after do an update update. Now again, this is going to take some more time. So just hold
3:29:39
on till then. Okay, this is also done. Now we can straight away run the command to install
3:29:45
Docker. Now. This is the command to install Docker. Okay from the aggregate repository.
3:29:50
I'm installing Docker and this specifying - why because - why is my flag? So whenever
3:29:55
there's a problem that comes in while installation saying do you want to install it? Yes or no, then when you specify - why then it means that by default it will accept why as a parameter.
3:30:05
Okay, so that is the only constant behind - why so again inserting Dockers going to take a few more minutes. Just hang on till then. Okay, great. So Docker is also installed.
3:30:23
Okay. So let me go back to the notepad. So to establish the Kubernetes environment the three main components that Kubernetes is made up of RQ barium cubelet and Cube cereal, but
3:30:34
just before I install these three components there are a few things I have to do they are like installing curl and then downloading certain packages from this URL and then running
3:30:44
an update. Okay. So let me execute these commands one after the other first and then install Kubernetes. So let's first of all start with this command where I'm installing curl. Okay.
3:31:00
Now the next command is basically downloading these packages using curl and curl is basically
3:31:05
this tool using which you can download these packages using your command line. Okay. So this is basically a web URL right so I can access whatever packages are there on this
3:31:15
web URL and download them using curl. So that's why I've installed car in the first place.
3:31:20
So when executing this command I get this which is perfect now when I go back then there
3:31:26
is this which we have to execute. Okay, let me hit enter and I'm done and finally I have
3:31:33
to update my app get repository and common for that. Is this one apt-get update? Okay,
3:31:42
great. So all the presentation steps are also done. Now. I can say to me set up my Kubernetes
3:31:48
environment by executing this command. So in the same command I say install cubelet you barium and Cube CDL and to just avoid the yes prompt am specifying the - wife lat.
3:31:58
Okay, which would by default take yes as a parameter. And of course I'm taking it from
3:32:04
the aggregate repository, right? So, let me just copy this and paste it here. Give it
3:32:13
a few more minutes guys because in Sony kubernetes is going to take some time. Okay bingo. So
3:32:24
my humanities has also been installed successfully. Okay. Let me conclude the setting up of this
3:32:29
cube root is environment by updating the communities configuration. Okay. So there's this file.
3:32:35
You're right Q beta m dot f so, this is the cube ADM is the one that's going to let me administer my Kubernetes. So after go to this file and add this one line, okay, so let me
3:32:44
first of all open up this file using my Nano editor. So let me again log in as soda OSU
3:32:50
and this is the command. So as you can see we have these set of environment variables.
3:32:55
So right after the last environment variable have to add this one line and that line is this one All right. Now, let me just save this and exit brilliant. So with that the
3:33:14
components which have to be installed at both the master and the slave come to an end. Now. What I will do next is run certain commands only at the master to bring up the cluster
3:33:23
and then run this one command at all my slaves to join the cluster. Alright. So before I start doing anything more over here, let me also tell you that I have already done the
3:33:32
same steps on my node. So if you are doing it at your end, then whatever steps you've done so far run the same set of commands on another VM because that will be acting as
3:33:40
your node v m but in my case, I have already done that just to save some time, you know, so let me show you that this is Mike a master of and right here. I have my K node, which
3:33:52
is nothing but my communities node and I've basically run the same set of commands in both the places, but there is one thing which I have to ensure before I bring up the cluster
3:34:01
and that is and short the network IP addresses and the host name and the hosts. So this is
3:34:06
my communities node, so All I'm going to do what chat and say /hc posts. Okay. Now over
3:34:13
here. I have the IP address of my Cube ladies node. That is this very machine and a specify
3:34:19
the name of the host. However, the name of my Kubernetes Master host is not present and neither is the IP address. So that is one manual entry we have to do if you remember
3:34:27
let me go to my master on check. What is the IP address? Yes. So the IP address over here is one ninety two dot one sixty eight dot 56.1 not one. So this is the IP address. I
3:34:36
have to add in my node end. So after modify this file for that, all right, but before
3:34:42
that you have to also ensure that this is a static IP address. So let me ensure that the IP address of my cluster node does not change. So the first thing we have to do before
3:34:50
anything is check. What is the current IP address and for my node the IP addresses one?
3:34:56
Ninety two dot one sixty eight dot 56.1 not to okay now, let me run this command. Network
3:35:05
interfaces. Okay. So as you can see here, this is already set to be a static IP address.
3:35:10
We have to ensure that these same lines are there in your machine if you wanted to be a static IP address since it's already there for me. I'm not going to make any change but
3:35:18
rather I'm going to go and check. What's my host name? I mean the whole same should anyways give the same thing because right now it's keynote. So that's what it's gonna reflect.
3:35:25
But anyways, let me just show it to you. Okay, so my host name is keynote brilliant. So this
3:35:31
means that that is one thing which I have to change and that is nothing but adding the particular entry for my master. So let me first clear the screen and then using my Nano
3:35:42
editor. In fact, I'll have to run it as pseudo. So as a pseudo user I'm going to open my Nano
3:35:47
editor and edit my hosts file. Okay, so here let me just add the IP address of my master.
3:35:57
So what exactly is the IP address of the master? Yes, this is my k Master. So I'm just going
3:36:02
to copy this IP address come back here and paste the IP address and I'm gonna say the
3:36:08
name of that particular host is came master. And now let me save this perfect. Now, what
3:36:14
I have to do now is go back to my master and ensure that the hosts file here has raised about my slave. I'll clear the screen and first I'll open up my hosts file. So on my
3:36:27
masters and the only entry is there for the master. So I have to write another line where that specify the IP address or my slave and then add the name of that particular host.
3:36:35
That is K node. And again, let me use the Nano editor for this purpose. So I'm going to say sudo Nano /hc posts. Okay, so I'm going to come here say one ninety two dot one sixty
3:36:48
eight dot 56.1 not to and then say Okay node. All right. Now all the entries are perfect.
3:36:57
I'm going to save this and Exit so the hosts file on both my master and my slave has been
3:37:04
updated the static IP address for both my master and the slave has been updated and also the kubernetes environment has been established. Okay. Now before we go further and bring up
3:37:13
the cluster, let me do a restart because I've updated my hosts file. Okay. So let me restart both of my master and my slave VMS and if you're doing it at your and then you have
3:37:22
to do the very same, okay, so let's say restart and similarly. Let me go to my load here and
3:37:30
do a restart. Okay, so I've just logged in and now that my systems are restarted. I can
3:37:44
go ahead and execute the commands at only the Masters and to bring up the cluster. Okay.
3:37:54
So first of all, let me go through the steps which are needed to be run on the Masters end. So add the master of first of all, we have to run a couple of commands to initiate
3:38:03
the Kubernetes cluster and then we have to install a pod Network. We have to install a pod Network because all my containers inside a single port will have to communicate over
3:38:12
a network Port is nothing but a network of containers. So there are various container networks, which I can use so I can use the Calico poor Network. I can use a flannel poor
3:38:21
Network or I can use anyone you can see the entire list in the communities documentation.
3:38:27
And in this session, I am going to use the calcio network. Okay, so that's pretty simple and straightforward and that's what I'm going to show you next. So once you've set up the
3:38:34
Pod Network, you can straight away bring up the communities dashboard and remember that
3:38:39
you have to set up the communities dashboard and bring this up before your notes join the cluster because in this version of Cuba Nettie's if you first get your notes to join the cluster
3:38:48
and after that if you try bringing the kubernetes dashboard up then your communities dashboard gets hosted on the And you don't want that to happen, right? If you want the dashboard
3:38:57
to come up at your Masters and you have to bring up the dashboard before your nodes join the cluster. So these would be the three commands that we will have to run initiating the cluster
3:39:05
of inserting the poor Network and then setting up the Kubernetes dashboard. So let me go to my master and execute commands for each of these processes. So I suppose this is my
3:39:14
master. And yes, this is my k Master. So so first of all to bring up the cluster we have
3:39:21
to execute this command. Let me copy this and over here. We have to replace the IP addresses.
3:39:28
So the IP address of my master, right? So this machine after specified that IP address
3:39:33
over here because this is where the other IP addresses can come and join This is the
3:39:39
master right? So I'm just seeing a pi server advertise the address 56.1 not one so that
3:39:46
all the other nodes can come and join the cluster on this IP address and along with
3:39:51
this. I have to also specify the port Network since I've chosen the Calico poor Network. There is a network range which my Calico poor Network uses so a cni basically stands for
3:40:01
container network interface. If I'm using the Calico poor Network then after use this network range, but in case of few want to use a flannel poor Network, then you can use
3:40:11
this network range. Okay, so let me just copy this one and paste it. All right. So the command
3:40:18
is pseudo Cube ADM in it for Network followed by the IP address from where the other nodes
3:40:24
will have to join. So let's go ahead and enter So since you're doing for the first time give
3:40:31
it a few minutes because kubernetes take some time to install. Just hold on until that happens.
3:40:39
All right. Okay, great. Now it says that your kubernetes master has initialized successfully
3:40:44
that's good news. And it also says that to start using your cluster. We need to run the following commands as a regular user. Okay, so we'll note that log out as a pseudo user
3:40:53
and as a regular user executes these three commands and also if I have to deploy a poor
3:40:59
Network then after run a command, okay. So this is that command which I have to run to
3:41:04
bring up my poor Network. So I'll be basically cloning the yamen file which is present over here. So before I get to all these things let me show you that we have a cube joint
3:41:14
command which is generated. Right? So this is generated in my masters and and I have to execute this command at my node to join the cluster, but that would be the last step
3:41:22
because like I said earlier these three commands will have to be first executed then after bring up my poor Network then after bring up my dashboard and then I have to get my
3:41:30
notes to join the class are using this command. So for my reference, I'm just going to copy this command and store it somewhere else. Okay. So right under this Let me just do this
3:41:42
command for later reference. And in the meanwhile, let me go ahead and execute all these commands
3:41:48
one after the other. These are as per Cube entities instructions, right? Yes. I would
3:41:54
like to rewrite it. And then okay. Now that I've done with this let me first of all bring
3:42:02
up my pod Network. Okay. Now the command to bring up my pod network is this Perfect. So
3:42:09
my calcio pod has been created now I can verify if my poor has been created by running the
3:42:20
cube CDL get pods command. Okay. So this is my Cube serial get pods. I can say - oh wide
3:42:30
all namespaces. Okay by specifying the - oh wide and all namespaces. I'll basically get
3:42:37
all the pods ever deployed. Even the default pose with get deployed when the Kubernetes cluster initiates. So basically the kubernetes cluster is initiated and deployed along with
3:42:45
a few default ones especially for your poor Network. There is one part which is hosted
3:42:50
for your cluster. There's one pod For Your Rocker board itself, and then there's one pot which is deployed for your dashboard and whatnot. So this is the entire list, right?
3:42:58
So if you're calcio for your SED, there's one pod for your Cube controller. There's a pot and we have various spots like this right for your master and you're a pi server
3:43:09
and many things. So these are the default deployments that you get So anyways, as you can see the default deployments are all healthy because it says the status is all running
3:43:18
and everything is basically you're running in the cube system namespace. All right, and it's all running on my k Master That's Mike unit is master. So the next thing that I have
3:43:27
to do is bring up the dashboard before I can get my notes to join. Okay, so I'll go to
3:43:34
the notepad and copy the command to bring up my dashboard. So copy and paste so great.
3:43:41
This is my communities dashboard, which as you know, basically this part has come up now. If I execute this same Cube serial, get pods command, then you can see that I've got
3:43:50
one more pot which is deployed for my dashboard basically. So last time this was not there because I had not deployed my dashboard at that time, right? So I don't need to plug
3:43:58
my iPod Network and whatnot and the other things right? So I've deployed it and the continuous creating so in probably a few more seconds, this would also be running anyways
3:44:07
in the meanwhile, what we can do is we can work on the other things which are needed to bring up the dashboard the first fall. Abel your proxy and get it to be hope for
3:44:15
web server. There's a skip serial proxy command Okay. So with this your service would be starting
3:44:20
to be served on this particular port number. Okay, localhost port number eight thousand one of my master. Okay, not from the nodes. So if I could just go to my Firefox and go
3:44:30
to local Lowe's 8001 then my dad would be up and running over there. So basically my
3:44:40
dashboard is being served on this particular port number. But if I want to actually get my dashboard which shows my deployments and on my services then that's a different URL.
3:44:49
Okay. So yeah as you can see here. Localized 8,000 / API slash V 1 right this entire URL
3:44:58
is which is going to lead me to my dashboard. But at this point of time I cannot log into my dashboard because it's prompting me for a token and I do not have a token because
3:45:06
I have not done any cluster old binding and I have not mentioned that I am the admin of this particular dashboard. So to enable all those things there are a few more commands
3:45:13
that we have to execute starting with creating a service account for your dashboard. So this is the command to create your service account. So go back to the terminal and probably a
3:45:22
new terminal window execute this command Okay. So with this you're creating a service account
3:45:27
for your dashboard, and after that you have to do the cluster roll binding for your newly
3:45:33
created service account. Okay. So the dashboard has been created and default namespace as
3:45:38
per this. Okay, and here I'm saying that my dashboard is going to be for admin and I'm doing the cross the road binding. Okay, and now that this is created I can straight away
3:45:47
get the token because if you remember it's asking me for a token to login, right? So even though I am the admin now have a not be able to log in without D token, so to generate
3:45:56
the token I have to again run this command Cube City will get secret key. Okay, so I'm
3:46:02
going to copy this and paste it here. So this is the token or this is the key that basically
3:46:09
needs to be used. So let me copy this entire token and paste it over here. So let me just
3:46:23
save this and yeah, now you can see that my community's cluster has been set up and I
3:46:28
can see the same thing from the dashboard over here. So basically by default the communities service is deployed. Right? So this is what you can see but I've just brought the dashboard
3:46:37
now and the cluster is not ready under my nodes join in. So let's go to the final part of this demonstration. We're in I'll ask my slaves to join the cluster. So you remember
3:46:47
I copied the joint cluster which was generated at my Master's end in my notepad. So I'm going to copy that and execute that at the slaves and to join the cluster. Okay. So let me first
3:46:55
of all go to my notepad and yeah, this is the joint command which I had copyright. So
3:47:01
I'm going to copy this and now I'm going to go to my node. Yep. So, let me just paste
3:47:07
this and let's see what happens. Let me just run this command as pseudo. It's a perfect.
3:47:15
I've got the message that I have successfully established connection with the API server on this particular IP address and port number, right? So this means that my node has joined
3:47:22
the cluster we can verify that from the dashboard itself. So if I go back to my dashboard, which
3:47:28
is hosted on my master master Zen, so I have an option here as nodes. If I click on this
3:47:34
then I will get the details about my nodes over here. So earlier I only have the keymaster but now I have both the key master and the K node give it a few more seconds until my
3:47:43
note comes up. I can also verify the same from my terminal. So if I go to my terminal
3:47:48
here and if I run the command Cube CTL get nodes then if we give me the details about
3:47:54
the nodes which are there in my cluster soak a master is one that is already there in the cluster but cannot however will take some more time to join my cluster. Alright, so
3:48:04
that's it guys. So that is about my deployment and that's how you deploy a community's cluster. So from here on you can do whatever deployment you want. Whatever you want to deploy you
3:48:12
can deploy it. Easily very effectively either from the dashboard or from the CLI and there are various other video tutorials of ours, which you can refer to to see how a deployment
3:48:21
is made on Kubernetes. So I would request you to go to the other videos and see how deployment is made and I would like to conclude this video on that note. If you're a devops
3:48:35
guy, then you would have definitely heard of communities but I don't think the devops world knows enough of what exactly kubernetes is and where it's used. And that's why we
3:48:45
had Erica of come up with this video on what is communities. My name is Walden and I'll
3:48:50
be representing a tárrega in this video. And as you can see from the screen, these will be the topics that we'll be covering in today's session as first start off by talking
3:48:58
about what is the need for communities? And after that I will talk about what exactly
3:49:04
it is and what it's not and I will do this because there are a lot of myths surrounding communities and there's a lot of confusion people have misunderstood communities to be
3:49:12
a containerization platform. Well, it's not okay. So I will explain what exactly it is
3:49:17
over here. And then after that I will talk about how exactly communities works. I will talk about the architecture and all the related things. And after that I will give you a use
3:49:26
case. I will tell you how communities was used at Pokemon go and how it helped Pokemon
3:49:31
go become one of the best games of the year 2017 And finally at the end of the video, you will get a demonstration of how to do deployment with Kubernetes. Okay. So I think
3:49:41
the agenda is pretty clear you I think we can get started with our first topic then now first topic is all about. Why do we need Kubernetes? Okay now to understand why do
3:49:51
we need Cuba Nettie's let's understand what are the benefits and drawbacks of containers. Now, first of all containers are good. They are amazingly good right any container for
3:50:01
that matter of fact a Linux container or a Docker container or even a rocket Continuum, right? They all do one thing they package your application and isolated from everything
3:50:10
else, right? They isolate the application from the host mainly and this makes the container of fast reliable efficient light weight and scalable now hold the thought yes containers
3:50:21
are scalable, but then there's a problem that comes with that and this is what is the resultant
3:50:27
of the need for Kubernetes even though continues are scalable. They are not very easily scalable.
3:50:32
Okay, so let's look at it this way. You have one container you might want to probably scale it up to to contain over three containers. Will it's possible right? It's going to take
3:50:41
a little bit of manual effort. But yeah, you can scale it up. You know what I have a problem. But then look at a real world scenario where you might want to scale up to like 5200 containers
3:50:50
then in that case what happens I mean after scaling up, would you do you have to manage
3:50:56
those containers? Right? We have to make sure that they are all working. They are all active and they're all talking to each other because if they're not talking to each other then
3:51:03
there's no point of scaling up itself because in that case the server's would not be able to handle the roads if they're not able to talk to each other correct. So it's really
3:51:12
important that they are manageable when they are scaled up and now let's talk about this
3:51:17
point. Is it really tough to scale up containers? Well the answer for that might be know. It might not be tough. It's pretty easy to scale up containers, but the problem is what happens
3:51:26
after that. Okay, once you scale up containers, you will have a lot of problems. Like I told you the containers first for should have to communicate with each other because Not so
3:51:35
many in number and they work together to basically host the service right the application and
3:51:40
if they are not working together and talking together then the application is not hosted and scaling up is a waste so that's the number one reason and the next is that the containers
3:51:50
have to be deployed appropriately and they have to also be managed they have to be deployed appropriately because you cannot have the containers deployed in this random places.
3:51:59
You have to deploy them in the right places. You cannot have one container in one particular cloud and the other one somewhere else. So that would have a lot of complications. Well,
3:52:07
of course it's possible. But yeah, it would lead to a lot of complications internally you want to avoid all that so you have to have one place where everything is deployed
3:52:14
appropriately and you have to make sure that the IP addresses are set everywhere and the port numbers are open for the containers to talk to each other and all these things. Right.
3:52:22
So these are the two other points the next Point our the next problem with scaling up is that auto scaling is never a functionality over here? Okay, and this is one of the things
3:52:32
which is the biggest benefit with Cuba Nets. The problem technically is there is no Auto scaling functionality. Okay, there's no concept of that at all. And you may ask at this point
3:52:41
of time. Why do we even need auto-scaling? Okay, so let me explain the need for auto scaling with an example. So let's say that you are an e-commerce portal. Okay, something
3:52:50
like an Amazon or a flip card and let's say that you have decent amount of traffic on the weekdays, but on the weekends, you have a spike in traffic. Probably you have like
3:52:59
4X or 5x the usual traffic and in that case what happens is maybe your servers are good
3:53:05
enough to handle the requests coming in on weekdays, right? But the requests that come on the weekends right from the increased traffic that cannot be serviced by our servers right?
3:53:15
Maybe it's too much for your servers to handle the load and maybe in the short term. It's fine maybe once or twice you can survive but they will definitely come a time when your
3:53:24
server will start crashing because it cannot handle that many requests per second or permanent. And if you want to really avoid this problem what you do you have to scale up and now would
3:53:34
you Lead keep scaling up every weekend and scaling down after the weekend, right? I mean
3:53:39
technically is it possible? Will you be buying your servers and then setting it up and every Friday would you be again by new Star Wars setting up your infrastructure? And then the
3:53:47
moment your weekday starts. Would you just destroy all your servers? Whatever you build. Would that would you be doing? No, right? Obviously, that's a pretty tedious task. So
3:53:56
that's where something like Cuban Aires comes in and what communities does is it keeps analyzing your traffic and the load that's being used by the container and as and when the traffic
3:54:05
is are reaching the threshold auto-scaling happens where if the server's have a lot of traffic and if it needs no more such servers for handling requests, then it starts killing
3:54:14
of the containers on its own. There is no manual intervention needed at all. So that's one benefit with Kubernetes and one traditional problem that we have with scaling up of containers.
3:54:23
Okay, and then yeah, the one last problem that we have is the distribution of traffic that is still challenging without something that can manage your containers. I mean you
3:54:31
have so many containers, but how will the traffic be distributed? Load balancing. How does that happen? You just have containers right? You have 50 containers. How does the
3:54:38
load balancing happen? So all these are questions. We should really consider because containerization is all good and cool. It was much better than VMS. Yes containerization. It was basically
3:54:48
a concept which was sold on the basis of for scaling up. Right? We said that vm's cannot be scaled up easily. So we told use containers and with containers you can easily scale up.
3:54:57
So that was the whole reason we basically sold containers with the tagline of scaling up. But in today's world, our demand is ever more that even the regular containers cannot
3:55:07
be enough so scaling up a so much or and so detailed that we need something else to manage
3:55:12
your containers, correct. Do we agree that we need something right? And that is exactly what Cuban Aries is. So Kubernetes is a container management tool. All right. So this is open
3:55:22
source and this basically automate your container deployment your continue scaling and descaling
3:55:28
and your continual load balancing the benefit with this is that it works brilliantly with all the cloud vendors with all A big cloud vendors or your hybrid Cloud vendors and it
3:55:37
also works on from Isis. So that is one big selling point of kubernetes. Right? And if
3:55:42
I should give more information about communities then let me tell you that this was a Google developed product. Okay. It's basically a brainchild of Google and that pretty much
3:55:51
is the end of the story for every other competitor out there because the community that Google brings in along with it is going to be huge or basically the Head Start that communities
3:55:59
would get because of being a Google brain child is humongous. And that is one of the reasons why kubernetes is one of the best container management tools in the market period
3:56:09
and given that communities is a Google product. They have written the whole product on go
3:56:14
language. And of course now Google has contributed this whole communities project to the CN CF
3:56:19
which is nothing but the cloud native Computing Foundation or simply Cloud native Foundation, right? You can just call them either that and they have donated their open source project
3:56:27
to them. And if I have to just summarize what Humanities is you can just think of it like this it can group like a number. Containers into one logical unit for managing and deploying
3:56:38
an application or a particular service. So that's a very simple definition of what communities
3:56:43
is. It can be easily used for deploying your application. Of course. It's going to be Docker
3:56:48
containers which you will be deploying. But since you will be using a lot of Docker containers as part of your production, you will also have to use Kubernetes which will be managing
3:56:56
your multiple Docker containers, right? So this is the role it plays in terms of deployment
3:57:01
and scaling upskilling down is primarily the game of communities from your existing architecture.
3:57:06
It can scale up to any number you want. It can scale down anytime and the best part is the scaling can also be set to be automatic. Like I just explained some time back right
3:57:16
you can make communities communities would analyze the traffic and then figure out if the scaling up needs to be done or the Skilling noun can be done and all those things. And
3:57:24
of course the most important part load balancing, right? I mean what good is your container or group of containers if load balancing cannot be enabled right? So communities does that
3:57:33
also and these Some of the points on based on which kubernetes is built. So I'm pretty sure you have got a good understanding of what communities is by now Write a brief idea
3:57:42
at least so moving forward. Let's look at the features of Kubernetes Okay. So we've
3:57:47
seen what exactly kubernetes is how would users Docker containers or other connector or containers in general? But now let's see some of the selling points of humanities or
3:57:56
why it's a must for you. Let's start off with automatic bin packing when we say automatic
3:58:01
bin packing. It's basically that communities packages your application and it automatically places containers based on their requirements and the resources that are available. So that's
3:58:12
the number one advantage the second thing service Discovery and load balancing. There is no need to worry. I mean if you know, if you're if you're going to use Kubernetes then
3:58:20
you don't have to worry about networking and communication because communities will just automatically assign containers their own IP addresses and probably a single DNS name
3:58:30
for a set of containers which are performing a logical operation. And of course, there will be loads. Dancing across them so you don't have to worry about all these things.
3:58:37
So that's why we say that there is service Discovery and load balancing with kubernetes
3:58:42
and the third feature of kubernetes. Is that storage orchestration with communities, you can automatically Mount your storage system of your choice. You can choose that to be
3:58:51
either a local storage or maybe on a public Cloud providers such as a gcp or AWS or even
3:58:57
a network storage system such as NFS or other things, right? So that was the feature number
3:59:02
three now, please remember for self-healing now, this is one of my favorite parts of Humanity's
3:59:07
actually not just communities even with respect to dr. Swamp. I really like this part of self-healing
3:59:13
what self feeling is all about is that whenever kubernetes realizes that one of your containers has failed then it will restart that container on its own right and we create a new container
3:59:21
in place of this crashed one and in case you're node itself fails, then what you bilities would do in that case has whatever containers were running in that failed node. Those containers
3:59:30
would be started in another node, right? Of course, you would have to have more In that cluster if there's another node in the cluster definitely room would be made for this field
3:59:38
container to start a service. So that happens so the next feature is batch execution. So
3:59:45
when we say batch execution, it's that along with Services Humanities can also manage your batch and CIA work loads, which is more of a devops roll. Right? So as part of your CIA
3:59:54
workloads communities can replace your containers which fail and it can restart and restore the original state that is what is possible with kubernetes and secret and configuration
4:00:04
management. That is another big feature with kubernetes. And that is the concept of where you can deploy and update your secrets and application configuration without having to
4:00:13
rebuild your entire image and without having to expose your secrets in your stack configuration or anything, right? So if you want to deploy an update your secrets only that can be done.
4:00:23
So it's not available with all the other tools, right? So communities is one that does that you don't have to restart everything and rebuild your entire container. That's one benefit
4:00:32
and then we have Horizonte scaling which of course you will My that of already you can scale your applications up and down easily with a simple command. The simple command
4:00:39
can be run on the CLI or you can easily do it on your GUI, which is your dashboard. Your
4:00:45
community is dashboard or Auto scaling is possible Right based on the CPU usage. Your
4:00:51
containers would automatically be scaled up or scaled down. So that's one more feature
4:00:56
and the fun feature that we have is automatic rollbacks and roll outs now Kubernetes what it does is whenever there's an update your application, which you want to release communities
4:01:05
progressively rolls out these changes and updates to the application or its complications by this ensuring that one instance after the other is send these updates and it makes sure
4:01:14
that not all instances are updated at the same time thus ensuring that yes, there is high availability. And even if something goes wrong, then the Cuban ladies will roll back
4:01:22
that change for you. So all these things are enabled and these are the features with Humanities. So if you're really considering a solution for your containers from managing your containers,
4:01:32
then communities should be your solution. To that should be your answer. So that is about the various features of Kubernetes now moving forward here. Let's talk about a few
4:01:42
of the myths surrounding communities and we are doing this because a lot of people have confusion with respect to what exactly it is. So people have this misunderstanding that
4:01:50
communities is like docker which is a continuation platform, right? That's what people think and that is not true. So this kind of a confusion is what I intend to solve in the upcoming
4:02:00
slides. I will not talk about what exactly kubernetes is and what communities is not
4:02:06
let me start with what it's not now. The first thing is that communities is not to be compared with Docker because it's not the right set of parameters which are comparing them against
4:02:15
Docker is a containerization platform and a Kubernetes is a container management platform,
4:02:21
which means that once you have containerized your application with the help of Docker containers or Linux containers, and when you are scaling up these containers to a big number like 50
4:02:29
or a hundred that's where communities would come in when you have like multiple containers which need to be managed. That's where communities can comment and effectively do it. You can
4:02:37
specify the configurations and communities would make sure that at all times these conditions are satisfied. So that's what community is you can tell in your configurations that at
4:02:46
all time. I want these many containers running. I want these many pods running and so many other needs right you can specify much more than that and whatever you do at all times
4:02:56
your cluster master or your communities Master would ensure that this condition is satisfied. So that is what exactly Community is, but that does not mean that talker does not solve
4:03:05
this purpose. So Docker also have their own plug-in. I wouldn't call it a plug-in. It's actually another tool of there's so there's something called as Docker swamp and Dockers
4:03:14
warm does a similar thing it does contain a management like Mass container management
4:03:19
so similar to what communities does when you have like 50 to 100 containers Docker swarm would help you in managing those containers, but if you look at who is prevailing in the
4:03:27
market today, I would say it's communities because communities came in first and the moment they came in they were backed by Google They had this huge Community with they just
4:03:36
swept along with them. So they have like hardly left any in any market for Docker and for dr. Stromm, but that does not mean that they are better than Docker because they are at
4:03:45
the end of the day using Docker. So communities is only as good as what Docker is if there are no Docker containers, then there's no need for communities in the first place. So
4:03:53
Cuban adiz and Docker they go hand in hand. Okay. So that is the point you have to note and I think that would also explain the point that kubernetes is not for continue Rising
4:04:02
applications. Right? And the last thing is that Kubernetes is not for applications with a simple architecture. Okay, if your architecture review your applications architecture is pretty
4:04:12
complex, then you can probably use Cuban IDs to uncomplicate that architecture. Okay, but if you're having a very simple one in the first place then using kubernetes would not
4:04:20
serve you any good and it could probably make it a little more complicated than what it already is, right. So this is what kubernetes is not now speaking of what exactly kubernetes
4:04:31
is. The first point is Kubernetes is robust. And reliable now when I see a robust and reliable,
4:04:36
I'm referring to the fact that the cluster that is created the communities cluster, right? This is very strong. It's very rigid and it's not going to be broken easily. The reason
4:04:46
being the configurations which is specified right at any point of time if any container fails a new container would come up right or that whole container would be restarted.
4:04:54
One of the things will definitely happen. If your node fails then the containers which are running in a particular node. They would start running in a different node, right?
4:05:03
So that's why it's reliable and it's strong because at any point of time your cluster would be at full force. And at any time if it's not happening, then you would be able
4:05:11
to see that something's wrong and you have to troubleshoot your node and then everything would be fine. So Cuban, it's would do everything possible and it pretty much does everything
4:05:19
possible to let us know that the problem is not at its end and it's giving the exact result
4:05:25
that we want. That's what communities are doing. And the next thing is that Humanity's
4:05:30
actually is the best solution for scaling up containers at least in today's. I could because the two biggest players in this market are radhika swamp and Humanities and Docker
4:05:40
swarm is not really the better one here because they came in a little late even though doctor
4:05:45
was there from the beginning communities came after that but doc a swarm which we are talking about came in somewhere around 2016 or 2017. Right? But communities came somewhere around
4:05:55
2015 and they had a very good Head Start. They were the first ones to do this and they're
4:06:00
backing by Google is just icing on the cake because whatever problem you have with respect to Containers, if you just go up and if you put your error there then you will have a
4:06:09
lot of people on github.com and get up queries and then on stack overflow will be resolving
4:06:14
those errors, right? So that's the kind of Market they have so it's back be a really huge Community. That's what kubernetes is and to conclude this slide Humanities is a
4:06:24
container orchestration platform and nothing else. All right. So I think these two slides would have given you more information and more clarity with respect to what kubernetes
4:06:34
is. And how different it is from docker and docker swamp, right? So now moving on let's
4:06:39
go to the next topic where we will compare Humanities with DACA swamp and we are comparing with Docker swamp because we cannot compare Docker and Kubernetes head on. Okay, so that
4:06:50
is what you have to understand if you are this person over here if you are Sam who is wondering which is the right comparison then let me reassure you that the difference can
4:06:58
only be between Humanities and doctors Mom. Okay. So let's go ahead and see what the difference
4:07:04
is. Actually. Let's start off with your installation and configuration. Okay. So that's the first parameter will use to compare these two and over here doc a swarm comes out on top because
4:07:14
Dockers little easier you have around two or three commands which will help you have your cluster up and running that includes the node joining the cluster, right? But with
4:07:22
kubernetes it's way more complicated than talking swamp, right? So you have like close to ten to eleven commands, which you have to execute and then there's a certain pattern
4:07:29
you have to follow to ensure that there are no errors, right? Yes, and that's why I'm
4:07:34
consuming and that's why it's complicated. But once your cluster is ready that time kubernetes
4:07:40
is the winner because the flexibility the rigidness and the robustness that communities gives you cannot be offered by dr. Swamp. Yes, dr. Storm is faster, but yes not as good
4:07:49
as communities when it comes to your actual working and speaking of the GUI. Once you
4:07:55
have set up your cluster or you can use a GOI with communities for deploying your applications. Right? So you don't need to always use your CLI. You have a dashboard which comes up and
4:08:04
the dashboard. If you give it admin privileges, then you can use it. You can deploy your application from the dashboard itself everything just drag-and-drop click functionality right with
4:08:13
just click functionality. You can do that. The same is not the case with Docker swarm. You have no GUI in Dhaka swamp Okay. So doc Islam is not the winner over here. It's Kubernetes
4:08:24
and he is going to the third parameter scalability. So people again have a bad misconception that
4:08:30
communities is better it is the solution for scaling up. And it is better and faster than
4:08:35
dr. Stromm. Well, it could be better but yes, it's not faster than doctors warm. Even if you want to scale up right? There is a report where I recently read that the scaling up
4:08:44
in Dhaka swarm is almost five times faster than the scaling up with Kubernetes. So that is the difference. But yes, once you are scaling up is done after that your cluster strength
4:08:54
with kubernetes is going to be much stronger than your doctor swamp plus the strength. That's again because of the various configurations. That should have been specified by then. That
4:09:02
is the thing now moving on to the next parameter we have is load balancing requires manual
4:09:07
service configuration. Okay. This is in case of kubernetes and yes, this could be shortfall.
4:09:13
But with dr. Storm there is inbuilt load balancing techniques, which you don't need to worry about. Okay, even the load balancing which requires manual effort in case of communities
4:09:21
is not do much there are times when you have to manually specify what are your configuration you have to make a few changes but yes, it's not as much as what you thinking and speaking
4:09:30
of updates and rollbacks. What communities does is it does the Scheduling to maintain the services while updating. Okay. Yeah, that's very similar to how it works of darkness form
4:09:40
wherein you have like Progressive updates and service Health monitoring happens throughout the update, but the difference is when something goes wrong Humanity's goes that extra mile
4:09:49
of doing a roll back and putting you back to the previous state right before the update was launched. So that is the thing with kubernetes and the next parameter. We are comparing those
4:09:57
two upon is data volumes. So data volumes in Cuba nattie's can be shared with other
4:10:04
containers, but only within the same pod, so we have a concept called pods in communities.
4:10:09
Okay, now board is nothing but something which groups related containers right a logical
4:10:14
grouping of containers together. So that is a pot and whichever containers are there inside this pod. They can have a shared volume. Okay, like storage volume, but in case of doctors
4:10:24
from you don't have the concept of poor at all. So the shared volumes can be between any other container. There is no restriction with respect to that and dr. Swann and then
4:10:32
finally we have this All the logging and monitoring. So when it comes to logging and monitoring
4:10:38
Humanities provides inbuilt tools for this purpose. Okay, but with dr. Storm you have to install third-party tools if you want to do logging and monitoring so that is the fall
4:10:46
backward. Dr. Swann because logging is really important one because you will know what the problem is. You'll know which card in a failed what happened there is exactly the error,
4:10:55
right? So logs would help you give that answer and monitoring is important because you have
4:11:00
to always keep a check on your nodes, right? So as the master of the cluster it's very important that there's monitoring and that's where our communities has a slight advantage
4:11:09
over doc a swarm. Okay, but before I finish this topic there is this one slide. I want
4:11:15
to show you which is about the statistics. So this stat I picked it up from this Platform
4:11:21
9, which is nothing but a company that writes about tech. Okay and what they've said is that the number of news articles there were produced right in that one particular year
4:11:30
had 90% of those covered on Kubernetes compared to the 10 percent. It on Docker swamp amazing, right? That's a big difference. That means for every one blog written or for everyone
4:11:40
article written on Docker swamp. There are nine different articles written on humanities and similarly for web searches for web searches kubernetes is 90 percent compared to Dhaka
4:11:49
swarms 10% and Publications GitHub Stars. The number of commits on GitHub. All these
4:11:54
things are clearly one vacuum energy is everywhere. So communities is the one that's dominating this market and that's pretty visible from this stat also, right? So I think that pretty
4:12:05
much brings an end to this particular topic now moving forward. Let me show you a use
4:12:10
case. Let me talk about how this game this amazing game called Pokemon go was powered
4:12:15
with the help of communities. I'm pretty sure you all know what it is, right? You guys know Pokemon go. It's the very famous game and it was actually the best game of the year
4:12:23
2017 and the main reason for that being the best is because of kubernetes and let me tell you why but before I tell you why there are few things, which I want to just talk about
4:12:31
I'll give you an overview of Pokemon goers and let me talk about a few key Stacks. So
4:12:37
Pokemon go is an augmented reality game developed by Niantic for your Android and for iOS devices.
4:12:44
Okay, and those key stats read that they've had like 500 million plus downloads overall
4:12:51
and 20 million plus daily active users. Now that is massive daily. If you're having like
4:12:57
20 million users plus then you have achieved an amazing thing. So that's how good this game is. Okay, and then this game was actually initially launched only in North America Australia
4:13:07
New Zealand, and I'm aware of this fact because I'm based out of India and I did not get access
4:13:13
to this game because the moment news got out that we have a game like this. I started downloading it, but I couldn't really find any link or I couldn't download it at all. So they launched
4:13:21
it only in these countries, but what they faced right in spite of just reading it in these three countries. They had like a major problem and that problem is what I'm going
4:13:30
to talk about in the next slide, right? So my use case is based on that very fact that In spite of launching it only in these three countries or in probably North America and
4:13:38
then in Australia New Zealand, they could have had a meltdown but rather with the help of Humanity's they used that same problem as the basis for their raw success. So that's
4:13:48
what happened. Now let that be a suspense and before I get to that let me just finish this slide one amazing thing about Pokemon go is that it has inspired users to walk over
4:13:57
5.4 billion miles an hour. Okay. Yes do the math five point four billion miles in one
4:14:03
year. That's again a very big number and it says that it has surpassed engineering Expectations
4:14:08
by 50 times. Now this last sign is not with respect to the Pokemon Go the game but it is with respect to the backend and the use of Kubernetes to achieve whatever was needed.
4:14:18
Okay, so I think I've spent enough time over here. Let me go ahead and talk about the most interesting part and tell you how the back in architecture of Pokemon go was okay. So
4:14:28
you have a Pokémon go container, which had two primary components one is your Google big table, which is your main. Database where everything is going in and coming out and
4:14:36
then you have your programs which is a run on your java Cloud, right? So these two things are what is running your game mapreduce and Cloud dataflow wear something it was used
4:14:46
for scaling up. Okay, so it's not just the container scaling up but it's with respect to the application how the program would react when there are these increased number of users
4:14:56
and how to handle increased number of requests. So that's where the mapper uses. The Paradigm
4:15:01
comes in right the mapping and then reducing that whole concept. So this was their one deployment. Okay, and when we say in defy, it means that they had this over capacities
4:15:11
which could go up til five times. Okay. So technically they could only serve X number of requests but in case of failure conditions or heavy traffic load conditions, the max
4:15:20
the server could handle was 5x because after 5x the server would start crashing that was
4:15:26
their prediction. Okay, and what actually happened at Pokemon go on releasing in just
4:15:31
those three different geographies. Is that the Deployed it the usage became so much that
4:15:36
it was not XM R of X, which is technically they're a failure limit and it is not even
4:15:42
5 x which is the server's capability but the traffic that they got was up to 50 times 50
4:15:47
times more than what they expected. So, you know that when your traffic is so much then you're going to be brought down to your knees. That's a definite and that's a given right.
4:15:56
This is like a success story and this is too good to be true kind of a story and in that kind of a scenario if the request start coming in are so much that if they reach 50 x then
4:16:06
it's gone, right the application is gone for a toss. So that's where kubernetes comes in and they overcome all the challenges. How did you overcome the challenges because Cuban
4:16:15
areas can do both vertical scaling and horizontal scaling at ease and that is the biggest problem
4:16:20
right? Because any application and any other company can easily do horizontal scaling where you just spin up more containers and more instances and you set up the environment but
4:16:29
vertical scaling is something which is very specific and this is even more challenging. Now it's more specific to this particular game because the virtual reality would keep
4:16:39
changing whenever a person moves around or walks around somewhere in his apartments or somewhere on the road. Then the ram right that would have to increase the memory the
4:16:48
in memory and the storage memory all this would increase so in real time your servers capacity also has to increase vertically. So once they have deployed it, it's not just
4:16:58
about horizontal scalability anymore. It's not about satisfying more requests. It's about satisfying that same request with respect to having more Hardware space more RAM space
4:17:07
and all these things right that one particular server should have more performance abilities. That's what it's about and communities solve both of these problems effortlessly and neon
4:17:17
tape were also surprised that kubernetes could do it and that was because of the help that they got from Google. I read an article recently that they had a neon thick slab. He met with
4:17:26
some of the top Executives in Google and then gcp right and then they figure out how things
4:17:31
are supposed to go and they of course Met with the Hedgehog communities and they figure out a way to actually scale it up to 50 time in a very short time. So that is the challenge
4:17:41
that they represented and thanks to communities. They could handle three times the traffic that they expected which is like a very one of story and which is very very surprising
4:17:50
that you know, something like this would happen. So that is about the use case and that pretty
4:17:56
much brings an end to this topic of how Pokemon go used communities to achieve something because
4:18:02
in today's world Pokemon go is a really revered game because of what it could write it basically
4:18:07
beat all the stereotypes of a game and whatever anybody could have anything negative against
4:18:13
the game, right? So they could say that these mobile games and video games make you lazy. They make you just sit in one place and all these things. Right and Pokemon go was something
4:18:21
which was different it actually made people walk around and it made people exercise and
4:18:26
that goes on to show how popular this game became if humanity is lies at the heart of something which became so popular and something Now became so big then you should imagine
4:18:36
how big the humanities or how beautiful communities is, right? So that is about this topic now
4:18:42
moving forward. Let me just quickly talk about the architecture of communities. Okay. So the communities architecture is very simple. We have the cube Master which controls a pretty
4:18:52
much everything. We should note that it is not a Docker swarm where your Cube Master
4:18:57
will also have containers running. Okay, so they won't be containers over here. So all the containers will be running all the services which will be running will be only on your
4:19:05
nodes. It's not going to be on your master and you would have to first of all create your rock Master. That's the first step in creating your cluster and then you would have
4:19:14
to get your notes to join your cluster. Okay. So bead your pods or beat your containers everything would be running on your nodes and your master would only be scheduling or
4:19:23
replicating these containers across all these nodes and making sure that your configurations are satisfied, right? Whatever you specify in the beginning and the way you access your
4:19:31
Cube Master is why are two ways You can either use it via the UI or where the CLI. So the
4:19:37
CLI is the default way and this is the main way technically because if you want to start setting up your cluster you use the CLI, you set up your cluster and from here, you can
4:19:46
enable the dashboard and when you enable the dashboard then you can probably get the GUI and then you can start using your communities and start deploying by just with the help
4:19:56
of the dashboard right my just the click functionality. You can deploy an application which you want
4:20:01
rather than having to write. I am L file or feed commands one after the other from the CLI. So that is the working of Kubernetes. Okay. Now, let's concentrate a little more
4:20:12
on how things work on the load end. Now as said before communities Master controls your
4:20:17
nodes and inside nodes you have containers. Okay, and now these containers are not just
4:20:22
contained inside them but they are actually contained inside pods. Okay, so you have nodes
4:20:28
inside which there are pots and inside each of these pods. They will be a number of containers
4:20:33
depending upon Your configuration and your requirement right now these pods which contain a number of containers are a logical binding or logical grouping of these containers supposing
4:20:44
you have one application X which is running in Node 1. Okay. So you will have a part for this particular application and all the containers which are needed to execute this particular
4:20:51
application will be a part of this particular part, right? So that's how God works and that's what the difference is with respect to what Doc is warm and two bananas because I'm dr.
4:21:00
Swamp. You will not have a pot. You just have continuous running on your node and the other two terminologies which you should know is that of replication controller and service.
4:21:09
Your replication controller is the Masters resource to ensuring that the request number of pods are always running on the nodes, right? So that's trigger confirmation or an affirmation
4:21:19
which says that okay. This many number of PODS will always be running and these many number of containers will always be running something like that. Right? So you see it
4:21:27
and the replication controller will always ensure that's happening and your service is just an object on the master that provides load. I don't think of course is replicated
4:21:35
group of PODS. Right? So that's how Humanities works and I think this is good enough introduction
4:21:43
for you. And I think now I can go to the demo part where and I will show you how to deploy
4:21:55
applications on your communities by either your CLI, or either via your Jama files or by or dashboard. Okay guys, so let's get started and for the demo purpose. I have two VMS with me. Okay. So as you can see, this is my Cube Master which would be acting as my master
4:22:05
in my cluster. And then I have another VM which is my Cube Node 1. Okay. So it's a cluster
4:22:10
with one master and one node. All right. Now for the ease of purpose for this video, I
4:22:16
have compiled the list of commands in this text document right? So here I have all the
4:22:21
commands which are needed to start your cluster on then the other configurations and all those things. So I'll be using these every copying these commands and then I'll show you side-by-side
4:22:32
and I will also explain when I do that as to what each of these commands mean now there's one prerequisite that needs to be satisfied. And that is the master of should have at least
4:22:41
two core CPUs. Okay and 4GB of RAM and your node should have at least one course if you
4:22:47
and 4GB of ram so just make sure that this much of Hardware is given to your VMS right
4:22:53
if you are using To what a Linux operating system well and good but if you are using a VM on top of a Windows OS then I would request you to satisfy these things. Okay, these two
4:23:03
criterias and I think we can straight away start. Let me open up my terminal first fault. Okay. This is my node. I'm going back to my master. Okay. Yes. So first of all, if you
4:23:16
have to start your cluster, you have to start it from your Masters end. Okay, and the command for that is Q barium in it, you specify the port Network flag and the API server flag.
4:23:26
We are specifying the port Network flag because the different containers inside your pod should be able to talk to each other easily. Right? So that was the whole concept of self discovery,
4:23:35
which I spoke about earlier during the features of communities. So for this self-discovery,
4:23:41
we have like different poor networks using which the containers would talk to each other and if you go to the documentation the community is documentation. You can find a lot of options
4:23:49
are you can use either Calico pod or you can use a flannel poor Network. So when we say poor Network, it's basically a framed as the cni. Okay container network interface. Okay,
4:24:00
so you can use either a Calico cni or a flannel cni or any of the other ones. This is the two popular ones and I will be using the calcio cni. Okay. So this is the network range for
4:24:10
this particular pod, and this will Specify over here. Okay, and then over here we have to specify the IP address of the master. So let me first of all copy this entire line.
4:24:21
And before I paste it here, let me do an if config and find out what is the IP address of this particular machine of my master machine. The IP address is one ninety two dot one sixty
4:24:30
eight dot 56.1. Not one. Okay. So let's just keep that in mind and let me paste the command
4:24:36
over here in place of the master IP address. I'm going to specify the IP address of the
4:24:42
master. Okay, but I just read out. It is one. Ninety two dot one sixty eight dot 56.1 not
4:24:47
one and the Pod Network. I told you that I'm going to use the Calico pod. So let's copy
4:24:54
this network range and paste it here. So all my containers inside this particular pot would
4:25:00
be assigned an IP address in this range. Okay. Now, let me just go ahead and hit enter and
4:25:06
then your cluster would begin to set up. So it's going X expected. So it's going to take
4:25:15
a few minutes. So just to hold on there. Okay, perfect. My Cuban its master has initialized
4:25:22
successfully and if you want to start using your cluster, you have to run the following as a regular user. Right so we have three commands which is suggested by kubernetes
4:25:30
itself. And that is actually the same set of commands or even I have here. Okay, so
4:25:35
I'll be running the same commands. This is to set up the environment. And then after that we have this token generated, right the joining token. So the token along with the
4:25:43
inlet address of the IP of the master if I basically execute this command in my nodes,
4:25:49
then I will be joining this cluster where this is the master, right? So this is my master
4:25:54
machine. This is created the cluster. So now before I do this though, there are a few steps in the middle. One of those steps is executing all these three commands and after that comes
4:26:02
bring up the dashboard and setting up the board Network right - the calcio apart. So
4:26:08
I have to set up the Calico pod and then after also set up the dashboard because if I do not start the And this before the nodes then the node cannot join and I will have very
4:26:18
severe complications. So let me first of all go ahead and run these three commands one of the other. Okay, since I have the same commands in my text doc. I'll just copy it
4:26:27
from there. Okay, say ctrl-c paste enter. Okay, and I'll copy this line. So remember
4:26:36
you have to execute all these things as regular user. Okay, you can probably use your pseudo. But yeah, you'll be executing it as your regular user and it's asking me if I want to overwrite
4:26:45
the existing whatever is there in this directory, I would say yes because I've already done this before but if you are setting up the cluster for the first time, you will not have
4:26:53
this prompt. Okay. Now, let me go to the third line copy this and paste it here. Okay, perfect.
4:27:01
Now I've ran these three commands as I was told by communities. Now, the next thing that I have to do is before I check the node status and all these things. Let me just set up the
4:27:11
network. Okay, the poor Network. So like I said, this is the Line This is the command that we have to run to set up the Calico Network. Okay to all of the notes to join our particular
4:27:21
Network. So it will be copying the template of this Calico document file is present over here in this box. Okay. So hit enter and yes, my thing is created. Calcio Cube controllers
4:27:32
created now, I'll just go back here and see at this point of time. I can check if my Master's
4:27:38
connected to the particular pod. Okay, so I can run the cube CDL get loads command Okay.
4:27:45
This would say that I have one particular resource connected to the cluster. Okay name
4:27:50
of the machine and this role is master and yet the state is ready. Okay, if you want
4:27:55
to get an idea of all the different pods which are running by default then you can do the cubes. He'll get pods along with few options. Okay should specify these flags and they are.
4:28:07
All namespaces and with the flag O specify wide. Okay. So this way I get all the pods
4:28:15
which are started by default. Okay. So there are different services like at CD4 Cube controllers
4:28:22
for the Calico node for the SED Master for every single service. There's a separate container
4:28:27
and pot started. Okay, so that's what you can understand from this part. Okay, that is the safe assumption. Now that we know the cluster the cluster is ready and the Masters
4:28:36
part of a cluster. Let's go ahead and execute this dashboard. Okay. Remember if you want
4:28:41
to use a dashboard then you have to run this command before your notes join this particular cluster because the moment your notes join into the cluster bring up the dashboard is
4:28:49
going to be challenging and it will start throwing arrows. OK it will say that it's being hosted on the Node which we do not want we want the dashboard to be on the server
4:28:58
itself right on the master. So first, let's bring the dashboard up. So I'm going to copy this and paste it here. Okay, Enter great. Communities dashboard is created. Now the
4:29:10
next command that you have to get your dashboard up and running is Cube cereal proxy. Okay
4:29:16
with this we get a message saying that it's being served at this particular port number and yes, you are right now there you can if you access Local Host. What was the port number
4:29:26
again? Localhost? Yeah one 27.0 or 0.1 is localhost. Okay followed by port number eight
4:29:32
thousand one, okay. Yeah, so right now we are not having the dashboard because it is
4:29:39
a technically accessed on another URL. But before we do that, there are various other things that we have to access. I mean we have to set okay, because right now we have only
4:29:48
enabled the dashboard now if you want to access the dashboard you have to first of all create a service account. Okay. The instructions are here. Okay, you have to first of all create
4:29:57
a service account for dashboard. Then you have to say that okay, you are going to be the admin user of this particular service account and we have to enable that functionality
4:30:06
here. You should say dashboard admin privileges and you should do the cluster binding. Okay, the cluster roll binding is what you have to do and after that to join to that poor
4:30:15
to get access to that particular dashboard. We have to basically give a key. Okay. It's like a password. So we have to generate that token first and then we can access the dashboard.
4:30:23
So again for the dashboard there are these three commands. Well, you can get confused down the line. But remember this is separate from the above. Okay. So what we did initially
4:30:32
is rant these three commands which kubernetes. Oh To execute and after that the next necessity
4:30:37
was bring up a pod. So this was that command for the Pod and then this was the command for getting the dashboard up and right after that run the proxy and then on that particular
4:30:47
port number will start being served. So my dad would is being served but I'm not getting the UI here and if I want to get the you--if you create the service account and do these
4:30:54
three things, right? So let's start with this and then continue. I hope this wasn't confusing guys. Okay, I can't do it here. So let me open a new terminal. Okay here I'm going to
4:31:04
paste it. And yes service account created. Let me go back here and execute this command
4:31:11
when I'm doing the role binding I'm saying that my dashboard will should have admin functionalities
4:31:16
and that's going to be the cluster roll. Okay cluster admin, and then the service account is what I'm using and it's going to be in default namespace. Okay. So when I created
4:31:25
the account I said that I want to create this particular account in default namespace. So the same thing I'm specifying here. Okay - good admin created good. So let's generate the
4:31:35
That is needed to access my dashboard. Okay before I execute this command, let me show you that once so if you go to this URL, right / API slash V 1 / namespaces. Yep, let me
4:31:47
show to you here. Okay. So this is the particular URL where you will get access to the dashboard. Okay login access to the dashboard localhost 8001 API V1 namespaces / Cube system / Services
4:31:58
slash HTTP Cuban eighties. Dashboard: / proxy. Okay. Remember this one that is the same thing
4:32:05
over here and like I told you it's asking me for my password. So I would say token but
4:32:10
let me go here and hit the command and generate the token. So this is the token amount of
4:32:16
copy this from here till here going to say copy and this is what I have to paste over
4:32:23
here. All right. So Simon update. Yes, perfect with this is my dashboard, right? This is
4:32:31
my Cuban eighties dashboard. And this is how it looks like whatever I want. I can get an overview of everything. So that is workloads. If I come down there is deployments. I have
4:32:41
option to see the pods and then I can see what are the different Services running among
4:32:46
most of the other functionalities. Okay. So right now we don't have any bar graph or pie graph shown you which clusters up which board is up and all because I have not added any
4:32:55
node and there is no service out as running right. So I mean, this is the outlay of the
4:33:00
dashboard. Okay, you will get access to everything you want from the left. You can drill down into each of these namespaces or pods on containers right now. If you want to deploy something
4:33:10
through the dashboard right through the click functionality, then you can go here. Okay,
4:33:15
but before I create any container or before I create any pot or any deployment for that matter of fact, I have to have nodes because these will be running only on nodes. Correct,
4:33:24
whatever. I deploy they have done only on node. So let me first open up my node and get the node to join this particular cluster of mine. Now, if you remember the command
4:33:34
to join the node got generated at the master and correct. So, let me go and fetch that
4:33:40
again. So that was the first command that we ran right this one. So, let's just copy
4:33:46
this. And paste this one at my node end. This is the IP of my master and it will just join
4:33:55
at this particular port number. Let me hit enter. Let's see what happens. Okay, let me
4:34:00
run it as root user. Okay? Okay, perfect successfully established connection with the API server
4:34:09
and it says this node has joined the cluster Right Bingo. So this is good news to me. Now
4:34:15
if I go back to my master and in fact, if I open up the dashboard there would be an option of nodes. Right? So initially now, it's showing this master Masters. The only
4:34:24
thing that is part of my nodes, let me just refresh it and you would see that even node - 1 would be a part of it. Right? So there are two resources to instances one is the
4:34:34
master itself and the other is the node now if I go to overview, you will get more details
4:34:40
if I start my application if I start my servers or containers then all those would start showing up your right. So it's high time. I start showing you how to deploy it to deployed using
4:34:50
the dashboard. I told you this is the functionality. So let's go ahead and click on this create. And yeah mind you from the dashboard is the easiest way to deploy your application, right?
4:34:59
So even developers around the world do the same thing for the first time probably they created using the Amal file. And then from there on they start editing the ml file on
4:35:07
top of the dashboard itself or the create or deploy the application from here itself. So we'll do the same thing. Go to create an app using functionality click functionality.
4:35:15
You can do it over here. So let's give a name to your application. I'll just say it you
4:35:22
recur demo. Okay, let that be the name of my application and I want to basically pull
4:35:28
an engines image. Okay. I want to launch an engine service. So I'm going to specify the image name in my Docker Hub. Okay. So it says either the URL of a Public Image or any registry
4:35:39
or a private image hosted on Docker Hub or Google container registry. So I don't have
4:35:44
to specify the URL per se but if you are specifying a Docker Hub, if you are specifying this image to be pulled from Docker Hub, then you can just use the name of the image which has to
4:35:52
be pulled. That's good enough. Right engine to the name and that's good enough and I can choose to set my number of ports to one or two in that way. I will have two containers
4:36:02
running in the pot. Right? So this is done and the final part is actually without the final part. I can strip it deployed. Okay, but if I deployed then my application would
4:36:12
be created but I would just don't get the UI. I mean, I won't see the engine service so that I get the service. I have to enable one more functionality here. Okay, the server's
4:36:22
here click on the drop down and you will have external option right? So click on external this would let you access this particular service from your host machine, right? So
4:36:31
that is the definition so you can see the explanation here and internal or external
4:36:37
service can be defined to map and incoming port to a Target Port seen by the container
4:36:42
so engines which would be hosted on one of the container ports. That could not be accessible if I don't specify anything here, but now that I've said access it externally on a particular
4:36:51
port number then it will get mapped for me by default. And jinkx runs on port number 80. So the target put would be the same but the port I want to expose it to that. I can
4:37:00
map into anything I want so I'm going to say 82. All right, so that's it. It's as simple as this this way. Your application is launched with two pods, so I can just go down and click
4:37:11
on deploy and this way my application should be deployed. My deployment is successful.
4:37:16
There are two pods running. So what I can do is I can go to the service and try to access
4:37:23
the UI, right? So it says that it's running on this particular port number 82153. So copy
4:37:29
this and say localhost 321530 k hit enter bingo. So it says welcome to Jenkins and I'm
4:37:38
building the UI, right? So I'm able to access my application which I just launched through the dashboard. It was as simple as that. So this is one way of for launching or making
4:37:47
a deployment. There are two other ways. Like I told you one is using your CLI itself your command line interface of your draw Linux machine, which is the terminal or you can
4:37:56
do it by uploading the yamen file. You can do it by uploading the yamen file because
4:38:02
everything here is in the form of Yama Lord Jason. Okay, that's like the default way.
4:38:07
So whatever deployment I made right that also those configurations are stored in the form of Yaman. So if I click on view or edit yeonggil, all the configurations are specified the default
4:38:16
ones have been taken. So I said the name should be a director demo that is what has been. Oh you're that is the name of my deployment? Okay. So kind is deployment the version of
4:38:25
my API. It's this one extension /we 1 beta 1 and then other metadata I have various other
4:38:32
lists. So if you know how to write a normal file then I think it would be a little more easier for you to understand and create your deployment because you will file is everything
4:38:41
about lists and maps and these are all files are always lists about maps and maps about
4:38:47
lists. So it might be a little confusing. So probably will have another tutorial video on how to write a normal file for Cuban its deployment but I would keep that for another
4:38:56
session. Okay. Let me get back to this session and show you the next deployment. Okay, the
4:39:02
next deployment technique, so let me just close this and go back to overview. Okay,
4:39:08
so I have this one deployment very good. Okay. So let's go to this. Yeah. So what I'll do
4:39:15
is let me delete this deployment. Okay our let me at least scale it down because Don't want too many resources to be used on my node also because I will have to show two more
4:39:24
deployments. Right so I have reduced my deployment over here. And I think it's be good enough.
4:39:32
Great. So let's go back to the cube set up this document of mine. So this is where we're
4:39:39
at. Right we could check our deployments we could do all these things. So one thing which
4:39:44
I might have forgotten is showing the nodes which are part of the cluster of right. So this is my master. Yeah, so I kind of forgot to show you this Cube CDL get node. So the
4:39:58
same view that you got on your dashboard you get it here. Also, I mean, these are the two
4:40:03
nodes and this is the name and all these things. Okay, and I can also do the cube CDL get pods
4:40:11
which would tell me all the pods that are running under a car. Demo is the pot which I have started. Okay. This is my God. Now if I specify with the other flags right with
4:40:22
all namespaces and with wide then all the default pause which get created along with
4:40:27
your kubernetes cluster. Those will also get displayed. Let me show you that also just in case Okay. Yeah. So this is the one which I created and the other ones are the default
4:40:37
of deployments that come with few minutes the moment you install set up the cluster these get started. Okay, and if you can see here this particular that this particular
4:40:48
a dareka demo, which I started is running on my Node 1 along with this Cube proxy and
4:40:55
this particular Calico node. So Easter services are running on master and node. And this one
4:41:00
is running only on my Node 1 right you can see this right the Calico node runs both on
4:41:07
my node over here and on my master and similarly the queue proxy runs on my node here and on
4:41:13
my master. So this is the one that's running only on my Note. Okay, so getting back to what I was about to explain you. The next part is how to deploy anything through your
4:41:25
terminal now to deploy your same engines application through your CLI. We can follow these set
4:41:32
of commands Okay, so there are a couple of steps here. First of all to create a deployment. We have to run this command. OK Cube cereal create deployment and drinks and then the
4:41:41
name of the image that you want to create. This is going to be the name of your deployment. And this is the name of the image which you want to use so control C and let me go to
4:41:49
the terminal here on my master. I'm executing this command Cube cereal create a deployment.
4:41:54
Okay. So the deployment engines is created if you want we can verify that also over here
4:41:59
so under deployments right now, we have one entry in the array card Mo and yes now you
4:42:05
can see there are two engines and arica demo. So this is pending. I mean, it would take a few seconds. So in the meanwhile let this continue with the other steps. Once you have
4:42:14
created a deployments, you have to create the service. Okay after say which is the node
4:42:19
Port which can be used to access that Particular service, right because deployment of just a deployment you're just deploying your container if you want to access it. Like I told you
4:42:27
earlier from your local from your host machine all those things. Then you have to enable the node board. If you want to get your deployments on your terminal you can run this command
4:42:35
Cube CDL get deployments. Okay engines also comes up over here, right? If you want more
4:42:43
details about your diploma. You can use this command Cube CDL describe you get like more details about this particular development as to what is the name? What is the port number?
4:42:52
It's sort of siding on all these things. Okay. Let's not complicate this you can probably
4:42:57
use that for understanding later. So once that is done, the next thing that you have to do is you have to create the service on the nodes you have created the deployment,
4:43:05
but yes create the service on the nodes using this particular command Cube cereal. Create
4:43:10
service and say note Port. Okay, this means you want to access it at this particular Point number you're doing the port mapping 80 is 280. Okay, container Port 80 to the internal
4:43:19
node, Port 80. Okay. So service for engines is created. And if you want to check which
4:43:25
of the diplomas are running in which nodes you can run the command Cube City L. Get SVC.
4:43:31
Okay, this would tell you okay, you have two different services at a record Mo and engines and they are anyone these port numbers and on these nodes, right? So communities is the
4:43:41
one which God created automatically enter a car. Demo is the one which I created. Okay engines is again, the one which I created communities comes up on its own just specifying
4:43:51
to you because this is a container for the cluster itself. Okay. So let's just go back here and then yes and similarly if you want to delete a deployment then you can just use
4:44:01
this command Cube CDL delete deployment followed by the name of the deployment, right? It's
4:44:06
pretty simple. You can do it this way. Otherwise from the dashboard. You can delete it like how I showed you all your click over here and then you can click on delete and then
4:44:14
if you want to scale you can scale it. So both of these deployment of mine have one porridge, right? So let's do one thing. So let's just go to the engines service. And
4:44:27
here let's try accessing this particular service. Local Host. Okay, perfect here. Also it says
4:44:34
welcome to engines right. So with this you can understand that the port mapping worked
4:44:40
and by going to service you will get to know on which port number you can access it on your host machine, right? So this is the internal container Port map to this particular Port
4:44:49
of mine. Okay. Now if one if not for this if this doesn't work, you can also use the cluster IP for the same thing trust ripe is going to basically the IP using which all
4:44:59
your containers access each other, right? So if your body will have an IP. So whatever is running in their containers that will again be accessible on your cluster I be so so it's
4:45:09
the same thing right? So let me just close these pages and that's how you deploy an application
4:45:14
through your CLI. So this comes to our last part of this video, which is nothing but deployment via Yaman file. So for again deployment where I am and file you have to write your yawm
4:45:24
Al code, right? You have to either write your yawm Al code or your Json code, correct? So
4:45:29
this the code which I have written. Just in Jama format. And in fact, I already have it in my machine here. So how about I just do an LS? Yeah, there is deployment at Dotty.
4:45:40
Alright, so let me show you that so this is my yamen file. Okay. So here I specify various
4:45:47
configurations similar to how I did it using the GUI or Rider reducing the CLI it something similar gesture. I specify everything and one particular file here. If you can see that.
4:45:56
I have a specify the API version. Okay, so I'm using extensions dot a slash b 1 or beta
4:46:01
1. Okay. I can do this or I can just simply specify version 1 I can do either of those
4:46:06
and then the next important line is the kind so kind is important because you have to specify what kind of file it is. Is it a deployment file or is it for a pod deployment or is it
4:46:16
for your container deployment or is it the overall deployment? What is it? So I've said deployment okay, because I want to deploy the containers also along with the pot. So
4:46:24
I'm saying deployment in case you want to deploy only the pod which you realistically don't need to. Okay. Why would it just deploy up? But in case if you want to deploy a pot
4:46:32
then you can go ahead and write Port here and then just specify what are the different containers. Okay, but in my case, it's a complete deployment right with the pods and the services
4:46:40
and the containers. So I will go ahead and write other things and under the metadata. I will specify the name of my application. I can specify what I want. I can put my name
4:46:50
also over here like Warden, okay, and I can save this and then the important part is this
4:46:56
back part. So here is where you set the number of replicas. Do you remember I told you that
4:47:01
there's something called has replication controller which controls the number of ports that you will be running. So it is that line. So if I have a set to over here, it means that I
4:47:08
will have two pods running of this particular application of Verdun. Okay, what exactly
4:47:14
am I doing here under spec AB saying that I want to Containers so I have intended or
4:47:20
container line over here and then I have two containers inside. So the first container which I want to create is of the name front end. Okay, and I'm using an engines image
4:47:30
and similarly. The port number that this would be active on is container Port 80. All right,
4:47:35
and then I'm saying that I want a second container and the container for this could I could rename this to anything? I can say back end and I can choose which image I want. I can probably
4:47:46
choose a httpd image also. Okay, and I can again say the port's that this will be running
4:47:52
on I can say the container Port that it should run on is put number is 88 right? So that's
4:47:57
how simple it is. All right. And since it's your first video tutorial the important takeaways from this yawm Al file configuration is that under specular have to specify the containers?
4:48:07
And yes everything in Json format with all the Intel dacians and all these things. Okay,
4:48:12
even if you have an extra space anywhere over here, then you are real file would throw an invalid error. So make sure that is not there. Make sure you specify the containers appropriately
4:48:21
if it's going to be just one container. Well and good it's two containers. Make sure you intend it in the right way and then you can specify the number of PODS. You want to give
4:48:29
a name to your deployment and Mainly established read these rules. Okay. So once you're done
4:48:34
with this just save it and close the yamen file. Okay. So this is your deployment djamel.
4:48:41
Now, you can straight away upload this table file to your Kubernetes. Okay, and that way your application would be straight with deployed. Okay. Now the command for that is Cube cereal
4:48:50
create - F and the name of the file. Okay. So let me copy this and then the name of my
4:48:55
file is deployment or djamel. So let me hit enter. Perfect. So my deployment the third
4:49:01
deployment vardhan is also created right so we can check our deployments from the earlier
4:49:07
command. That is nothing but Cube CDL get deployments. Okay. It's not get deployment
4:49:12
audiometer. Sorry. It's get deployments. And as you can see here, there is an Adder a guard
4:49:19
Mo there is engines and there is Verdun and the funny thing which you should have noticed is that I said, I want to replicas right to pods. So that's why the desire is to currently
4:49:29
we have to up to date is one. So okay update is to brilliant available is 0 because let's
4:49:35
just give it a few seconds in 23 seconds. I don't think the board would have started. So let's go back to our dashboard and verify if there's a third deployment that comes up
4:49:43
over here. Okay, perfect. So that's how it's going to work. Okay, so probably is going
4:49:50
to take some more time because the containers just restarting. So let's just give it some more time. This could well be because of the fact that my node has very less resource,
4:49:58
right? So I have too many deployments that could be the very reason. So what I can do is I could go ahead and delete other deployments so that my node can handle these many containers
4:50:08
and pods right? So let me delete this particular deployment and Rings deployment and let me
4:50:15
also delete this Adder a car demo deployment of mine. Okay. Now let's refresh and just
4:50:23
wait for this to happen. Okay. So what I can do instead is I could have a very simple deployment
4:50:28
right? So let me go back to my terminal and let me delete my deployment. Okay, and let me redeployed again, so Cube CDL delete deployment. Okay, so what then this deployment has been
4:50:44
deleted? Okay. So let's just clear the screen and let's do G edit of the yamen file again
4:50:50
and here let's make things simpler. Let me just delete this container from here. Let
4:50:57
me save this right and close this now. Let me create a deployment with this. Okay. So
4:51:04
what then is created, let me go up here and refresh. Let's see what happens. Okay. So
4:51:10
this time it's all green because it's all healthy. My nodes are successful or at least it's going to be successful container creating. Perfect. So two parts of mine are up and running
4:51:22
and both my paws are running right and both are running on Node 1 pause to or of to those
4:51:29
are the two deployments and replica set and then Services, right? So it's engines which
4:51:34
is the basement which is being used. So well and good. This is also working. So guys. Yeah,
4:51:40
that's about it. Right. So when I try to upload it, maybe there was some other error probably in the arm will file they could developments from small mistake or it could have been because
4:51:48
my known had too many containers running those could have been the reasons. But anyways, this is how you deployed through your yamen file. All right, so that kind of brings us
4:51:56
to the end of this session where I've showed you a demonstration of deploying your containers
4:52:01
in three different ways CLI dashboard and your yamen files. Hey everyone, this is Reyshma
4:52:11
from Edureka. And today we'll be learning what is ansible. First,let us look at the
4:52:17
topics that we'll be learning today. Well, it's quite a long list. It means we'll be
4:52:23
learning a lot of things today. Let us take a look at them one by one. So first we'll
4:52:28
see the problems that were before configuration management and how configuration management
4:52:33
help to solve. It will see what ansible is and the different features of ansible after
4:52:39
that. We'll see how NASA is implemented and civil to solve all their problems. After that.
4:52:45
We'll see how we can use ansible for orchestration provisioning configuration management application
4:52:52
deployment and security. And in the end, we'll write some ansible playbooks to install lamp
4:52:58
stack on my node machine and host your website in my note machine. Now before I tell you
4:53:04
about the problems, let us first understand what configuration management actually is.
4:53:09
Well configuration management is actually the management of your software on top of
4:53:14
your Hardware. What it does is that it maintains the consistency of your product based on its
4:53:21
requirements its design and its physical and functional attributes. Now, how does it maintain
4:53:27
the consistency it is because the configuration management is applied over the entire life
4:53:33
cycle of your system. And hence. It provides you with a very good visibility and control
4:53:38
when I say visibility. It means that you can continuously check and monitor the performances
4:53:44
of all your assistants. So if at any time the performance of any of his system is degrading
4:53:50
the configuration management system will notify you and hence. You can prevent errors before
4:53:55
it actually occurs and by control, I mean that you have the power to change anything.
4:54:00
So if any of your servers failed you can reconfigure it again to repair it so that it is up and
4:54:05
running again, or you can even replace the server if needed and also the configuration
4:54:11
management system holds the entire historical data of your infrastructure it DOC. Men's
4:54:16
all the snapshots of every version of your infrastructure. So overall the configuration
4:54:22
management process facilitates the orderly management of your system information and system changes so that it can use it for beneficial purposes. So let us proceed to the next topic
4:54:32
and see the problems before configuration management and how configuration management solved it and with that you'll understand more about configuration management as well.
4:54:42
So, let's see now, why do we need configuration management now, the necessaries behind configuration
4:54:49
management was dependent upon a certain number of factors and certain number of reasons. So let us take a look at them one by one. So the first problem was managing multiple
4:54:59
servers now earlier every system was managed by hand and by that, I mean that you have
4:55:05
to login to them via SSH make changes and then log off again. Now imagine if a system
4:55:12
administrator would have to make changes in multiple number of servers. You'll have to
4:55:17
do this task of logging in making changes and longing of again and again repeatedly,
4:55:23
so this would take up a lot of time and there is no time left for the system administrators
4:55:28
to monitor the performances of the system continuously safe at any time any of the servers
4:55:33
would fail it took a lot of time to even detect the faulty server and to even more time to
4:55:39
repair it because the configuration scripts that they wrote was very complex and it was
4:55:44
very hard to make changes on to them. So after configuration management system came into the picture what it did is that it divided all the systems in my infrastructure according
4:55:54
to their dedicated tasks their design or architecture and the organize my system in an efficient
4:56:01
way. Like I've proved my web servers together my database servers together application servers
4:56:08
together and this process is known as baselining. Now. Let's for an example say that I wanted
4:56:15
to install lamp stack in my system and lamp stack is a software bundle where L stands
4:56:20
for Linux a for Apache and for MySQL and P for PHP. So I need this different software's
4:56:27
for different purposes. Like I need Apache server to host my web pages and it PHP for
4:56:33
my web development. I need Linux as my operating system and MySQL as my data definition language
4:56:40
or data manipulation language since now all the systems in my infrastructure is Baseline.
4:56:46
I would know exactly where to install each of the software's. For example, I'll use Apache as my web server here for database. I will install the MySQL here and also begin easy
4:56:56
for me to monitor my entire system. For example, if my web pages are not running I would know
4:57:01
that there's something wrong. With my web servers, so I'll go check in here. I don't have to check the database servers and application servers for that. Similarly. If I'm not able
4:57:11
to insert data or extract data from my database. I would know that something is wrong with my database servers. I don't need to check these too for that matter. So what configuration
4:57:21
management system did with baselining is that it organized mess system in an efficient way so that I can manage and monitor all my servers efficiently. Now, let us see the second problem
4:57:31
that we had which were scaling up and scaling down. See nowadays, you can come up with requirements
4:57:38
at any time and you might have to scale up or scale down your systems on the Fly and
4:57:44
this is something that you cannot always plan ahead and scaling up. Your infrastructure
4:57:49
doesn't always mean that you just buy new hardware and just place them anywhere. Haphazardly.
4:57:55
You cannot do that. You also need to provision and configure this new machines properly.
4:58:01
So with configuration management system, I've already got my infrastructure baselined so I know exactly how this new machines are going to work according to their dedicated task
4:58:11
and where should I actually place them and the scripts that configuration management uses are reusable so you can use the same scripts that you use to configure your older
4:58:20
machines to configure your new machines as well. So let me explain it to you with an example. So let me explain it to you with an example. Let's say that if you're working
4:58:31
in an e-commerce website and you decide to hold a mega sale. New Year Christmas sale
4:58:36
or anything? So it's obvious that there is going to be a huge rise in the traffic. So
4:58:42
you might need more web servers to handle that amount of requests and you might even need a load balancers or maybe to to distribute that amount of traffic onto your web servers
4:58:52
and these changes however need to be made at a very short span of time. So after you've
4:58:57
got the necessary Hardware, you also need to provision them accordingly and with configuration management, you can easily provision this new machines using either recipes or play
4:59:06
books or any kind of script that configuration management uses. And also after the sale is
4:59:12
over you don't need that many web servers or a load balancer so you can disable them using the same easy scripts as well and also scaling down is very important when you are
4:59:22
using cloud services when you do not need any of those machines, it's no point in keeping
4:59:27
them. So you have to scale down as well because you have to reconfigure your entire infrastructure as well and with configuration management. It is a very easy. Anything to Auto scale
4:59:36
up and scale down your infrastructure. So I think you all have understood this problem and how configuration management salted so let us take a look at the third problem. Third
4:59:46
problem was the work velocity of the developers were affected because the system administrators
4:59:52
were taking time to configure the server's after the developers have written a code.
4:59:57
The next job is to deploy them on different servers like test servers and production servers
5:00:02
for testing it out and releasing it but then again every server was managed by hand before
5:00:08
so the system administrators would again have to do the same thing log in to its server
5:00:13
configure them properly by making changes and do the same thing again to all servers. So this was taking a lot of time now before devops game you the picture there was already
5:00:23
agility in the developers end for which they were able to release new software's very frequently,
5:00:28
but it was taking a lot of time for the system administrators to configure the servers for
5:00:33
testing so the developers would have Wait for all the test results and this highly hamper
5:00:38
the word velocity of the developers. But after there was configuration management the system
5:00:44
administrator had got access to a configuration management tool which allowed them to configure all the servers at one go. All they had to do is write down all the configurations and
5:00:55
write down the list of all the software's that there need to provision this servers and deploy it on all of the servers at one go. So now agility even came into the system
5:01:05
administrators and as well. So now after configuration management the developers and the system administrators
5:01:12
were finally able to work in the same base. Now, this is how configuration management
5:01:17
solve the third problem now, let us take a look at the last problem. Now the last problem
5:01:23
was rolling back in today's scenario. Everyone wants a change and you need to keep making
5:01:30
changes frequently because customers will start losing interest if things stay the same
5:01:35
so you need to keep releasing new features to upgrade your application even giants like
5:01:41
Amazon and Facebook. They do it now and then and still they're unsure if the users are
5:01:46
going to like it or not. Now imagine if the users did not like it they would have to roll
5:01:52
back to the previous version again, so, let's see how it creates a problem. Now before there
5:01:57
was configuration management. Let's say you've got the old version which is the version one when you're upgrading it you're changing all the configurations in the production server.
5:02:06
You're deleting the old configurations completely and deploying the new version now if the users
5:02:12
did not like it you would have to reconfigure This Server again with the old configurations
5:02:18
and that will take up a lot of time. So application is going to be Down for that amount of time
5:02:23
that you need for reconfiguring the server and this might create a problem. But when
5:02:28
you're using configuration management system, as you know that it documents every version of your infrastructure when you're upgrading it with configuration management, it will
5:02:38
remove the configurations of the older version, but it will be well documented. It will be
5:02:44
kept there and then the newer version is deployed. Now if the users did not like it this time,
5:02:49
the older of the configuration version was already documented. So all you have to do is just switch back to the old version and this won't take up any time and you can upgrade
5:02:59
or roll back your application in zero downtime zero downtime means that your application
5:03:05
would be down for zero time. It means that the users will not notice that your application
5:03:11
went down and you can achieve it seamlessly and this is how configuration management system
5:03:17
solved all the problems that was before. So guys. I hope that if all understood how Management
5:03:22
did that let us now move on to the next topic? Now the question is how do I incorporate configuration
5:03:30
Management in my system? Well, you do that using configuration management tools. So let's
5:03:36
take a look at all the available configuration management tools. So here I've got the four
5:03:42
most popular tools that is available in the market right now. I've got ansible and Saul
5:03:48
stack which are push-based configuration management tool by push-based. I mean that you can directly
5:03:54
push all those configurations on to your node machines directly while chef and puppet are
5:03:59
both pull based configuration management tools. It means that they rely on a central server
5:04:05
for configurations the pull all the configurations from a central server. There are other configuration
5:04:12
management tools available in the market to but but these four are the most popular ones.
5:04:17
So now let's know more about ansible now ansible is a configuration management tool that can
5:04:23
be used for provisioning orchestration application deployment Automation and it's a push based
5:04:30
configuration management tool. Like I told you what it does is that it automate your
5:04:35
entire it infrastructure and gives you large productivity gains and it can automate pretty
5:04:40
much anything. It can automate your Cloud your networks your servers and all your it
5:04:46
processes. So let us move on to the next topic. So now let us see the features of ansible.
5:04:52
The first feature is that it's very simple. It's simple to install and setup and it's
5:04:57
very easy to learn because ansible Play books are written in a very simple data serialization
5:05:03
language, which is known as Gamal and it's pretty much like English. So anyone can understand
5:05:09
that and it's very easy to learn next feature because of which ansible is preferred over other configuration management tools is because it's Agent kallus it means that you do not
5:05:19
need any kind of Agents or any kind of plan software's to manage your node machines. All
5:05:26
you have to do is install ansible in your control machine and just make an SSH connection with your nodes and start pushing configurations right away. The next feature is that it's
5:05:36
very powerful, even though you call ansible simple and it does not require any agent.
5:05:42
It has the capabilities to model very complex it workflows and it comes with a very interesting
5:05:49
feature, which is called the batteries included. It means that you've got everything that you
5:05:54
already need and in ansible it's because it comes with more than 750 inbuilt modules,
5:06:01
which you can use them for any purpose in your project. And it's very efficient because
5:06:08
all the modules that ansible comes with they are extensible. It means that you can customize
5:06:14
them according to your needs and for doing that you do not need to use the same programming language that it was originally written in you can choose any kind of programming language
5:06:23
that you're comfortable with and then customize those modules for your own use. So this is
5:06:29
the power and Liberty that ansible gives you now, let us take a look at the case study
5:06:34
of NASA. What were the problems that NASA was facing and how ansible solved all those
5:06:39
problems? Now NASA is an organization that has been sending men to the Moon. They are
5:06:45
carrying out missions and Mars and they're launching satellites now and then to monitor the Earth and not just the Earth. They're even monitoring other galaxies and other planets
5:06:56
as well. So you can imagine the kind and the amount of data that NASA might be dealing
5:07:01
with but all the applications were in a traditional Hardware based Data Center and they wanted
5:07:07
to move into a cloud-based environment because they wanted better agility and they wanted
5:07:13
better adaptive planning for that. And also they wanted to save costs because a lot of
5:07:20
money was spent on just the maintenance of the hardware and also they wanted more security
5:07:25
because NASA is a government organization of the United States of America and obviously,
5:07:30
they wanted more security because NASA is a government organization of the United States
5:07:35
of America and the hold a lot of confidential details as well for the government. So they
5:07:41
just Cannot always rely on the hardware to store all This Confidential files, they needed
5:07:46
more security because if at any time the hardware fails, they cannot afford to lose that data
5:07:52
and that is why they wanted to move all their 65 applications from a hardware environment
5:07:58
to a cloud-based environment. Now, let us take a look. What was the problem now for
5:08:03
this migration of all the data into a cloud environment. They contacted a company called
5:08:09
in Frozen now in Frozen is a company who is a cloud broker and integrator to implement
5:08:15
solutions to meet needs with security. So in phase and was responsible for making this transition and NASA wanted to make this transition in a very short span of time. So all the applications
5:08:27
were migrated as it is into the cloud environment and because of this all the AWS accounts and
5:08:34
all the virtual private clouds that was previously defined they all got accumulated in a single
5:08:39
data space and this It up a huge chunk of data and NASA had no way of centrally managing
5:08:45
it and even simple tasks like giving a particular system administrator access rights to a particular
5:08:52
account. This became a very tedious job with NASA wanted to automate and to and deployment
5:08:57
of all their apps and for that they needed a management system. So this was the situation
5:09:03
when NASA moved into the cloud so you can see that all those AWS accounts and virtual
5:09:08
private cows. They got accumulated and made a huge chunk of data and everyone was excessing
5:09:13
directly to it. So there is a problem in managing the credentials for all the users and the
5:09:19
different teams, but NASA needed was divided up all their inventories all the resources
5:09:24
into groups and number of hosts. And also they wanted to divide up all the users in
5:09:29
two different teams and give each team different credentials and permissions. And also if you
5:09:35
look in the more granular level each user in each team could also have different credentials and permissions. Let's say that you want to give the team leader of a particular team
5:09:44
access to some kind of data what you don't want the other users in the team to access that data. So also NASA wanted to Define different credentials for each individual member as
5:09:54
well the wanted to divide up all the data according to the projects and jobs also now,
5:10:00
so I wanted to move from chaos into a more organized Manner and for that they adopted
5:10:06
ansible tower now ansible Tower is ansible in and more enterprise-level ansible Tower
5:10:13
provides you with the dashboard which provides all the status summary of all the hosts and
5:10:18
job and simple Tower is a web-based interface for managing your organization. It provides
5:10:25
you with a very easy to use user interface for managing quick deployments and monitoring
5:10:31
all the configurations. So, let's see what answer build our did it has the credential
5:10:36
management system which could give different access permission to each individual user and Teams and also divided up the user into teams and single individual users as well
5:10:47
and it has a job assignment system and you can also assign jobs using ansible tower X
5:10:54
suppose. Let's say that you have assigned job one to a single user job to another single user while job to could be assigned to a particular team. Similarly. The whole inventory was also
5:11:04
managed all the servers. Let's say dedicated to a particular mission was grouped together all the host machines and other systems as well Sansa built our help NASA to organize
5:11:14
everything now, let us take a look at the dashboard that ansible Tower provides us.
5:11:19
So this is the screenshot of the dashboard at a very initial level. You can see right now there is zero host. Nothing is there but I'm just showing you what ansible tower provides
5:11:29
you so on the top you can check all the users and teams. You can manage the credentials
5:11:34
from here. You can check your different projects and inventories. You can make job templates
5:11:40
and schedule job. As well. So this is where you can schedule jobs and provide every job
5:11:45
with a particular ID so that you can track it. You can check your job status here whether your job was successful or failed and since ansible Tower is a configuration management
5:11:55
system. It will hold the historical data as well. So you can check the job statuses of
5:12:00
the past month or the month before that. You can check the host status as well. You can
5:12:06
check how many hosts are up and running you can see the host count here. So this dashboard
5:12:11
of ansible tower provides you with so much ease of monitoring all your systems. So it's very easy to use ansible to our dashboard anyone in your company anyone can use it because
5:12:21
it's very user-friendly now, let us see the results that NASA achieved after it has used
5:12:26
ansible tower now updating nasa.gov used to take one hour of time and after using ansible
5:12:33
it got down to just five minutes security patching updates where a multi-day process
5:12:39
and now it requires only 45 minutes the provisioning of os accounts can be done in just 10 minutes
5:12:48
earlier the application Stack Up time required one to two hours and now it's done in only
5:12:53
10 minutes. It also achieved a near real-time RAM and this monitoring and baselining all
5:12:59
the standard Amazon machine image has this used to be a one-hour manual process. And
5:13:04
now you don't even need manual interference for that. It became a background invisible process. So you can see that how ansible has drastically changed the overall management
5:13:13
system of NASA. So guys, I hope that if understood how I answered will help NASA. If you have
5:13:19
any question, you may ask me at any time on the chat window. So let us proceed to the
5:13:24
next topic. Now this was all about how others have used ansible. So now let us take a look
5:13:30
at the ansible architecture so that we can understand more about ansible and decide how
5:13:35
we can use ansible. So this is the overall ansible architecture. I've got the answer.
5:13:41
Automation engine and I've got the inventory and a Playbook inside the automation engine.
5:13:46
I've got the configuration management database here and host and this configuration management
5:13:51
database is a repository that acts as a data warehouse for all your it installations. It
5:13:58
holds all the data relating to the collection of your all it assets and these are commonly
5:14:03
known as configuration items and it also holds the data which describe the relationships
5:14:08
between such assets. So this is a repository for all your configuration management data
5:14:14
and here I've got the ansible automation engine. I've got the inventory year and inventory
5:14:19
is nothing but the list of all the IP addresses of all my host machines now as I told you
5:14:25
how to use configuration management you use it with the configuration management tool like ansible but how do you use ansible? Well, you do that using playbooks. And playbooks
5:14:37
describe the entire workflow of your system. Inside playbooks. I've got modules apis and
5:14:45
plugins now modules are the core files now play books contain a set of place which are
5:14:51
a set of tasks and inside every task. There is a particular module. So when you run a
5:14:57
play book, it's the modules that actually get executed on all your node machines. So
5:15:03
modules are the core files and like I told you before ansible already comes with inbuilt
5:15:08
modules, which you can use and you can also customize them as well as comes with different Cloud modules database modules. And don't worry. I'll be showing you how to use those
5:15:17
modules in ansible and there are different apis as well. Well API is an answerable are
5:15:24
not meant for direct consumption. They're just there to support the command line tools.
5:15:29
For example, they have the python API and these apis can also be used as a transport for cloud services, whether it's public or private you can use it then I've got plugins
5:15:40
now plug in Our special kind of module that allowed to execute ansible task as job Bill
5:15:46
step and plugins are pieces of code that augment the ansible score functionality and ansible
5:15:52
also comes with a number of Handy plugins that you can use. For example, you have action plugins cash plugins callback plugins and also you can create plugins of your own as
5:16:01
well. Let me tell you how exactly different it is from a module. Let me give you the example
5:16:06
of action plug-in now action plug in our front-end modules and what it does is that when you
5:16:12
start running a Playbook something needs to be done on the control machine as well. So
5:16:18
this action plugins trigger those action and execute those tasks in the controller machine
5:16:23
before calling the actual modules that are getting executed in the Playbook. And also
5:16:29
you have a special kind of plug-in called The Connection plug in which allows you to connect to the docker containers in your note machine and many more and finally I have this
5:16:39
host machine that is Elected via SSH and this was machines could be either windows or Linux
5:16:46
or any kind of machines. And also let me tell you that it's not always needed to use SSH
5:16:52
for connection. You can use any kind of network Authentication Protocol you can use Kerberos
5:16:57
and also you can use the connection plugins as well. So this is fairly a very simple ansible
5:17:03
architecture. So now that you've understood the architecture, let us write a play book
5:17:08
now now let me tell you how to write a play book and playbooks and ansible are simple
5:17:13
files written in HTML code and yambol is a data serialization language. You can think
5:17:19
of data serialization language as a translator for breaking down all your data structure
5:17:24
and serialize them in a particular order which can be reconstructed again for later use and
5:17:30
you can use this reconstructed data structure in the same environment or even in a different
5:17:35
environment. So this is the control machine where ansible will be installed and this is where you'll be writing your playbooks. Let me show you the structure of how to write
5:17:44
a play book. However, play book starts with three dashes on the top. So first you have to mention the list of all your host machines here. It means where do you want this Playbook
5:17:53
to run? Then you can mention variables by gathering facts, then you can mention the
5:17:58
different tasks that you want. Now remember that the task get executed in the same order
5:18:04
that you write them. For example, if you want to install software a first and then softer
5:18:10
beef later on. So make sure that the first task would be install software and the next
5:18:15
task would be install software be and then I've got handlers at the bottom. The handlers
5:18:20
are also tasks but the difference is in order to execute handlers. You need some sort of
5:18:26
triggers in the list of tasks. For example, we use notify. I'll show you an example now.
5:18:32
Okay, let me show you an example of Playbook so that you can relate to this structure. So this is an example of an ansible Playbook to install Apache like I told It starts with
5:18:42
three dashes on the top remember that every list starts with a dash in the front or a
5:18:48
- here. I've only mentioned just the name of one group. You can mention the name of several groups where you want to run your playbook. Then I've got the tasks you give
5:18:58
a name for the task which is install Apache and then you use a module here. I'm using
5:19:04
the app module to download the package. So this is the syntax of writing the app module.
5:19:10
So you give the name of the package which is Apache to update cache is equal to yes.
5:19:15
So it means that it will make sure that app get is already updated in your note machine before it installs the Apache 2 and you mentioned State equal to latest. It means that it will
5:19:26
download the latest version of Apache 2. And this is the trigger because I'm using handlers
5:19:31
you're right and the Handler here is to restart Apache and I'm using the service module here
5:19:37
and the name of the software that I want to restart is Apache. And state is able to restart
5:19:43
it. So notify have mentioned that there is going to be a Handler whose job would be to restart Apache 2 and then the task in the Handler would get executed and it will restart
5:19:53
Apache 2. So this is a simple Playbook and will also be writing similar kind of playbooks later on the Hands-On part. So you'll be learning again. So if it's looking a little gibberish
5:20:03
for you will be doing and that on the Hands-On part so then it will clear all your doubts.
5:20:09
So now let us see how to use ansible and understand its applications so we can use ansible for
5:20:15
application deployment configuration management security and compliance provisioning and orchestration.
5:20:22
So let us take a look at them one by one first. Let us see how we can use ansible for orchestration.
5:20:27
Well orchestration means let's say that we have defined configurations for each of my
5:20:33
systems, but I also need to make sure how this configurations will interact with each
5:20:39
other. So this is the process of Orchestration but I decide that how the different configurations
5:20:45
on different of my systems and my infrastructure would interact with each other in order to
5:20:51
maintain a seamless flow of my application and your application deployments need to be
5:20:56
orchestrated because you've got a front-end and back-end Services. You've got databases
5:21:02
you've got monitoring networks and storage and each of them has their own role to play
5:21:08
with with their configuration and deployment and you cannot just run all of them is ones
5:21:13
and expect that the right thing happens. So what you need is that you need an orchestration
5:21:18
tool that all this task happen in the proper order that the database is up before the backend
5:21:24
server and the front end server is removed from the load balancer before it gets upgraded and that your networks would have their proper vlans configured. So this is what ansible
5:21:35
helps you to do. So, let me give you a simple example so that you can understand it better.
5:21:40
Let's say that I want to host a website on my node machines. And this is precisely what we're going to do later on the Hands-On part. So first and in order to do that first, I
5:21:51
have to install the necessary software, which is the lamp stack and after that I have to
5:21:56
deploy all the HTML and PHP files on the web server. And after that I'll be gathering some
5:22:01
kind of information from my web pages that will go inside my database server. Now, if you want to perform these all tasks, you have to make sure that the necessary software is
5:22:11
installed first now, I cannot deploy the HTML PHP files on the web servers. If I don't have
5:22:16
a web servers if a party is not installed. So this is orchestration where you mention
5:22:22
that the task that needs to be carried out before and the task that needs to be carried out later. So this is what ansible playbooks allow you to do. Now. Let's see what provisioning
5:22:32
is like provisioning in English means to provide with something that is needed. It is same
5:22:38
in case of ansible it. That ansible will make sure that all the necessary software is that
5:22:44
you need for your application to run is properly installed in each of the environments of your
5:22:49
infrastructure. Let us take a look at this example here to understand what provisioning actually is. Now if I want to provision a python web application that I'm hosting on
5:22:59
Microsoft Azure and Microsoft is your is very similar to AWS and it is also a cloud platform
5:23:05
on which you can build up all your applications. So let's say so now if I want to host my if
5:23:11
I'm developing a python web application for coding I would need the Microsoft is your
5:23:17
document database. I would need Visual Studio or need to install python also and some kind
5:23:23
of software development kit and different apis for that so ansible so you can list out
5:23:29
the name of all the software development kits and all this necessary software's that you will require for coding this web that it would require in order to develop your web application.
5:23:38
So you can list out all the necessary software is that you'd be needing in ansible playbook
5:23:45
in order to develop your web application and for testing your code out you will again need
5:23:50
Microsoft Azure document database you would again note visual studio and some kind of testing software. So again, you can list out all the software's and ansible Playbook and
5:24:00
it will provision your testing environment as well. And it's the same thing while you're deploying it on the production server as well and Sybil will provision your entire application
5:24:09
at all stages at coding stage a testing and at the production stage also, so guys, I hope
5:24:15
you've understood what provisioning is let us move on to the next topic and see how we
5:24:20
can achieve configuration management with ansible now ansible configurations are simple
5:24:26
data descriptions of your infrastructure, which is both human readable and machine possible
5:24:31
and app server requires. Nothing more than an SSH key in order to start managing systems
5:24:37
and you can start managing them without installing. Any kind of agent or client software? So you
5:24:42
can avoid the problem of managing the management which is very common in different automation
5:24:48
systems. For example, I've got my host machines and Apache web servers installed in each of the host machines. I've also got PHP and MySQL installed if I want to make configuration
5:24:58
changes if I want to update a party and update my MySQL I can do it directly. I can push
5:25:03
those new configuration details directly onto my host machines or my note machines and my
5:25:09
server and you can do it very easily using ansible playbooks. So let us move on to the
5:25:14
next topic and let us see how application deployment has been made easier with ansible
5:25:19
now ansible is the simplest way to deploy your applications. It gives you the power
5:25:25
to deploy all your multi-tier applications where reliably and consistently and you can
5:25:31
do it all from a common framework. You can configure all the needed Services as well as push application artifacts from one system. With ansible you can write Play books which
5:25:41
are the description of the desired state of your system and it is usually kept in the source control sensible. Then does all the hard work for you to get your systems to the
5:25:51
state. No matter what state they are currently in and play books make all your installations
5:25:56
all your upgrades for day-to-day management, very repeatable. So with ansible you can write
5:26:02
Play books which are the descriptions of the desired state of the systems. And these are usually kept in the source control and simple then does all the hard work for you to get
5:26:12
all your systems in the desired State no matter what state they're currently in and playbooks
5:26:18
make all your installations your upgrades and for all your day-to-day Management in
5:26:23
a very repeatable and reliable way. So let's say that I am using a version control system
5:26:29
like get while I'm developing my app. And also I'm using Jenkins for continuous integration
5:26:35
now Jenkins will extract code from get every time there is a new Commit and then making
5:26:40
software built and later. This build will get deployed in the test server for testing.
5:26:46
Now if changes are kept making in the code base continuously. You would have to configure your test and the production server continuously as well according to the changes. So what
5:26:57
ansible does is that it continuously keeps on checking the Version Control System here so that it can configure the test and the production server accordingly and quickly
5:27:05
and hence. It makes your application deployment like a piece of cake. So guys, I think you
5:27:12
have understood the application deployment. Don't worry in the Hands-On part will also be deploying our own applications on different servers as well. Now, let us see how we can
5:27:22
achieve security with ansible in today's complex. It environment security is Paramount you need
5:27:28
security for your systems you need security for your data and not just your data your customers data as well. Not only you must be able to Define what it means for your systems
5:27:38
to be. You also need to be able to Simply apply that security and also you need to constantly
5:27:44
monitor your systems in order to ensure that they remain compliant with that security and
5:27:50
with ansible. You can simply Define security for your systems using playbooks with playbooks.
5:27:56
You can set up firewall rules. You can log down different users or groups and you can even apply custom security policies as well now ansible also works with the Mind Point
5:28:05
Group which rights and civil rules to apply these aesthetic now disa stick is a cybersecurity
5:28:11
methodology for standardizing security protocols within your network servers and different
5:28:17
computers. And also it is very compliant with the existing SSH and win RM protocols. And
5:28:23
this is also a reason why ansible is preferred over other configuration management tools and it is also compatible with different security verification tools like opens Gap and stigma
5:28:34
what tools like opens cap and stigma does is that it carries out a timely inspection. All your software inventory and check for any kind of vulnerabilities and it allows
5:28:43
you to take steps to prevent those attacks before they actually happen and you can apply the security over your entire infrastructure using ansible. So, how about some Hands-On
5:28:54
with ansible? So let us write some ansible playbooks now. So what are we going to do is that we are going to install lamp stack and then we're going to host a website on
5:29:03
the Apache server and will also collect some data from our webpage and store it in the
5:29:09
MySQL server. So guys, let's get started. So here I'm using the Oracle virtualbox manager
5:29:15
and here I've created two virtual machines. The first is the ansible control machine and the ansible host machine. So ansible control machine is the machine where I have installed
5:29:24
and simple and this is where I'll be writing all my playbooks and answer will host one here is going to be my note machine. This is where the playbooks are going to get deployed.
5:29:33
So in this machine, I'll deploy my website. So I'll be hosting a website in the answer will host one. Just go to my control machine and start writing the playbooks. So this is
5:29:43
my ansible control machine. Now. Let's go to the terminal first. So this is the terminal
5:29:49
of my ansible control machine. And now I've already installed ansible here and I've already made an SSH connection with my note machine. So let me hear just become the root user first
5:29:59
now, you should know that you do not always need to become the root user in order to use ansible. I'm just becoming the root user for my convenience because I like to get all the
5:30:08
root privileges while I'm using ansible, but you can pseudo to any user if you like So
5:30:16
let me clear my screen first. Now before we start writing play boo status first check
5:30:21
the version of ansible that is installed here. And for that I'll just use the command ansible
5:30:27
- - version. And as you can see here that I have got the ansible two point two point
5:30:34
zero point zero version here. Now. Let me show you my host inventory file since I've
5:30:40
got only one node machine here. So I'm going to show you where exactly the IP address of my node machine is being stored. So open the hosts file for you now, so I'm just going
5:30:49
to open the file and show it to you. So I'm using the G edit editor and the default location
5:30:55
of your host inventory file is at sea. I'm supposed / posts. And this is your host inventory
5:31:06
file and now have mentioned the IP address of my host machine here, which is one. Ninety
5:31:11
two point one sixty eight point 56.1 02 and I have named it under the group name test
5:31:18
servers. So always write the name of your group under the square brackets now, I just
5:31:24
have one node machine. So there is only one IP address. If you have many node machines, you can just let us down the IP address under this line. It's as simple as that or if you
5:31:33
even want to group it under a different name, you can use a different name use another square bracket and put a different name for another set of your hosts. Okay. Now, let me clear
5:31:43
my screen first. So first, let me just test out the SSH connection whether it's working
5:31:48
properly or not using ansible. So for that I'll just type in the command and Sybil and
5:31:57
pink and then the name of the group of my host machines, which is test servers in my
5:32:03
case. And thank changed to Paul. It means that an SSH connection is already established
5:32:13
between my control machine and my note machine. So we are all ready to write playbooks and start deploying it on the notes. So the first thing that I need to do is write a provisioning
5:32:23
Playbook now, since I'm going to host a website, I would first need to install the necessary
5:32:28
software's so I'll be writing a provisioning playbook for that and out provision my node machine using lamp stack. So let us write a Playbook to install lamp stack on my Note
5:32:38
machine now, I've already written that Playbook. So I'm just going to show it to you. I'm using
5:32:45
the Gia did editor again and the name of my provisioning playbook is lamp stack. And the
5:32:52
extension for AML file is Dot. Yml, and this is my playbook. Now. Let me tell you how I
5:32:59
have written this Playbook as I told you that every play book starts with three dashes on the top. So here are the three dashes and then I've given a name to this Playbook which
5:33:07
is to install Apache PHP and MySQL. Now, I've already got the L in my lamb because I'm using
5:33:13
a Ubuntu machine which is a Linux operating system. So I need to install Apache PHP and
5:33:18
MySQL now and then you have to mention the host here on which you want this Playbook to get deployed. So I've mentioned this over here and then I want to escalate my privileges
5:33:29
for which I'm using become and become user it is because sometimes you want to become another user different from what you are actually logged into the remote machine. So you can
5:33:39
use escalating privileges tools like so or pseudo to gain root privileges. And so and
5:33:44
that is why I've used become and become user for that. So I'm becoming the user root and I'm using become true here on the top. What it does is that it activates Your Privilege
5:33:54
escalation and then you become the root user on the remote machine and then gather facts true. Now, what it will do is that we gather useful variables about the remote host. Now
5:34:05
what exactly it will gather is some sort of files or some kind of keys which can be used
5:34:10
later in a different Playbook. And as you know that every Playbook is a list of tasks that you need to perform. So this is the list of all my tasks that I'm going to perform
5:34:20
and since it's a provisioning Playbook, which means I'm only installing the necessary softwares. That will be needed in order to host a website on my Note machine. So first I'm installing
5:34:30
Apache so given the task name as install apache2 and then I'm using the package module here.
5:34:36
And this is the syntax of the package module. So you have to first specify the name of the
5:34:42
package that you are going to download which is Apache 2 and then you put State equal to present now since we're installing something for the first time and it won't this package
5:34:52
to be present in your node machine. So you're putting State equal to present now similarly if you want to delete something you can put State equal to absent and it works that way
5:35:02
so I've installed in Apache PHP module and I've installed PHP client PHP Emperor PHP
5:35:08
GD library of install a package PHP MySQL. And finally, I've installed the MySQL server
5:35:14
in the similar way that I've installed a party to this is a very simple Playbook to provision your node machine and actually all the playbooks are simple. So I hope that you have understood
5:35:24
how to write a Book now, let me tell you something that you should always keep in mind while you were writing playbooks make sure that you are always extra careful with the indentation
5:35:34
because Gamal is a data serialization language and it differentiates between elements with
5:35:39
different indentations. For example, I've got a name here and a name here also, but
5:35:45
you can see that the indentations are different it is because this is the name of my entire Playbook while this is just the name of my particular task. So these two are different
5:35:53
things and they need to have different indentations the ones with the similar indentations are known as siblings like this one. This is also doing the same thing. This is also installing
5:36:03
some kind of package and this is also installing some kind of package. So these are similar, so that's why you should be very careful with indentation. Otherwise, it will create a problem
5:36:12
for you. So what are we waiting for? Let us run this Playbook clear my screen first. So
5:36:17
in order to run a play book and the command that you should be using to run an answerable Playbook is ansible - Playbook And then the name of your file, which is lamp stack dot
5:36:31
Jama and here we go. And here it is. Okay because it is able to connect to my note machine.
5:36:37
Apache 2 has been installed. And it's done. My playbook is successfully run. And how do
5:36:53
I know that? I know that seeing these common return values. So these common return values
5:37:00
like okay changed unreachable and fate. They give me the status summary of how my playbook
5:37:06
was run. So okay equal to 8, it means there were eight tasks. That was Run Okay changed
5:37:11
equal to 7. It means that something in my note between has been changed because obviously I've install new packages into my note machine. So it's showing changed equal to 7 unreachable
5:37:22
is equal to 0 it means that there is zero host that were unreachable and failed equal to 0 it means that zero tasks where fate so my playbook was run successfully on to my
5:37:33
note between. So let us check my note machine and see if Apache and MySQL has been installed.
5:37:39
So let us go to my node machine now. So this is my node machine. So let us check knife.
5:37:45
Apache server has been installed. So I'm going to my web browser. So this is my web browser
5:37:50
in my note machine. Let me go to the Local Host and check if Apache web server has been
5:37:56
downloaded and it's there. It works. Now. This is the default web page of apache2 web
5:38:01
server. So now I know for sure that Apache was installed in my note machine now. Let us see if MySQL server has been installed. Let me go to my terminal. This is the terminal
5:38:13
of my load machine. Now. If you want to check if MySQL has installed just use this following
5:38:19
command. mice ql user is root then - p sudo password password again for MySQL and there
5:38:36
it is. So MySQL server was also successfully installed in my note machine. So let's go
5:38:41
back to my control machine and let's do what is left to do. So we're back into our control
5:38:47
machine. Now. I've already provisioned my note machine. So let's see what we need to do next now since we are deploying a website on the Node machine, let me first show you
5:38:56
how my first web page looks like let me first show you how my first web page looks like
5:39:02
so this is going to be my first web page which is index dot HTML and I've got two more PHP
5:39:09
files also this salvi actually deploying these files onto my node machine. So let me just
5:39:14
open the first webpage to you. So this is going to be my first web page. And what I'm
5:39:20
going to do is that I'm going to ask for name and email because this is a registration page for at Eureka where you have to register with your name and email and I want this name and
5:39:31
email to go into my database. So for that I need to create a database and also need
5:39:36
to create a table for this name and email data to store into so for that will write another play book and we'll be using database modules in that clear the screen first now
5:39:47
again, I've already written that Playbook. So let me just show it to you. So using the G edit editor here again and the name of this Playbook is my school module. Okay. So this
5:40:03
is my playbook. So like all Playbook it starts with three dashes and here I have mentioned
5:40:09
host all now. I just have only one host. I know I could have mentioned either the only
5:40:15
one IP address directly or even given the name of my group but I've written just all your so that you can know that if you had many group names or you have many notes and
5:40:24
you want this Playbook to run on all of your node machines, you can use this all and this
5:40:29
Playbook will get deployed on all your note machines. So this is another way of mentioning
5:40:34
your hosts and I'm using remote user root and this is another method to escalate your
5:40:40
privileges. It's similar to become and become user. So on the remote user to have root privileges
5:40:46
while this Playbook would run and then the list of the tasks and so what I'm doing in this Playbook is that since I have to connect to my MySQL server, which is present in my
5:40:55
note machine. I need a particular software for that which is the MySQL python module
5:41:01
and I'm Download and install it using tip now dip is the python package manager with which you can install and download python packages. But first, I need to install Pippin
5:41:11
my note machine. So since I told you that the tasks that you write in a Playbook it gets executed in the same order that you write them. So my first task is to install pip and
5:41:20
then I'm using the app module here here. I've given the name of the package which is python bit and state equal to present and after that. I'm installing some other software's using
5:41:31
bit and I'm stalling some other related software's as well. I'm also installing Library - with
5:41:36
blind deaf. And after that using pip, I'm installing the MySQL python module now notice
5:41:43
that so you can consider this as an orchestration Playbook because here I'm making sure that
5:41:49
pip has to get installed first and after papers installed I'm using pip to install another
5:41:55
python package. So you see what we did here right and then I'm going to use the database
5:42:01
modules for Getting a new user to access the database and then I'm creating the database
5:42:06
named a do so for creating a MySQL user. I've used the MySQL user database module that ansible
5:42:14
comes with and this is the syntax of the MySQL user module recreate the name of the new user
5:42:21
which is edureka, you mentioned the password and the preview here. It means what privileges
5:42:27
do you want to give it to the new user and here I'm granting all privileges for all database.
5:42:33
And since you're creating it for the first time and you want state to be present. Similarly,
5:42:39
I'm using the mysqldb module to create a database in my MySQL server named ed you so this is
5:42:47
the very simple syntax of using mysqldb module. We have to just give the name of the database
5:42:53
in DB equal to and state equal to present. So this will create a database named Eddie
5:42:59
also and after that I also need to create a table inside the database for storing my name and email details, right and and unfortunately ansible does not have any MySQL table creating
5:43:12
modules. So what I did is that I've used a Command Module here. We Command Module and
5:43:18
directly going to use my SQL queries to create a table and the syntax is something like this
5:43:24
so you can write it down or remember it if you want to use it. So for that since I'm writing a MySQL Query I started with mySQL user Eddie wake up the - us for the user and
5:43:37
then for password Etc. Wake up. Now after - e just write the query that you need to
5:43:43
execute on the MySQL server and write it in single quotations. So I have written the query
5:43:48
to create a table and this is create table are EG the name the email and then after that
5:43:55
just mention the name of the database on which you want to create this table, which is a do for me. So this is my orchestration PlayBook. Clear my screen first. The command is ansible
5:44:09
- Playbook and the name of your play book, which is MySQL modding. And here we go. Again,
5:44:22
my common return values tell me that the Playbook was done successfully because there are no fail task and no unreachable host and there are change task in my note machine. So now
5:44:32
all the packages are downloaded now, my node machine is well provisioned. It's properly
5:44:38
orchestrated. Now. What are we waiting for? Let's deploy your application. Well clear the screen first. So now let me tell you what exactly do we need to do in order to deploy
5:44:48
my application and in my case, these are just three PHP files and HTML files that I need
5:44:55
to deploy it on my Note machine in order to display this HTML files and PHP files on my
5:45:00
web server in my note machine. What I need to do is that I need to copy this files from my control machine to the proper location in my notebook machine and we can do that
5:45:11
using playbooks. So let me just show you the Playbook to copy files. And the name of my
5:45:18
father is deployed website. So this is my playbook to deploy my application and here
5:45:28
again, I've used the three dashes and then the name of my playbook is copy the host as
5:45:34
you know that it's going to be test servers. I'm using privilege escalation again, and I'm using become and become user Again The Gather facts again true. And here is the list
5:45:45
of the task the task is to just copy my file from my control machine and paste it in my
5:45:51
destination machine, which is my node machine and for that and for copying I've used a copy
5:45:56
module and copy module is a file module that ansible comes with so this is the syntax of
5:46:03
the copy module here. You just need to mention a source and source is the path where my file
5:46:09
is contained in my control machine, which is home at Eureka documents. And the name of the file is index dot HTML, and I wanted to go too far www HTML and it's index dot
5:46:21
HTML, so I should be copying my files. Into this location in order for it to display it
5:46:27
on the web page and similarly have copied my other PHP files using the same copy module.
5:46:32
I've mentioned the source and destination and copying them to the same destination from the same source. So I don't think any of you would have questions here. This is the most
5:46:41
easiest Playbook that we have written today. So let us deploy our application now and for
5:46:46
that we need to run this play book and before that we need to clear the screen because there
5:46:51
are a lot of stuff on our screen right now. So let's run the Playbook. And here we go,
5:47:07
and it was very quick because there was nothing much to do. You just have to copy files from one location to another and these are very small files. Let us go back to our host machine
5:47:16
and see if it's working. So you're back again at our host machine. Let's go to my web browser
5:47:23
to check that. So let me refresh it and there it is. And so here is my first web page. So
5:47:32
my application was successfully deployed. So now let us enter our name and email here
5:47:38
and check if it is getting entered in my database. So let's put our name and the email. It's
5:47:49
why z.com and add it so new record created successfully. It means that it is getting
5:47:56
inserted into my database. Now, let's go back and view it and there it is. So congratulations,
5:48:04
you have successfully written playbooks to deploy your application your provision your node machines using playbooks and orchestrated them using playbooks now, even though at the
5:48:14
beginning it seemed like a huge task to do and so we'll play both made it so easy. Hello
5:48:21
everyone. This is Saurabh from Edureka in today's session will focus on what his puppet.
5:48:30
So without any further Ado let us move forward and how look at the agenda for today first. We'll see why we need configuration management while the various problems are industries
5:48:39
were facing before configuration management was introduced after that will understand what exactly is configuration management and we'll look at various configuration management
5:48:47
tools after We'll focus on puppet and we'll see the puppet architecture along with the
5:48:52
various puppet components and finally in our hands on part will learn how to deploy my SQL and PHP using puppet. So I'll move forward and we'll see what are the various problems
5:49:02
before configuration management. So this is the first problem guys, let us understand
5:49:07
this with an example suppose. You are a system administrator and your job is to deploy mean
5:49:13
stack say on four nodes. All right means dark is actually Mongo DB Enterprise angularjs
5:49:19
and node.js so you need to deploy means dark on four notes that is not a big issue. You can manually deploy that and four nodes but what happens when your infrastructure becomes
5:49:28
huge you may need to deploy the same means tax a on hundreds of notes. Now, how will you approach the task? You can't do it manually because if you do it manually, it'll take
5:49:37
a lot of time plus they will be wastage of resources along with that. There is a chance
5:49:42
of human error. I mean, it increases the risk of human error. All right, so we'll take the same example forward. And we'll see what are the other problems before configuration management.
5:49:52
Now, this is the second problem guys. So it's fine like you in the previous step you have
5:49:57
deployed means that one hundreds of nodes manually. Now what happens there is an updated version of Mongo DB available and your organization wants to shift that updated version. Now,
5:50:07
how will you do that? You want to go to the updated version of Mongo DB? So what you'll do you'll actually go and manually update mongodb on all the nodes in your infrastructure.
5:50:17
Right? So again, that will take a lot of time but now what happens that updated version
5:50:22
of the software has certain glitches your company wants to roll back to the previous version of the software, which is mongo DB in this case. So you want to go back to the
5:50:32
previous version. Now, how will you do that? Remember you have not kept the historical record of Mongo DB during the updating. I mean you have updated mongodb biannually on
5:50:42
all the nodes. You don't have the record of the previous version of Mongo DB. So what you need to do you need to go and manually Reinstall mongodb on all the nodes. So rollback
5:50:51
was a very painful task. I mean it used to take a lot of time. Now. This is the third
5:50:57
problem guys over here what happens you have updated mongodb in the previous step on say
5:51:02
development environment and in the testing environment, but when we talk about the production environment, they're still using the previous version of mongodb. Now what happens there
5:51:11
might be certain applications that work that are not compatible with the previous version
5:51:16
of mongodb All right. So what happened developers write a code and that works fine in his own
5:51:21
environment or beat his own laptop after that. It works fine till testing is well. Now when
5:51:27
it reaches production since they're using the older version of Mongo DB which is not compatible with the application that developers have built so it won't work properly there
5:51:35
might be certain functions which won't work properly in the production environment. So there is an inconsistency in the Computing environment due to which the application might
5:51:44
work in the development environment, but in product it is not working properly. Now what
5:51:49
I'll do, I'll move forward and I'll tell you how important configuration management is with the help of a use case. So configuration management. Add New York Stock Exchange. All
5:51:59
right. This is the best example of configuration management that I can think of what happened
5:52:04
a software glitch prevented the New York Stock Exchange from Trading stocks for almost 90
5:52:09
minutes this led to millions of dollars of loss a new software installation caused the problem. The software was installed on 8 of its twenty trading Terminals and the system
5:52:20
was tested out the night before however in the morning it failed to operate properly
5:52:25
on the a terminals. So there was a need to switch back to the old software you might
5:52:30
think that this was a failure of New York Stock Exchange has configuration management process, but in reality, it was a success as a result of proper configuration management
5:52:41
process NYSE recovered from that situation in 90 minutes, which was pretty fast. Let
5:52:46
me tell you guys had the problem continued longer the consequences would have been more
5:52:51
severe so because the proper configuration management, New York Stock Exchange Painted loss of millions of dollars they were able to roll back to the previous version of the
5:53:00
software within 90 minutes. So we'll move forward and we'll see what exactly configuration management is. So what is configuration management configuration management is basically a process
5:53:10
that helps you to manage changes in your infrastructure in a more systematic and structured way. If you're updating a software you keep a record of what all things you have updated. What
5:53:19
will change is you are making in your infrastructure all those things and how you achieve configuration management you achieve that with the help of a very important concept called infrastructure
5:53:28
as code. Now. What is the infrastructure is code infrastructure as code simply means that you're writing code for infrastructure. Let us refer the diagram that is present in front
5:53:36
of your screen. Now what happens in infrastructure is code you write the code for infrastructure in one central location. You can call it a server. You can call it a master or whatever
5:53:46
you want to call it. All right. Now that code is deployed onto the dev environment test
5:53:51
environment and the product environment. Basically your entire infrastructure. All right, whatever. No, do you want to configure your configure that with the help of that one central location?
5:54:00
So let us take an example. All right suppose you want to deploy Apache Tomcat say on all
5:54:05
of your notes. So what you'll do in one location will write the code to install Apache tomcat
5:54:11
and then you'll push that onto the nodes which you want to configure. What are the advantage you get here. First of all the first problem if you can recall that configuring large infrastructure
5:54:20
was very hectic job, but because of configuration management, it becomes very easy how it becomes
5:54:27
easy. You just need to write the code in one central location and replicate that on hundreds of notes it is that easy. You don't need to go and manually install or update the software
5:54:36
on all the nodes. All right. Now the second problem was you cannot roll back to the previous table version in time. But what happens here, since you have everything well documented
5:54:46
in the central location rolling back to the previous version was not a time-consuming task. Now the third problem was there was a variation or inconsistency in Various teams,
5:54:56
like Dev team Testament product team like the environment the Computing environment was a different in-depth testing product. But with the help of infrastructure as code
5:55:05
what happens all your three environment that is there tested product have the same Computing environment. So I hope we all are clear with what is configuration management and what
5:55:14
is infrastructure is code. So we'll move forward and we'll see what are the different type of configuration management approaches are there now, there are two types of configuration
5:55:23
management approaches one is push configuration. Another is pull configuration. All right. Let me tell you push configuration first input configuration what happens there's one centralized
5:55:33
server and it has all the configurations inside it if you want to configure certain amount of nodes. All right, say you want to configure for notes as shown in the diagram. So what
5:55:43
happens if you push those configuration to these nodes there are certain commands that you need to execute on that particular central location and with the help of that command
5:55:51
those are configurations, which are present will be pushed onto the nodes now, Let us see what what happens in pull configuration in pull configuration. There is one centralized
5:56:00
server, but it won't push all the configurations on to the nodes what happens nodes actually posed the central server at say 5 minutes or 10 minutes basically at periodic intervals.
5:56:11
All right, so it will pose the central servers for the configurations and after that it will
5:56:16
pull the configurations that are there in the central server so over here, you don't need to execute any command nodes will add automatically pull all the configurations
5:56:24
that are there in the centralized server and pop it in Chef both uses full configuration. But when you talk about push configuration ansible unsourced accuses push configuration,
5:56:34
so I'll move forward and we'll look at various configuration management tools. So these are
5:56:39
the four of most widely adopted tools for configuration management. I have highlighted puppet because in this session, we are going to focus on puppet and it uses pull configuration
5:56:48
and when we talk about Saul stock, it uses push configuration, so does ansible ansible
5:56:54
also uses push. Listen Chef also uses the pulley configuration. All right, so pop it
5:56:59
and chef uses pull configuration, but ansible and solve Stark uses push configuration. Now, let us move forward and see what exactly puppet is. So pop it is basically a configuration
5:57:10
management tool that is used to deploy a particular application configure your nodes and manager
5:57:15
service. Like they can possibly take your servers online and offline as required configure them and deploy a certain package or an application onto the node. So right with the help of puppet,
5:57:26
you can do that with ease and the architecture that it uses master-slave architecture. Let
5:57:32
us understand this with an example. So this is Puppet Master over here. All the configurations are present and these are all the puppet agents. All right, so these puppet agents pole the
5:57:42
central or the Puppet Master at regular intervals and whatever configurations are present. It
5:57:47
will pull those configuration basically. So let us move forward and focus on the Puppet
5:57:52
Master Slave architecture now, this is a Also slave architecture guys over here what happens
5:57:58
the puppet agent or the puppet node sends facts to the puppet master and these facts are basically a key value our data pair that represents some aspect of slave state that
5:58:09
aspect can be its IP address time operating system or whether it's a virtual machine and
5:58:14
then Factor gathers those basic information about puppet slave such as Hardware details network settings operating system type and version IP addresses Mark addresses all those
5:58:25
things. Now these parts are then made available in Puppet Masters manifest as variables now
5:58:31
Puppet Master uses those facts that it has received from the puppet agent or the puppet node to compile a catalog that catalog defines how the slave should be configured and at
5:58:41
the catalog is a document that describes a desired state for each resource that Puppet
5:58:47
Master manages, honestly, so it is basically a compilation of all the resources that Puppet Master applies to a given slave as well as at the relationship between Those resources
5:58:56
so the catalog is compiled by the puppet master and then it is sent back to the node and then
5:59:01
finally slave provides data about how it has implemented that catalog and if sandbags our
5:59:08
report. So basically the node or the agent sends the report back that the configurations are complete and they can actually view that in the puppet dashboard as well. Now what
5:59:18
happens is the connection between the node or the puppet agent and the puppet master happens with the help of SSL secure encryption. All right, we'll move forward and we'll see
5:59:28
how actually the connection between the puppet master and puppet node happens. So this is how puppet master and slave connection happens what happens first of all the puppets slave
5:59:37
it requests for the Puppet Master certificate. All right. It sends a request to the master certificate and once Puppet Master receives that request it will send the master certificate
5:59:47
and once puppet slave has received the master certificate Puppet Master will again send a request to the slave regarding the its own certificate. All right. So it will request
5:59:56
a for the puppet agent to send its own certificate. The puppet slave is generate its own certificate
6:00:01
and send it to Puppet Master. Now what puppet master has to do puppet master has to sign
6:00:07
that certificate. Alright. So once it has signed the certificate puppet slave can actually request for the data. All right all the configurations and then finally Puppet Master will send those
6:00:17
configurations on to the puppets late. This is how puppet master and slave communicates. Now, let me show you practically how this happens. I have installed puppet master and
6:00:26
puppet slave on my sent to West machines. All right, I'm using 2 virtual machines 14 puppet master and another for puppet sleep. So let us move forward and execute this practically
6:00:36
now, this is my Puppet Master virtual machine over here. I've already created a puppet master
6:00:43
certificate, but there is no puppet agent certificate right now and how will you confirm that there is a command that is puppet. Third list and it will display all the certificates
6:00:54
that are pending in puppet master. I mean that are pending for the approval from the master. All right, so currently there are no certificates available. So what I'll do
6:01:02
is I'll go to my puppet agent and I'll fetch the Puppet Master certificate which are generated
6:01:07
earlier and at the same time generate the puppet agent certificate and send it to master for signing it. So this is my puppet agent virtual machine now over here as I've told
6:01:17
you earlier as well. I'll generate a puppet agent certificate and at the same time I'll fetch the Puppet Master certificate and that agent certificate will be sent to puppet master
6:01:27
and it will sign that puppet my agent certificate. So let us proceed with that for that. I'll type up it agent - t and here we go. All right, so it is creating a new SSL key for the puppet
6:01:40
agent as you can see in the logs itself. So it has sent a Certificate request and this
6:01:46
is the fingerprint for that. So exiting no certificate found and wait for sword is disabled.
6:01:52
So what I need to do is I need to go back to my Puppet Master virtual machine and the signed this particular certificate that is generated by puppet agent. Now over here if
6:02:03
you want to see the list of certificates, what do you need to do? You need to type up it so at least I have told you earlier as well. So let us see what all certificates
6:02:11
are there now, so as you can see that there is a certificate that has been sent by puppet agent. All right, so I need to sign this particular sort of again. So for that what I will do
6:02:20
I'll type pop it. Search sign on the name of the certificate that is puppet agent and
6:02:29
here we go. So that successfully signed the certificate that was requested by puppet agent.
6:02:36
Now what I'll do, I'll go back to my puppet agent virtual image and over there. I'll update the changes that have been made in the Puppet Master. Let me first clear my terminal and
6:02:47
now again, I'll type puppet agent - tea. All right, so we have successfully established
6:02:56
a secure connection between puppet master and puppet agent. Now. Let me give you a quick
6:03:01
recap of what we have discussed a lot first. We saw what are the various problems before configuration management be focused on three major problems that were there. All right.
6:03:10
And after that we saw how important configuration management is with the help of a use case of New York Stock Exchange. And finally we saw what exactly configuration management
6:03:20
is. And what do you mean by infrastructure is code. We also looked at various configuration
6:03:25
management tools are namely Chef puppet ansible and saltstack and after that we understood
6:03:30
what exactly pop it is. And what is the master-slave architecture that it has and how puppet master
6:03:37
and puppet slave communicates. All right, so I'll move forward and we'll see what use case I have for you today. So what we are going to do in today's session or we are going
6:03:45
to deploy a my SQL and PHP using puppet. So for that what I will do, I'll first a download
6:03:52
the predefined modules for my dad. SQL and PHP that are there in the puppet Foods. All right, those modules will actually Define the two classes that is PHP and MySQL. Now
6:04:02
you cannot deploy the class directly onto the nodes. So what do you need to do? When you in puppet Boniface you need to declare those classes, whatever class you have defined.
6:04:11
You need to declare those classes. I'll tell you what our manifest modules you don't need to worry about that. I'm just giving a general overview of what we are going to do in today's
6:04:19
session. So you just need to declare those two classes at as PHP and MySQL and finally just deploy that onto the nose it is that simple guys. So as you can see that there
6:04:29
will be a code for PHP and MySQL from that Puppet Master, it will be deployed onto the
6:04:35
nose or the puppet agents will move forward and we'll see what are the various phases
6:04:40
in which will be implementing the use case. Alright. So first we'll define a class has all right classes are nothing but the collection of various resources. How will do that will
6:04:49
do that with the help of modules that will actually download a module from the puppet. Boat and we'll use that module that defines who classes as I've told you PHP and MySQL
6:04:59
and then I'm going to declare that class in the Manifest and finally deploy that onto the nodes. All right. So let us move forward and before actually doing this it is very
6:05:08
important for you to understand certain basics of pop it like code basics of puppet like what our classes resources manifest modules all those things. So we'll move forward and
6:05:18
understand those things one by one. Now. What happens is first of all, I'll explain you resources classes manifests in modules separately. But before that, let me just give you an overview
6:05:28
of what are these things? All right, how do they work together? So what happens there
6:05:33
are certain resources or write a user is a resource of pile is a resource. Basically anything that is there can be considered as a resource. So multiple resources actually
6:05:42
combine together to form a class. So now this class you can declare it in any of the benefits
6:05:48
that you want. You can declare it in multiple manifests. All right, and then finally you can bundle all These manifest together to form a module. Now. Let me tell you guys it
6:05:57
is not mandatory that with you will combine the resources and define a class. You can
6:06:02
actually deploy the resources directly. It is a good practice if you combine the resources in the form of classes because it becomes easier for you to manage the same goes for
6:06:11
manifest as well. And I'll tell you how to do that as well. You can write a puppet code and deploy that onto the nodes and at the same time it is not necessary for you to bundle
6:06:20
the Manifest that you are using in the form of modules. But if you do that, it becomes more manageable and it becomes more structured. All right, so it becomes easier for you to
6:06:28
handle multiple manifests. All right. So let us move forward and have a look at what exactly
6:06:33
are resources and what our class is in puppet. Now what our resources anything that is there
6:06:38
is a resource a user is a resource other told you about file can be a resource. Basically anything that is there can be considered as a resource. So puppet code is composed primarily
6:06:49
of a resource declarations a resource describes something about the state of the System it can be such as a certain user or a file should exist or a package should be installed now
6:06:59
here we have the syntax of the resource. All right, first you write the type of the resource. Then you give a name to it in the single quotes and various attributes that you want to Define
6:07:08
in the example. I've shown you that it will create a file that is I need d.com and this
6:07:15
attribute will make sure that it is present. So let us execute this practically guys. I'll
6:07:20
again go back to my Center as virtual machine now over here. What I'll do I'll use the G
6:07:26
edit editor you can use whatever editor you want and I'll type the path for my manifest
6:07:33
directory and in this directory. I let Define a file. All right and with the dot DB extension,
6:07:40
so I'll just name it as a side dot p p and here we go. Now what head are the resource
6:07:48
examples that I've shown you in this light? I will just write the same example and the let us see what happens file open the braces now give the path HC. / I knit DDOT conf Ina
6:08:09
DDOT conf. Colon, and antenna, and now I'm going to write the attribute, so I'm going to make sure that it is present in sure. The Define is created. Etsy I knit / I knit. DDOT
6:08:32
conf comma and the now-closed the braces save it and close it. Now what you need to do.
6:08:46
You need to go to the puppet Asian once more and over there. I'm going to execute agent - t command that will update the changes made in the Puppet Master. Now we're here. I'll
6:09:04
use the puppet agent - t command and let us see if the file I need the dot-coms is created
6:09:10
or not. All right, so it has done it successfully now. What I'll do is just to confirm that
6:09:17
I'll use LS command for that. I will type LS Etsy. Ina DDOT Kant And as you can see
6:09:26
that it has been created, right so we have understood what exactly a resources in puppet,
6:09:33
right? So now let us see what our classes classes are nothing but the group of resources. All right, so you group multiple resources together to form one single sauce and you
6:09:43
can declare that class in multiple manifest as we have seen earlier. It has a syntax error. Let us see first you need to write class then give a name to that class open the braces
6:09:54
write the code in the body and then close the brace is it's very simple and it is pretty much similar to the other coding languages that you if you if you have come across any
6:10:03
other coding languages. It is pretty much similar to the class that you define over there as well. All right, so we have a question from my uncle he's asking can you specify
6:10:12
what exactly the difference between a resource and a class classes are actually nothing but the bundle of resources. All right, all those Resources Group together forms a class and
6:10:22
what you can say is a resource describes a single. Or a package but what happens a class
6:10:28
describes everything needed to configure an entire service or an application? So we'll move forward and we'll see what our manifest so this is puppet manifest now what exactly
6:10:38
it is, every slave has got its configuration details in puppet master and it is written
6:10:43
in the native puppet language. These details are written in the language that puppet can
6:10:49
understand and that language is termed as manifests. So this is Manifest all the puppet
6:10:54
programs are basically termed as Manifest. So for example, you can write a manifest in
6:11:00
puppet master that creates a file and install the party's over on puppet slaves connected to the Puppet Master. Alright, so you can see I've given you an example over here. It
6:11:11
uses a class that is called Apache and this class is defined with the help of predefined
6:11:16
modules that are there in puppet port and then various our tributes like Define the virtual hosts in the port and the root directory, so Basically, there are two ways to actually
6:11:26
declare a class in puppet manifest either. You can just write include and the name of the class or you can if you don't want to use a default attributes of that class, you
6:11:36
can make the changes in that by using this particular syntax that is you write the class open the braces and the class name: whatever changes or whatever the attributes that you
6:11:45
want apart from the one which are there in Deep by default and then finally close the braces. All right. So now I'll execute a manifest practically that will install Apache on my
6:11:54
notes. All right now need to deploy Apache using puppets. All right. So what I need to
6:11:59
do, I need to write the code to deploy apart a in the Manifest directory. I've already created a file with DOT CPP extension. If you can remember when I was talking about
6:12:07
resources, right? So now again, I'll use the same file that is side b p and I'll write the code to deploy a partay. All right. So what I'll do I'll just I'll use the G editor
6:12:17
you can use whatever editor you feel like it see Pop It manifest and site. Art p p and
6:12:26
here we go. Now over here. I'll just delete the resource that I've defined here. I like
6:12:33
my screen to be nice and clean and now I will write the code to deploy a party so for that
6:12:42
I will tight package. httpd : now I need to ensure it is install. So for that I'll type
6:12:52
in sure installed. Give a comma Now I need to start this Apache service for that. I'll
6:12:59
type service. httpd in short running through a coma now close the braces the save it and
6:13:17
close it. Let me clear my terminal. And now what I'll do, I'll go to my puppet agent from
6:13:23
there. It will pull the configurations that are present in my Puppet Master. Now what happens periodically puppet agent actually pulls the configuration from Puppet Master
6:13:31
and it is around 30 minutes, right? It takes around half an hour after every half an hour puppet agent pulls the configuration from Puppet Master, right so you can configure
6:13:40
that as well. If you don't want to do it just throw in a command puppet agent - tea and it will automatically pull the configurations are representing the puppet master. So for
6:13:48
that I will go to my puppet agent virtual machine now here what I'll do, I'll type a
6:13:54
command puppet agent - t and let us see what happens. So it is done now now what I'll do
6:14:02
just to confirm that I will open my browser. And over here, I will type the hostname of
6:14:08
my machine which is localhost and let us see if a party is installed. All right, so Apache
6:14:13
has been successfully installed now, let us go back to our slides and see what exactly modules are. So what our puppet modules puppet module can be considered as a self-contained
6:14:23
bundle of code and data. Let us put it in another way. We can say that puppet module
6:14:30
is a collection of manifest and data such as Parks files templates Etc. All right, and
6:14:37
they have a specific directory structure. Modules are basically used for organizing
6:14:43
your puppet code because they allow you to split your code into multiple manifest. So
6:14:48
they provide you a proper structure in order to manage a manifest because in real time, you'll be having multiple manifest to manage those manifests. It is always a good practice
6:14:57
to bundle them together in the form of modules. So by default puppet modules are present in
6:15:03
the directly / HC / puppet / modules, whatever modules you download from Puppet force will be present in this module directory. All right, even if you create your own modules, you have
6:15:11
to create in this particular directory. That is / HC / puppet / modules. So now let us
6:15:18
start the most awaited topic of today's session that is deploying PHP and my SQL using puppet.
6:15:24
Now, what I'm going to do is I'm going to download the two modules one is for PHP and
6:15:30
another is for MySQL. So those two modules will actually Define PHP and MySQL class for
6:15:36
me now after that I need to declare that class in the Manifest. Then site dot PHP file present
6:15:41
in the puppet manifest. So I'll declare that class in the Manifest. And then finally, I'll throw in a command puppet agent - teen my agent and it will pull those configurations
6:15:50
and PHP and MySQL will be deployed. So basically when you download a module you are defining
6:15:55
a class. You cannot directly deploy the class you need to declare it in the Manifest and
6:16:01
I will again go back to my sin to icebox now over here. What I'll do, I'll download the
6:16:06
my SQL module from the puppet forward. So forth are all type puppet mode. You'll install
6:16:16
Puppet Labs. - my sequel - - give the night version name so I will use three point one
6:16:30
zero point zero and here we go. So what is happening here as you can see the saying preparing
6:16:39
to install into / HC / puppet / modules, right? So it will be installed in this directories
6:16:44
apart from that. It is actually downloading this from the forge a pi dot puppet labs.com.
6:16:52
So it is done now, that means that successfully install MySQL module from Puppet Fort. All right. Let me just clear my terminal and now I will install PHP modules for that. I'll
6:17:00
type puppet module install. - a PHP - - version that is four point zero point zero - beta
6:17:17
1 and here we go. So it is done. Now that means we have successfully installed two modules
6:17:25
one is PHP and other is my SQL. All right. Let me show you where it is present in my machine. So what I'll do, I'll just hit an LS command and I'll show you in puppet modules.
6:17:37
And here we go. So as you can see that there's a my SQL module and PHP module that we have
6:17:44
just downloaded from Puppet Foods. Now what I need to do is I have defined by SQL and
6:17:49
PHP class, but I need to declare that in the site dot PHP file present in the puppet manifest.
6:17:55
So for that what I will do I'll first use the G edit editor you can use whatever editor
6:18:00
that you want. I'm saying it again and again, but you can use whatever editor that you want. I personally prefer G edit and now manifest side dot p p and here we go. Now as I told
6:18:15
you earlier is well, I like my screen to be clean and nice. So I'll just remove this and over here. I will just declare the two classes. That is my secret and PHP. Include my sequel.
6:18:33
Server and the next line. I'll include the PHP class for that anti PHP. Just save it
6:18:48
now close it. Let me clear my terminal now what I'll do, I'll go to my puppet agent.
6:18:54
And from there. I'll hit a command puppet agent - t that will pull the configurations from Puppet Master. So let us just proceed with that. Let me first clear my terminal
6:19:07
and now I'll tie puppet agent - t and here we go. So we have successfully deployed PHP
6:19:29
and MySQL using puppet. All right, let me just clear my terminal and I'll just confirm
6:19:36
it by typing my sequel - we All right, this will display the version now as just exit
6:19:45
from here and now I'll show you the PHP versions of adult type PHP - version and here we go.
6:19:54
Alright, so this means that we have successfully installed PHP and MySQL using puppet. So now
6:20:03
let me just give you a quick recap of what we have discussed in love. All right. So first we saw why we need configuration management. What are the various problems that were there
6:20:11
before configuration management? And we understood the importance of configuration management with a use case of New York Stock Exchange. All right, after that we saw what exactly
6:20:20
configuration management is and we understood a very important concept called infrastructure as code. Then we focused on various type of configuration management approaches namely
6:20:30
push and pull then we saw various configuration management tools are namely puppet chef ansible
6:20:36
and Source tag after that. We focus on pop it and we saw what exactly puppet is its Master
6:20:43
Slave architecture how puppet master and slave communicates all those things then we understood
6:20:48
the puppet code Basics. We understood what our resources what a class is Manifest modules
6:20:54
and finally in our hands on part. I told you how to deploy PHP and MySQL using puppet My
6:21:04
name is Sato. And today we'll be talking about Nagi ways. So let's move forward and have a look at the agenda for today. So this is what we'll be discussing. Will Begin by understanding
6:21:12
why we need continuous monitoring what is continuous monitoring and what are the various tools available for continuous monitoring. Then we are going to focus on Nagi OS we are
6:21:21
going to look at its architecture how it works. We are also going to look at one case study and finally in the demo. I will be showing you how you can monitor a remote host using
6:21:30
NRP, which is nothing but nagios remote plug-in executor. So I hope you all are clear with the agenda. Let's move forward and we'll start by understanding why we need continuous monitoring.
6:21:39
Well, there are multiple reasons guys, but I mentioned for very important reasons why we need continuous monitoring. So let's have a look at each of these one by one. The first
6:21:47
one is failure of see ICD pipelines since devops is a buzzword in the industry right now. And most of the organizations are using devops practices. Obviously, they are implementing
6:21:57
see ICD pipelines or it is also called as digital pipelines right now the idea behind these SED pipeline is to make sure that the release should happen more frequently and
6:22:06
it should be more stable in an automated fashion. Right because there are a lot of competitors you might have in the market and you want to release your product before them. So agility
6:22:14
is very very important. And that's why we use eicd pipelines. Now when you implement such a pipeline you realize that there can't be any manual intervention at any step in
6:22:24
the process or the entire pipeline slows down. So you will basically defeat the entire purpose manual monitoring slows down your deployment Pipeline and increases the risk of performance
6:22:34
problems propagating in production, right? So I hope you have understood this. If you notice the three points that I've mentioned it's pretty self-explanatory rapid introduction
6:22:43
of performance problems and errors, right because you are releasing software and more frequently. So there has to be rapid introduction of performance problems rapid introduction
6:22:51
of new endpoints causing monitoring issues. Again, this is pretty self-explanatory then the root cause analysis as a number of services expands because you are releasing software
6:23:00
more frequently, right? So definitely the number Services are going to increase and there's a lengthy root cause analysis, you know, because of which you lose a lot of time,
6:23:08
right? So let's move forward and we look at the next reason why we need continuous monitoring. For example, we have an application which is light, right? We have deployed it on the
6:23:16
production server. Now. We are running a p.m. Solutions which is basically application performance monitoring. We are monitoring our application how the performance is. Is there any down
6:23:24
time all those things? Right? And then we figure out certain issues with our applications on performance issues now to go back basically to roll back and to incorporate those changes
6:23:33
to remove those bugs developers are going to take some time because the process is huge because your application is already live, right? You cannot afford any downtime. Now,
6:23:42
imagine what if before releasing the software on a pre production server, which is nothing
6:23:47
but the replica of my production server. I can run those APM solutions to figure out how my application is going to perform and it actually goes live right so that way whatever
6:23:57
issues of their developers will be notified before and they can take the corrective action.
6:24:02
So I hope you have understood my point. The next thing is server Health cannot be compromised at any cost. So I think it's pretty obvious guys. Your application is running on a server.
6:24:11
You cannot afford any downtime in that particular server or increase in the response time also,
6:24:17
right. So you require some sort of a monitoring system to check your server Health as well.
6:24:22
Right? What if your application goes down because you're so it isn't responding right? So you don't want any scenario like that in a world like today where everything is so
6:24:31
Dynamic, and the competition is growing. Exponentially. You want to give best service to your customers,
6:24:36
right? And I think so / health is very very important because that's where your application is running guys are not things. I have to stress too much on this right, so we basically
6:24:44
require continuous monitoring of a server as well. Now, let me just give you a quick recap of the things that we have discussed. So we have understood why we need continuous
6:24:52
monitoring by looking at three four examples, right? The first thing is we solve what are the issues with see ICD pipeline right? We cannot have any sort of manual intervention
6:25:00
for monitoring in source of bye. Because you're going to defeat the purpose of such pipeline. Then we saw that developers have to be notified about the performance issues of the application
6:25:10
before releasing it in the market. Then we saw server Health cannot be compromised at any cost. Right? So these are the three major reasons why I think continuous monitoring
6:25:19
is very important for most of the organization's right? Although there are many other reasons as well right now. Let's move forward and understand what exactly is continuous monitoring
6:25:29
because we just talked a lot of scenarios where Manuel monitoring or a traditional monitoring processes are not going to be enough. Right? So let us understand what exactly is continuous
6:25:38
monitoring and how is it different from what relation process so basically continuous monitoring tools resolve any sort of system errors before they have any negative impact on your business.
6:25:48
It can be low memory unreachable server, etc. Etc. Apart from that. They can also monitor the business processes and the application as well as your server which we have just
6:25:57
discussed. Right? So continuous monitoring is basically an effective system where The
6:26:03
entire it infrastructure starting from your application to your business process to your server is monitored in an ongoing way and in an automated fashion, right? That's what
6:26:11
basically is the Crux of continuous monitoring. So these are the multiple phases given to us by n is T for implementing continuous monitoring and is is basically National Institute of
6:26:19
Standards and technology. So let me just take you through each of these stages first thing
6:26:24
is defined so in to basically develop a monitoring strategy, then what you're going to do you are going to establish measures and Matrix and you also going to stablish monitoring
6:26:34
and assessment frequencies at how frequently are going to monitor it right. Then you are going to implement whatever you have stablished the plan that you have laid down. Then you're
6:26:42
going to analyze data and report findings, right? So whatever issues that are there you're going to find that pose that you're going to respond and mitigate that error and finally
6:26:50
you're going to review and update the application or whatever you were monitoring right now. Let us move forward and patreon is also given us multiple phases involved in continuous
6:26:59
monitoring. So let us have a look at those old. So one by one The first thing is continuous Discovery. So contentious Discovery is basically discovering in maintaining near real-time
6:27:08
inventory of all networks and information assets, including hardware and software if I have to give an example basically identifying and tracking confidential and critical data
6:27:18
stored on desktops laptops and servers. Right next comes continuous assessment. It basically
6:27:25
means automatically scanning and comparing information assets against industry and data
6:27:30
repositories determine oner abilities. That's the entire point of continuous assessment. Right? So one way to do that is prioritizing findings and providing detailed reports right
6:27:39
by Department platform Network asset and vulnerability type next comes continuous audit, so continuously
6:27:46
evaluating your client server and network device configurations and comparing them with
6:27:52
standard policies is basically what continues audit is, right. So basically what you're going to do here is gain insights into problematic controls using patterns and access permission
6:28:01
of sensitive data. Then comes continuous patching. It means automatically deploying and updating
6:28:07
software to eliminate vulnerabilities and maintain compliance. Right? So if I have to give you an example may be correcting configuration settings, including network access and provision
6:28:16
software according to end users role in policies. All those things next comes continents reporting.
6:28:22
So aggregating the scanning results from different departments scan types and organizations into
6:28:28
one Central repository is basically what content is reporting is right for automatically analyzing
6:28:33
and correlating unusual activities in compliance with regulations. So I think it's pretty easy to understand if I have to repeat it once more I would say continuous Discovery is basically
6:28:42
discovering and maintaining an inventory a near real-time inventory of all the network
6:28:47
and information assets. Whether it's your Hardware or software then continuous assessment means automatically scanning and comparing the information assets from Gardens discovery
6:28:55
that we have seen against industry and data repositories to determine vulnerabilities continuous audit is basically Continuously evaluating your client server and network
6:29:04
device with configurations and comparing them with standards and policies Contreras patching
6:29:10
is automatically deploying and updating software to eliminate vulnerabilities and maintain
6:29:15
compliance right patching is basically your remedy kind of a thing where you actually respond to the threats that you see or vulnerabilities that you see in your application Garden is
6:29:23
reporting is basically aggregating scanning results from different departments scan types are organizations into one Central repository. So these are nothing but the various phases
6:29:32
involved in continuous monitoring. Let us have a look at various continents monitoring tools available in the market. So these are pretty famous tools. I think a lot of you
6:29:39
might have heard about these tools one is Amazon cloudwatch, which is nothing but a service provided to us by AWS Splunk is also very famous. And we have e LK and argue ways
6:29:48
right CLK is basically elastic log stash and Cabana in this session. We are going to focus on argue is because it's a pretty mature to lot of companies have used this tool and it
6:29:57
has a major market share as well and it's basically well suited for your entire it Whether
6:30:02
it's your application or server or even it's your business process now, let us have a look at what exactly is not your ways and how it works. So now I give which is basically a
6:30:11
tool used for continuous monitoring of systems your application your services and business processes Etc in a devops culture right now in the event of failure. Nagios can alert
6:30:21
technical staff of the problem allowing them to begin a remedy ation processes before outages
6:30:26
affect business processes and users or customers. So I hope you are getting my point. It can allow the technical staff of the problem and they can begin remediation processes before
6:30:36
outages affect their business process or end users or customers right with the argues. You don't have to explain why an answer in infrastructure outage affect your organization's
6:30:45
bottom line, right? So let us focus on the diagram that is there in front of your screen. So now use basically runs on a server usually as a Daemon or a service and it periodically
6:30:54
runs plugins residing in the same server what they do they basically contact hosts on servers
6:31:00
or on your network or on the Internet. Now one can view the status information using the web interface and you can also receive email or SMS notification if something goes
6:31:09
wrong, right so basically nagas Damon behaves like a scheduler that runs certain scripts
6:31:14
at certain moments. It stores the results of those cribs and we'll run other scripts
6:31:20
if these results change. I hope you are getting my point here right now. If you're wondering what our plugins of these are nothing but compiled executables or scripts. It can be
6:31:30
pearls great shell script Etc that can run from a command line to check the status of a host or a service noun argue is uses the results from the plugins to determine the
6:31:38
current status of the host. And so this is on your network. Now, let us see various features of Naga ways. Let me just take you through all these features one by one. It's pretty
6:31:48
scalable and secure and manageable as well. It has a good log in database system. It automatically
6:31:53
sends alerts which we just saw it. It takes network errors and server crashes. It has easy writing plug-in. You can write your own plugins right based on. Requirement yours
6:32:02
business need then you can monitor your business process and it infrastructure with a single pass guys issues can be fixed automatically. If you have configured in such a way then
6:32:11
definitely you can fix those issues automatically and it also has support for implementing redundant
6:32:17
monitoring posts. So I hope you are understood these features there are many more but these are the pretty attractive features and why and argue s is so popular is because of these
6:32:25
features, let us now discuss the architecture of nagios in detail. So basically now argue is has a server agent architecture right now usually in a network an argue a server is
6:32:35
running on a host which we just saw in the previous diagram, right? So consider this as my host. So now I guess server is running on a host and plugins interact with local
6:32:44
and remote Hood. So here we have plugins. So these will interact with the local resources or services and these will also interact with the remote resources or services or host right.
6:32:54
Now. These plugins will send the information to the scheduler which will display that in the GUI right now. Let me repeat it. Again. Nargis is build on a circuit. Good Agent architecture.
6:33:03
Right and usually in argue is server is running on a host and these plugins will interact with the local host or services or even the remote host Services. Right? And these plugins
6:33:13
will send the information to the scheduler nagios process scheduler, which will then display it on the web interface and if something goes wrong the concern teams will be notified
6:33:22
Via SMS or through email, right? So I think we have covered quite a lot of theory. So let me just go ahead and open my centralized virtual machine where I've already installed
6:33:31
now. Gos, so let me just open my Center as virtual machine first. So this is my Center
6:33:36
is virtual machine guys. And this is how the nagios dashboard looks like. I'm running it at Port 8000. You can run it wherever you want to explain that in the installation video
6:33:45
how you can install it now. If you notice there are a lot of options on the left hand side you can you know, go ahead and play around with it. You'll get a better idea. But let
6:33:52
me just focus on few important ones. So here we have a map option here, right? If you click on that, then you can see that you have a local host and you have a remote host as well.
6:34:02
My nagas process is monitoring both the local host and the remote host the remote host is currently down. That's why you see it like this when I will be running it'll be showing
6:34:10
you how it basically looks like now if I go ahead and click on host. You will see all the hoes that I'm currently monitoring some monitoring edureka and Local Host said Eureka
6:34:19
is basically a remote server and Local Host is currently on which my Onaga server is running right? So obviously it is up at the other server is down. If I click on Services, you
6:34:28
can see that these are the services that I'm monitoring for my remote host our monitoring CPU load ping and SSH and for my Local Host. I'm watching current load current users HTTP
6:34:37
paying root partition SSH swap usage in total processes. You can add as many services as
6:34:42
you want. All you have to do is change the host dot CFG file, which I'm going to show you later. But for now, let us go back to our slides will continue from there. So let
6:34:50
me just give you a small recap of what all things we have discussed. So we first saw why we need continuous monitoring. We saw various reasons why Industries need continuous
6:34:58
monitoring and how it is different from the traditional monitoring systems. Then we saw what is exactly continuous monitoring and what are the various phases involved in implementing
6:35:06
a continuous monitoring strategy. Then we saw what are the various continuous monitoring tools available in the market and we focus on argue as we saw what is not gue base how
6:35:15
it works? What is its architecture right. Now we're going to talk about something called is n RP e nagios remote plug-in executor of which is basically used for monitoring remote
6:35:25
Linux or Unix machines. So it'll allow you to execute nagios plugins on those remote machines. Now the main reason for doing this is to allow nog you wish to monitor local
6:35:33
resources, you know, like CPU load memory usage Etc on remote machines now since these
6:35:39
public resources are not usually exposed to external machines and agent like NRP must
6:35:44
be installed on the remote Linux or Unix machines. So even I have installed that in my Center ice box, that's why I was able to monitor the remote Linux host that I'm talking about.
6:35:53
Also. If you check out my nagas installation video, I have also explained how you can install NRP now if you notice the diagram here, so what we have is basically the Jake underscore
6:36:02
n RP plug-in residing on the local monitoring machine. This is your local monitoring machine,
6:36:08
which we just saw right? So this is where mine argue our server is now the Czech underscore in RP plug-in resides in a local monitoring machine where you're not arguing over is right.
6:36:17
So the one which we saw is basically my local machine or you can say where my Naga server is, right? So this check underscoring RP plug-in resides on that particular machine now this
6:36:27
NRP Daemon which you can see in the diagram runs on remote machine the remote Linux or
6:36:32
Unix machine which in my case was edureka if you remember and since I didn't start that machine so it was down right so that NRP Damon will run on that particular machine now, there
6:36:41
is a secure socket layer SSL connection between monitoring host and the remote host you can
6:36:47
see it in the diagram as well the SSL connection, right? So what it is doing it is checking the disk space load HTTP FTP remote services on the other host site then these are local
6:36:56
resources and services. So basically this is how an RP Works guys. Do you have and check underscore an Plug in designing in the host machine. You have NRP Daemon running on the
6:37:05
remote machine. There's an SSL connection, right? Yeah, you have SSL connection and this
6:37:10
NRP plug-in basically helps us to monitor that remote machine. That's how it works. Let's look at one very interesting case study. This is from bitten attics. And I found it
6:37:20
on the nagios website itself. So if you want to check out go ahead and check out their website as well. They have pretty cool case studies the power from Internet Explorer.
6:37:27
So there are a lot of other case studies on their website. So bit etics provides basically Outsource it management and Consulting to nonprofit or small to medium businesses right
6:37:36
now bitnet has got a project where they were supposed to monitor an online store for an e-commerce retailer with a billion dollar annual revenue, which is huge guys. Now, it
6:37:46
was not only supposed to you know monitor the store but it also needed to ensure that the cart and the checkout functionality is working fine and was also supposed to check
6:37:54
for website deformation and notify the necessary staff if anything went wrong right seems like
6:37:59
an easy task but let us see what are the Problems that bitnet X phase now bitnet X hit a roadblock
6:38:05
upon realizing that the clients data center was located in New Jersey more than 500 miles
6:38:11
away from their staff in New York, right? There was a distance of 500 miles between
6:38:17
their their staff is located and the data center. Now, let us see what are the problems they face because of this now the two areas needed a unique but at the same time a comprehensive
6:38:26
monitoring for their Dev test and prod environment of the same platform, right and the next challenge
6:38:32
was monitoring would be hampered by the firewall restrictions between different applications sites functions Etc. So I think you have a lot of you know about this firewalls is basically
6:38:40
sometimes can be a nightmare right apart from that most of the notification that were sent to the client what ignored because mostly those are false positive, right? So the client
6:38:49
didn't bother to even check those notifications now, what was the solution? So the first solution the thought is adding SSH firewall rules for Network Operation Center personnel and Equipment
6:38:59
second is analyzing web pages to see if there's any problem with Occurrences the third and the very important point was converting notification to nag, uh alerts and the problem that we
6:39:09
saw a false positive was completely removed with this escalation logic. We're converting not as notifications of Nargis alerts and escalations with specific time periods for
6:39:17
different groups, right? I hope you are getting my point here now configuring event handlers to restart Services before notification, which was basically a fixed for 90% of the issues
6:39:26
and using nagios core and multiple servers at the NOC facility and each Target is worker
6:39:32
was deployed at the application Level with direct access to the host. So whatever bag is worker or agent or remote machine we have was deployed at the application Level and
6:39:41
had the direct access to the host or the master whatever you want to call it and they have implemented the same architecture for production quality assurance staging and development
6:39:50
environments. Now, let's see what was the result now because of this there was a dramatic reduction in notifications. Thanks to the event handlers new configuration. Then there
6:39:58
was an increase in up time from 85% Early 298 personally, which is significant guys,
6:40:04
right then they saw a dramatic reduction in false positive because if the escalation is logic that I was just talking about then fourth point is estimating the need to log into multiple
6:40:14
boxes and change configuration file. Thanks to nagas configuration maintained in a central repository and post automatically to appropriate service fourth point is estimating the need
6:40:23
to log into multiple boxes and change the configuration files and that happens because the inauguration configuration maintained in a central repository or essential master
6:40:32
and can be pushed automatically to all these slaves to all the servers are slaves are agents whatever you want to call it. So this was a result of using nog u.s. Right now is the
6:40:40
time to check out a demo where what I'll be doing is I'll be monitoring couple of services actually more than a couple of services offer remote Linux machine through mine argue Ace
6:40:49
hose which I just showed you right? So from there, I'll be monitoring a remote Linux host Caldera Rekha, and I'll be monitoring like 34 Services you can have whatever you want
6:40:58
and let me just show you watch the process once you have installed. I guess what you need to do in order to make sure that you have remote host or a remote machine being
6:41:06
monitored by your nagios host. Now in order to execute this demo, which I'm going to show you. You must have lamp stack on your system. Right Linux Apache MySQL and PHP and I'm going
6:41:16
to use Center West 7 here. Let me just quickly open my Center as virtual machine and we'll
6:41:21
proceed from there. So guys, this is my sent to us virtualbox where I've already installed argue as I've told you earlier as well in this is where mine argue is host is running
6:41:29
or you can see the NOG your server is running and you can see the dashboard in front of your screen as well. Right? So let me just quickly open the terminal first me clear the
6:41:37
screen. So let me just show you where I've installed argue is that this is the path right? If you notice in front of your screen, it's in user local Nagi OS what I can do is just
6:41:46
clear the screen and I'll show you what our law directories are inside this so we can go inside this Etsy directory. And inside this I'm going to go inside the objects directory,
6:41:57
right? So why I'm doing this is basically if I want to add any command for example Ample I want to add the check underscore n RP command. That's how I'm going to monitor my remote
6:42:07
Linux host if you remember in the diagram, right? So that's what I'm going to do. I'm going to add that particular command. I've already done that. So let me just show you
6:42:14
how it looks so just type generator you can choose whatever editor that you like and go
6:42:19
inside the commands dot CFG file and let me just open it. So these are the various commands
6:42:24
that I was talking about. Now, you can just have a look at all these commands. This is to basically notify host a by email if anything goes down anything goes wrong in the host.
6:42:34
This is for service. Basically it'll notify if there's any problem with the service through email. This will check if my host machine is alive. I mean, is it up and running now
6:42:42
this command is basically to check the disk space like the local disk, then load rights. You can see all of these things here swap FTP. So I've added these commands and you
6:42:52
can have a look at all of these commands which I've mentioned here and the last command you see is I've added manually because all these commands once you install your get it by default,
6:43:01
but the IP take underscore n RP which I'm highlighting right now with my cursor is something which I have added in order to make sure that I will monitor the remote clinics horse. Now,
6:43:10
let me just go ahead and save this right. Let me clear my screen again and I'll go back
6:43:16
to my nagios directory. Let me share my screen again now, basically what this will do is
6:43:21
this will allow you to use a check and the score an RP command in you're not give service definitions right. Now. What we need to do is update the NRP configuration file. So use
6:43:31
your favorite editor and open NR P dot c f g which you will find in this particular directory
6:43:36
itself. So all I have to do is first I'll hit LS and then I can just check out the set
6:43:42
C directory. Now if you notice there is an NR P dot CFG file, right? I've already added
6:43:48
it. So I'll just go ahead and show you what the help of G edit or you can use whatever editor that you prefer now over here. You need to find this allowed host directive and
6:43:57
add the private IP address of your Nas device over to the gamma delimited list is Scroll down you will find something all allowed host. Right? So just add a comma and start with the IP address of the machine that you want to monitor So currently let me just open it
6:44:04
once more. So I'm going to use sudo because I don't have the Privileges now in this allowed
6:44:16
host directory. All I have to do is comma and the IP address of the host said I want
6:44:22
to monitor so it is one. Ninety two dot one sixty eight dot 1.21. Just go ahead save it
6:44:30
come back clear the terminal now save and exit. Now this configures in RP to accept requests from your Nas device over why it's private IP address, right and then just go
6:44:40
ahead and restart NRP to put the changes into effect now on you and argue server. You need to create a configuration file for each of the remote host that you monitor as I was
6:44:48
mentioning before is well now where you're going to find it in HC servers directory and let me just go ahead and open that for you. Let me go to the server's directory. Now if
6:44:58
you notice here, there is a deer a card or CFG file. This is basically the host. We'll be monitoring right now. If I go ahead and show you what I have written here is basically
6:45:07
first what I have done is I have defined the host. It's basically a Linux server and the
6:45:12
name of that. So what is Eddie raker allies? Whatever you want to give this is the IP address
6:45:17
maximum check attempts the periods. I want to check it 24/7 notification interval is what I have mentioned here and notification period so this is basically about all my host
6:45:27
now in that hose what all services are going to monitor our new monitor generic services, like pink then I want to monitor SSH then I'm going to monitor CPU load is when these
6:45:36
are the three services that I'll be monitoring and you can find that in your side C. So was that a tree over there? You have to create a proper configuration file for all of the
6:45:45
hose that you want to monitor Let Me Clear My terminal again the just to show you. My remote machine is well, let me just open that. So this is my remote machine guys over here.
6:45:53
I've already installed NRP so over here, I'm just going to show you how you can restart an RP systemctl restart. And rpe service and here we go the asking for the password. I've
6:46:07
given that a man not a piece of its has started actually have restarted again. I've already started it before as well. Let me just show you how my nagios dashboard looks like in
6:46:16
my server. Now. This is my dashboard again. If I go to my host tab, you can see that we
6:46:22
are monitoring to host a dinner a kind localhost. Erica is the one which I just showed you which is up and running right? I can go ahead and check out this map Legacy map viewer as well
6:46:32
which basically tells me that my a direct as remote host then also I have various sources
6:46:38
that are monitoring. So if you remember I was monitoring CPU load ping and SSH which you can see it over here as well. Right? So this is all it for today's session. I hope
6:46:47
you guys have enjoyed listening to this video. If you have any questions, you can go ahead and mention that in the comment section. And if you're looking to gain hands-on experience
6:46:54
and devops, you can go ahead and check out our website www.guitariq.com / devops. You
6:46:59
can view upcoming patches and enroll for the That will set you on the path of becoming a successful devops engineer, and if you're still curious to know more about the divorce
6:47:07
roles and responsibilities, you can check out the videos mentioned in the description. Thank you and happy learning.

